<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="%Dictionary.Classname">
<Super>%Dictionary.CacheClassname</Super>
<TimeCreated>66440,62434.490922</TimeCreated>
</Class>


<Class name="%Dictionary.Identifier">
<Description>
* Copyright (c) 2022 by InterSystems Corporation.
  Cambridge, Massachusetts, U.S.A.  All rights reserved.
  Confidential property of InterSystems Corporation. */</Description>
<Super>%DataType</Super>
<System>2</System>
<TimeCreated>66440,63339.91796</TimeCreated>

<Method name="IsValid">
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<FormalSpec>%val:%RawString</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[$select($length(%val)'>$$$MAXNAMELENGTH&&(%val'="")||(%val["||")||(%val["."):$$$OK,1:$$$ERROR($$$DatatypeValidationError,"%Dictionary.Identifier",%val))
]]></Implementation>
</Method>
</Class>


<Class name="%JSON.Adaptor">
<Description><![CDATA[
* Copyright (c) 2022 by InterSystems Corporation.
  Cambridge, Massachusetts, U.S.A.  All rights reserved.
  Confidential property of InterSystems Corporation. */
The following table displays the correspondence between JSON field values and
property values that will be implemented by the JSON Adaptor.<br><br>

The actual conversion between registered object values and JSON values will be done by new datatype methods: JSONToLogical and LogicalToJSON.
In addition, a new JSONTYPE parameter will be introduced for the datatype classes
which indicates how the data type will be mapped to JSON.<br><br>

<pre>
JSON                                            Registered object type
object                                          class referenced by property
array - error if all values are not literals    %ListOfDatatypes
array - error if all values are not objects     %ListOfObjects or relationship
array - error if all values are not literals    %List
string                                          %String, %Char, %Name, %FileCharacterStream, %GlobalCharacterStream
string - must be base64 encoded                 %Binary, %FileBinaryStream, %GlobalBinaryStream
string - ODBC format date                       %Date
string - ODBC format time                       %Time
string - ODBC format date/time                  %DateTime, %TimeStamp
numeric - bounds must match object type         %BigInt, %Currency, %Decimal, %Double, %Float, %Integer, %Numeric, %SmallInt, %TinyInt
boolean                                         %Boolean

</pre>
Note that the types %xsd package are all subclasses of base % datatypes and will map as the super type.<br><br>]]></Description>
<Abstract>1</Abstract>
<IncludeCode>%callout,%PVA,%jsonMap</IncludeCode>
<PropertyClass>%JSON.PropertyParameters</PropertyClass>
<System>3</System>
<TimeCreated>66440,59673.305102</TimeCreated>

<Parameter name="%JSONENABLED">
<Description>
If this parameter is true then JSON-enabling methods will be generated. 
Otherwise, the method generators do not produce a runnable method.</Description>
<Default>1</Default>
</Parameter>

<Parameter name="%JSONIGNOREINVALIDFIELD">
<Description>
The %JSONIGNOREINVALIDFIELD parameter allows the programmer to control handling of unexpected fields in the JSON input.
The default (%JSONIGNOREINVALIDFIELD = 0) will treat an unexpected field as an error.
If %JSONIGNOREINVALIDFIELD is set = 1, then unexpected fields will be ignored.</Description>
<Type>BOOLEAN</Type>
<Default>0</Default>
</Parameter>

<Parameter name="%JSONNULL">
<Description>
If %JSONNULL is true (=1), then unspecified properties are exported as the null value.
Otherwise the field corresponding to the property is just skipped during export. 
The corresponding property parameter overrides this parameter if specified.</Description>
<Type>BOOLEAN</Type>
<Default>0</Default>
</Parameter>

<Parameter name="%JSONIGNORENULL">
<Description><![CDATA[
%JSONIGNORENULL allows the programmer to override the default handling of empty strings for string properties.
This paramneter applies to only true strings which is determined by XSDTYPE = "string" as well as JSONTYPE="string"
By default (%JSONIGNORENULL = 0), empty strings in the JSON input are stored as $c(0)
and $c(0) is written to JSON as the string "". A missing field in the JSON input is always stored as ""
and "" is always output to JSON according to the %JSONNULL parameter.<br>
If %JSONIGNORENULL is set = 1, then both missing fields in the JSON and empty strings are input as "",
and both "" and $c(0) are output as field values of "". 
The corresponding property parameter overrides this parameter if specified.]]></Description>
<Type>BOOLEAN</Type>
<Default>0</Default>
</Parameter>

<Parameter name="%JSONREFERENCE">
<Description><![CDATA[
%JSONREFERENCE specifies the default value of the %JSONREFERENCE property parameter that specifies how to
project references to JSON.  %JSONREFERENCE may be specified for any property to override this default value.
Possible values of %JSONREFERENCE are "OBJECT", "ID", "OID", "GUID".<br>
="OBJECT" is the default and indicates that the properties of the referenced class are used to represent the referenced object.<br>
="ID" indicates that the id of a persistent or serial class is used to represent the reference.<br>
="OID" indicates that the oid of a persistent or serial class is used to represent the reference.
 The form of the oid as projected to JSON will be classname,id.<br>
="GUID" indicates the GUID of a persistent class is used to represent the reference.<br>
The corresponding property parameter overrides this parameter if specified.]]></Description>
<Type>STRING</Type>
<Constraint>OBJECT,ID,OID,GUID</Constraint>
<Default>OBJECT</Default>
<Flags>ENUM</Flags>
</Parameter>

<Method name="%JSONImport">
<Description><![CDATA[
%JSONImport imports JSON or dynamic object input into this object.<br>
The input argument is either JSON as a string or stream, or a subclass of %DynamicAbstractObject.<br>
mappingName is the name of the mapping to use for the import.  The base mapping is represented by "" and is the default.]]></Description>
<FormalSpec>input,%mappingName:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
	Try {
		Set sc=$$$OK
		New %JSONObject
		If $isobject(input),input.%IsA("%Library.DynamicAbstractObject") {
			// Already a dynamic object
			Set %JSONObject=input
		} Else {
			// A JSON stream or string
			Set %JSONObject=##class(%Library.DynamicAbstractObject).%FromJSON(input)
		}
		
		// Do the import now.
		Set sc=..%JSONImportInternal()
		
	} Catch ex {
		Set sc=ex.AsStatus()
	}

	Quit sc
]]></Implementation>
</Method>

<Method name="%JSONNew">
<Description><![CDATA[
Get an instance of an JSON enabled class.<br><br>

You may override this method to do custom processing (such as initializing
the object instance) before returning an instance of this class.
However, this method should not be called directly from user code.<br>
Arguments:<br>
    dynamicObject is the dynamic object with thee values to be assigned to the new object.<br>
    containerOref is the containing object instance when called from JSONImport.]]></Description>
<ClassMethod>1</ClassMethod>
<CodeMode>generator</CodeMode>
<FormalSpec>dynamicObject:%DynamicObject,containerOref:%RegisteredObject=""</FormalSpec>
<GenerateAfter>%JSONGenerate</GenerateAfter>
<ReturnType>%RegisteredObject</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[	Quit ##class(%JSON.Generator).JSONNew(.%mode,.%class,.%property,.%method,.%parameter,.%codemode,.%code,.%classmodify,.%context)
]]></Implementation>
</Method>

<Method name="%JSONExport">
<Description><![CDATA[
Serialize a JSON enabled class as a JSON document and write it to the current device.<br>
mappingName is the name of the mapping to use for the export.  The base mapping is represented by "" and is the default.]]></Description>
<FormalSpec>%mappingName:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Try {
	    Set sc=$$$OK
	    // Do the export to current device now.
	    Set sc=..%JSONExportInternal()
	} Catch ex {
	    If ex.%IsA("%Exception.SystemException") {
		Set zerror=ex.AsSystemError()
		If $piece(zerror,">",1)="<METHOD DOES NOT EXIST" {
		    Return $$$ERROR($$$JSONRefNotEnabled,$piece(zerror,",",2))
		}
	    }
	    Set sc=ex.AsStatus()
	}
	Quit sc
]]></Implementation>
</Method>

<Method name="%JSONExportToStream">
<Description><![CDATA[
Serialize a JSON enabled class as a JSON document and write it to a stream.<br>
mappingName is the name of the mapping to use for the export.  The base mapping is represented by "" and is the default.]]></Description>
<FormalSpec><![CDATA[&export:%Stream.Object,%mappingName:%String=""]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	// Save current device
	Set io=$io
	
	Try {
		// Always output to %FileCharacterStream
		If $get(export)="" {
			Set export=##class(%FileCharacterStream).%New()
			// JSON is always UTF-8
			Set export.TranslateTable="UTF8"
			Set filestream=1
		} Else {
			Set filestream = ($zobjclass(export)="%Library.FileCharacterStream")
		}
		If filestream {
			Set stream=export
		} Else {
			Set stream=##class(%FileCharacterStream).%New()
			Set stream.TranslateTable="UTF8"
		}
		
		// Force stream's file to open
		Set sc=stream.Write("")
		
		// Export JSON to the stream
		If $$$ISOK(sc) {
			Set file=stream.Filename ; get filename and make current device
			Use file:(/NOXY)
			Set sc=..%JSONExportInternal()
			// Don't Close file to leave stream positioned
			Use io
		}
		
		// Need to ensdure that LineTerminator is correct for the platform
		If $$$ISOK(sc) Set stream.LineTerminator=$select($$$isUNIX:$char(10),1:$char(13,10))

		// If we created the stream and caller passed in stream, then copy it to the caller's stream
		If 'filestream,$$$ISOK(sc) {	
			Set sc=export.CopyFrom(stream)
		}

	} Catch ex {
		Set sc=ex.AsStatus()
	}

	Quit sc
]]></Implementation>
</Method>

<Method name="%JSONExportToString">
<Description><![CDATA[
Serialize a JSON enabled class as a JSON document and return it as a string.<br>
mappingName is the name of the mapping to use for the export.  The base mapping is represented by "" and is the default.]]></Description>
<FormalSpec><![CDATA[&%export:%String,%mappingName:%String=""]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Try {
		Set sc=$$$OK
		
		// Do the export to current device now.
		Set %export=""
		Set sc=..%JSONExportToStringInternal()

	} Catch ex {
		If ex.Name="<MAXSTRING>" {
			Set sc=$$$ERROR($$$JSONMaxString,$$$mappingNameDisplay(%mappingName))
		} Else {
			Set sc=ex.AsStatus()
		}
	}

	Quit sc
]]></Implementation>
</Method>

<Method name="%JSONX">
<Description>
Dummy method which exists to force GenerateAfter code to take affect for %JSONGenerate.
The GenerateAfter will not have affect unless the after method is laterin collating sequence.
All this is necessary to force geenrator methods to be run after member methods are created.

This method is for internal use only. You should not make direct
use of it within your applications. There is no guarantee made about either
the behavior or future operation of this method.		</Description>
<Internal>1</Internal>
<Abstract>1</Abstract>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[	Quit
]]></Implementation>
</Method>

<Method name="%JSONGenerate">
<Description><![CDATA[
%JSONGenerate is an internal method that controls the generation of the other methods in %JSON.Adaptor.
If %JSONGenerate is overridden, then JSON meta data and the other generator methods
of %JSON.Adaptor will not be created.<p>]]></Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<CodeMode>generator</CodeMode>
<GenerateAfter>%JSONX</GenerateAfter>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[	Quit ##class(%JSON.Generator).%JSONGenerate(.%mode,.%class,.%property,.%method,.%parameter,.%codemode,.%code,.%classmodify,.%context)
]]></Implementation>
</Method>

<Method name="%JSONImportInternal">
<Description>
%JSONImportInternal is internal method used by %JSONImport</Description>
<Internal>1</Internal>
<CodeMode>generator</CodeMode>
<GenerateAfter>%JSONGenerate</GenerateAfter>
<ReturnType>%Status</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[	Quit ##class(%JSON.Generator).JSONImportInternal(.%mode,.%class,.%property,.%method,.%parameter,.%codemode,.%code,.%classmodify,.%context)
]]></Implementation>
</Method>

<Method name="%JSONExportInternal">
<Description>
%JSONExportInternal is internal method used by %JSONExport</Description>
<Internal>1</Internal>
<CodeMode>generator</CodeMode>
<GenerateAfter>%JSONGenerate</GenerateAfter>
<ReturnType>%Status</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[	Quit ##class(%JSON.Generator).JSONExportInternal(.%mode,.%class,.%property,.%method,.%parameter,.%codemode,.%code,.%classmodify,.%context)
]]></Implementation>
</Method>

<Method name="%JSONExportToStringInternal">
<Description>
%JSONExportToStringInternal is internal method used by %JSONExport</Description>
<Internal>1</Internal>
<CodeMode>generator</CodeMode>
<GenerateAfter>%JSONGenerate</GenerateAfter>
<ReturnType>%Status</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[	Quit ##class(%JSON.Generator).JSONExportToStringInternal(.%mode,.%class,.%property,.%method,.%parameter,.%codemode,.%code,.%classmodify,.%context)
]]></Implementation>
</Method>
</Class>


<Class name="%JSON.Generator">
<Description><![CDATA[
* Copyright (c) 2022 by InterSystems Corporation.
  Cambridge, Massachusetts, U.S.A.  All rights reserved.
  Confidential property of InterSystems Corporation. */
Generator methods for %JSON.Adaptor.<br><br>

This class is used internally by InterSystems IRIS. You should not make direct
use of it within your applications. There is no guarantee made about either
the behavior or future operation of this class.]]></Description>
<Abstract>1</Abstract>
<IncludeCode>%occInclude,%jsonMap</IncludeCode>
<IncludeGenerator>%occInclude,%jsonMap</IncludeGenerator>
<System>2</System>
<TimeCreated>66440,60985.417548</TimeCreated>

<Method name="GenerateMapping">
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec>class:%String,*mapping</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	// Initialize map to empty
	Kill mapping

	// Get the inheritance order
	Do ..LeftSequenceClass(class,.classSeq)

	// Get %JSONIGNOREINVALIDFIELD parameter
	Set jsonignoreinvalidfield=''$$$comMemberKeyGet(class,$$$cCLASSparameter,"%JSONIGNOREINVALIDFIELD",$$$cPARAMdefault)
	
	// Get %JSONMAPPING class parameter.
	Set jsondefaultmapping=$$$comMemberKeyGet(class,$$$cCLASSparameter,"%JSONMAPPING",$$$cPARAMdefault)

	// Get default for %JSONNULL
	Set jsondefaultnull=''$$$comMemberKeyGet(class,$$$cCLASSparameter,"%JSONNULL",$$$cPARAMdefault)

	// Get default for %JSONIGNORENULL
	Set jsondefaultignorenull=''$$$comMemberKeyGet(class,$$$cCLASSparameter,"%JSONIGNORENULL",$$$cPARAMdefault)
 
	// Get default for %JSONREFERENCE
	Set jsondefaultreference=$zcvt($$$comMemberKeyGet(class,$$$cCLASSparameter,"%JSONREFERENCE",$$$cPARAMdefault),"U")
	If jsondefaultreference="" Set jsondefaultreference="OBJECT"
	If $case(jsondefaultreference,"OBJECT":0,"ID":0,"OID":0,"GUID":0,:1) {
		Quit $$$ERROR($$$JSONInvalidDefaultParameter,"parameter %JSONREFERENCE","class base")
	}

	// Create map node for each property
	Set sc=$$$OK
	Set property=""
	For {
		Set property=$$$comMemberNext(class,$$$cCLASSproperty,property)
		If property="" Quit

		// Get %JSONINCLUDE property parameter
		Set jsoninclude=$zcvt($$$comMemberArrayGet(class,$$$cCLASSproperty,property,$$$cPROPparameter,"%JSONINCLUDE"),"L")
		Set includeProperty=$case(jsoninclude,"":"","inout":1,"inputonly":1,"outputonly":1,"none":1,:-1)
		If includeProperty=-1 {
			Set sc=$$$ERROR($$$JSONInvalidPropertyParameter,"parameter %JSONINCLUDE",property,"class base")
			Quit
		}
		
		// Get details of the property's type
		Do ..GetMemberInfo(class,property,.includeProperty,.type,.membercat)
		
		If includeProperty {
			// Default for %JSONINCLUDE is "inout"
			If jsoninclude="" Set jsoninclude="inout"
	
			// Do not support array of streams
			If membercat["STREAM",membercat["Array" {
				Set sc=$$$ERROR($$$JSONNoStreamArray,property,"class base")
				Quit
			}
			
			// For string types, set literaltype to string, base64 or hex.
			Set literaltype=""
			If membercat["CSTREAM" {
				Set literaltype="string"
			} ElseIf membercat["BSTREAM" {
				Set encoding=$$$comMemberArrayGet(class,$$$cCLASSproperty,property,$$$cPROPparameter,"ENCODING")
				Set literaltype=$case($zcvt(encoding,"L"),"":"base64","base64":"base64","hex":"hex",:"")
				If literaltype="" {
					Set sc=$$$ERROR($$$XMLInvalidEncoding,encoding,property)
					Quit
				}
			} ElseIf membercat["LITERAL" {
				Set literaltype=$$$comMemberKeyGet(type,$$$cCLASSparameter,"JSONTYPE",$$$cPARAMdefault)
				If literaltype="" Set literaltype="string"
			
				// We need to differentiate between registered object strings and JSON strings.
				// For example between %String and %Timestamp.
				// A string is considered a registered object string if XSDTYPE, as well as JSONTYPE, is = "string".
				If literaltype="string",$$$comMemberKeyGet(type,$$$cCLASSparameter,"XSDTYPE",$$$cPARAMdefault)'="string" {
					Set literaltype="string/json"
				}
			}
			
			// Find actual class where property is defined.
			Set defClass=$$$comMemberKeyGet(class,$$$cCLASSproperty,property,$$$cPROPorigin)
			
			// Find if required
			Set required=$$$comMemberKeyGet(class,$$$cCLASSproperty,property,$$$cPROPrequired)

			// Get JSON field name. If not specified, then it defaults to the property name.
			Set jsonfieldname=$$$comMemberArrayGet(class,$$$cCLASSproperty,property,$$$cPROPparameter,"%JSONFIELDNAME")
			If jsonfieldname="" Set jsonfieldname=property

			// Get %JSONNULL property parameter.  Default is %JSONNULL class parameter.
			Set jsonnull=$$$comMemberArrayGet(class,$$$cCLASSproperty,property,$$$cPROPparameter,"%JSONNULL")
			Set jsonnull=$select(jsonnull="":jsondefaultnull,1:''jsonnull)

			// Get %JSONIGNORENULL property parameter.  Default is %JSONIGNORENULL class parameter.
			If literaltype="string" {
				Set jsonignorenull=$$$comMemberArrayGet(class,$$$cCLASSproperty,property,$$$cPROPparameter,"%JSONIGNORENULL")
				Set jsonignorenull=$select(jsonignorenull="":jsondefaultignorenull,1:''jsonignorenull)
			} Else {
				Set jsonignorenull=0
			}

			// Get %JSONREFERENCE property parameter.  Default is %JSONREFERENCE class parameter.
			If membercat["OBJ" {
				Set jsonreference=$zcvt($$$comMemberArrayGet(class,$$$cCLASSproperty,property,$$$cPROPparameter,"%JSONREFERENCE"),"U")
				If jsonreference="" Set jsonreference=jsondefaultreference
				Set jsonreference=$case(jsonreference,
										"OBJECT":$$$jsonrefobject,
										"ID":$$$jsonrefid,
										"OID":$$$jsonrefoid,
										"GUID":$$$jsonrefguid,
										:"")
				If jsonreference="" {
					Set sc=$$$ERROR($$$JSONInvalidPropertyParameter,"parameter %JSONREFERENCE",property,"class base")
					Quit
				}

				// Get JSON mapping for object references.
				Set jsonmapping=$$$comMemberArrayGet(class,$$$cCLASSproperty,property,$$$cPROPparameter,"%JSONMAPPING")
				If jsonmapping="" Set jsonmapping=jsondefaultmapping

			} Else {
				Set jsonreference=""
			}

			// Set the node
			Set node=$lb(property,$$$QN(property),jsoninclude,jsonfieldname,jsonnull,jsonignorenull,jsonreference,required,literaltype,membercat,type,jsonmapping)
			Set item=$increment(tempmap)
			Set tempmap(
			    +classSeq-classSeq(defClass)+1,
			    +$$$defMemberKeyGet(defClass,$$$cCLASSproperty,property,$$$cPROPsequencenumber),
			    item)=node
		}
	}
	
	// Copy nodes to map ordered by Sequence Number
	If $$$ISOK(sc) {
		Set mapping($c(1),0)=$lb(class,jsonignoreinvalidfield)

		Set mapping($c(1))=0
		Set cls=""
		For {
			Set cls=$order(tempmap(cls))
			If cls="" Quit
			Set prop=""
			For {
				Set prop=$order(tempmap(cls,prop))
				If prop="" Quit
				Set num=""
				For {
					Set num=$order(tempmap(cls,prop,num))
					If num="" Quit

					Set item=mapping($c(1))+1
					Set mapping($c(1))=item
					Set mapping($c(1),item)=tempmap(cls,prop,num)
				}
			}
		}
	}

	Quit sc
]]></Implementation>
</Method>

<Method name="GetMemberInfo">
<Description><![CDATA[
Return member type information about a property
<pre>
includeProperty is set if passed in as "" which means not specified
member cat is defined by
   <base cat> = "LITERAL" | "OBJPERSISTENT" | "OBJSERIAL" | "OBJREGISTERED" | "CSTREAM" | "BSTREAM"
   If RELATIONSHIP MANY|CHILDREN, then ListCollectionOBJPERSISTENT
   If List Of, then { ArrayCollection | ListCollection } <base cat>
   If %ListOf... or %ArrayOf... { ArrayCollection | ListCollection } <ELEMENTTYPE cat>
   Otherwis <base cat>
type is the type referenced by the property.]]></Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[class:%String,property:%String,&includeProperty:%Boolean,*type:%String,*membercat:%String]]></FormalSpec>
<Implementation><![CDATA[
	Set collection=$$$comMemberKeyGet(class,$$$cCLASSproperty,property,$$$cPROPcollection)
	Set relationship=$$$comMemberKeyGet(class,$$$cCLASSproperty,property,$$$cPROPrelationship)
	Set cardinality=$$$comMemberKeyGet(class,$$$cCLASSproperty,property,$$$cPROPcardinality)

	// Determine default property include if not already specified
	If includeProperty = "" {
		If $$$comMemberKeyGet(class,$$$cCLASSproperty,property,$$$cPROPmultidimensional) {
			Set includeProperty = 0
		} ElseIf $$$comMemberKeyGet(class,$$$cCLASSproperty,property,$$$cPROPprivate)||(property="%Concurrency") {
			Set includeProperty = 0
		} ElseIf relationship,cardinality'="children",cardinality'="many" {
			Set includeProperty = 0
		} Else {
			Set includeProperty = 1
		}
	}
	
	If includeProperty {
		Set type=$$$comMemberKeyGet(class,$$$cCLASSproperty,property,$$$cPROPtype)
		If type="" Set type="%Library.String"
		Set typecat=$$$getClassType(type)

		// Get member category for base type
		Set membercat=##class(%Compiler.XML.Generator.Adaptor).TypeToMembercat(type,typecat,.mixed)
	
		// If no membercat, then do not include property
		If membercat="" Set includeProperty=0
	}
		
	If includeProperty {
		// Modify membercat for collections
		If relationship {
			If (cardinality = "many") || (cardinality = "children") {
				// RELATIONSHIP MANY|CHILDREN = ListCollectionOBJPERSISTENT
				Set membercat = "ListCollection"_membercat
			}
		} Else {
			If collection="" {
				// Not a collection - LITERAL|OBJPERSISTENT|OBJSERIAL|OBJREGISTERED
				If (membercat'="LITERAL") {
					// Get list of super classes
					Kill typeSeq
					Do ##class(%Compiler.XML.Generator.Adaptor).SequenceClass(type,.typeSeq)
					// Check for collection
					If $data(typeSeq("%Library.ArrayOfDataTypes")) {
						Set membercat = "ArrayCollection"
					} ElseIf $data(typeSeq("%Library.ArrayOfObjects")) {
						Set membercat = "ArrayCollection"
					} ElseIf $data(typeSeq("%Library.ListOfDataTypes")) {
						Set membercat = "ListCollection"
					} ElseIf $data(typeSeq("%Library.ListOfObjects")) {
						Set membercat = "ListCollection"
					}
					If membercat["Collection" {
						Set type=$$$comMemberKeyGet(type,$$$cCLASSparameter,"ELEMENTTYPE",$$$cPARAMdefault)
						If membercat'["OBJ",type="" Set type="%Library.String"
						If type="" {
							Set sc=$$$ERROR($$$XMLNeedElementType,property)
							Quit
						}
						Set type=$$$NormalizeClassname(type)
						Set typecat=$$$getClassType(type)
						Set membercat=membercat_##class(%Compiler.XML.Generator.Adaptor).TypeToMembercat(type,typecat,.mixed)
					}
				}
			} Else {
				if collection = $$$cPROPCOLLECTIONLIST {
					// LIST COLLECTION and LITERAL     = ListCollectionLITERAL
					// LIST COLLECTION and otherwise   = ListCollectionOBJ
					Set membercat="ListCollection"_membercat
				} ElseIf collection = $$$cPROPCOLLECTIONARRAY {
					// ARRAY and LITERAL               = ArrayCollectionLITERAL
					// ARRAY and otherwise             = ArrayCollectionOBJ
					Set membercat="ArrayCollection"_membercat
				}
			}
		}
	}
]]></Implementation>
</Method>

<Method name="LeftSequenceClass">
<Description>
Return all super classes in sequence of left to right with super class immediately following its child.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[class:%String,&seqArray]]></FormalSpec>
<Implementation><![CDATA[
	If '$data(seqArray(class)) Set seqArray(class)=$increment(seqArray)
	Set superList=$$$comClassKeyGet(class,$$$cCLASSsuper)
	Set len=$length(superList,",")
	For i=len:-1:1 {
		Set super=$piece(superList,",",i)
		If super'="" {
			Do ..LeftSequenceClass(super,.seqArray)
		}
	}
	Quit
]]></Implementation>
</Method>

<Method name="GenerateMappingFromXdata">
<Description>
Get the JSON adaptor configuration information  from class and property parameters.</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[class:%String,&mapping]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set compiledclass=##class(%Dictionary.CompiledClass).%OpenId(class,,.sc)
	If $$$ISERR(sc) Quit sc

	Set count=compiledclass.XDatas.Count()

	For i=1:1:count {
		Set xdata=compiledclass.XDatas.GetAt(i)
		Set configName=xdata.Name
		If configName="" Continue
		
		#dim reader As %XML.Reader=##class(%XML.Reader).%New()
		Set reader.KeepWhitespace=0
		Set sc=reader.OpenStream(xdata.Data)
		If $$$ISERR(sc) Quit
	
		#dim document As %XML.Document=reader.Document
		#dim node As %XML.Node=document.GetDocumentElement()
	
		If node="" Continue
		If node.LocalName'="Mapping" Continue
		If node.Namespace'="http://www.intersystems.com/jsonmapping" {
			Set sc=$$$ERROR($$$JSONUnexpectedNamespace,node.QName,$$$mappingNameDisplay(configName))
			Quit
		}
		
		Do reader.CorrelateRoot("%JSON.Mapping")
		
		If 'reader.Next(.obj,.sc) Quit
		
		If reader.Next(.dummy) {
			Set sc=$$$ERROR($$$JSONExtraMapping,$$$mappingNameDisplay(configName))
			Quit
		}
		
		Set sc=..GenerateMappingFromClass(class,configName,obj,.mapping)
		If $$$ISERR(sc) Quit
	}

	Quit sc
]]></Implementation>
</Method>

<Method name="GenerateMappingFromClass">
<Description>
Generate mapping based on imported configuration info from Xdata block</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[class:%String,name:%String,obj:%JSON.Mapping,&mapping]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	kill mapping(name)

	// Get %JSONIGNOREINVALIDFIELD parameter
	Set jsonignoreinvalidfield=obj.IgnoreInvalidField
	
	// Get %JSONMAPPING class parameter.
	Set jsondefaultmapping=obj.Mapping

	// Get default for %JSONNULL
	Set jsondefaultnull=''obj.Null

	// Get default for %JSONIGNORENULL
	Set jsondefaultignorenull=''obj.IgnoreNull
 
	// Get default for %JSONREFERENCE
	Set jsondefaultreference=$zcvt(obj.Reference,"U")
	If jsondefaultreference="" Set jsondefaultreference="OBJECT"
	If $case(jsondefaultreference,"OBJECT":0,"ID":0,"OID":0,"GUID":0,:1) {
		Quit $$$ERROR($$$JSONInvalidDefaultParameter,"attribute reference",$$$mappingNameDisplay(name))
	}

	// Save mappng parameterd for entire class
	Set mapping(name,0)=$lb(class,jsonignoreinvalidfield)

	// Create map node for each property
	#dim property As %JSON.MappingProperty
	Set sc=$$$OK
	For i=1:1:obj.propertyList.Count() {
		Set property=obj.propertyList.GetAt(i)
		If property="" {
			Set sc=$$$ERROR($$$JSONNoPropertyName,$$$mappingNameDisplay(name))
			Quit
		}

		Set propertyName=property.Name
		If '$$$comMemberDefined(class,$$$cCLASSproperty,propertyName) {
			Set sc=$$$ERROR($$$JSONUnexpectedPropertyName,propertyName,$$$mappingNameDisplay(name))
			Quit
		}

		// Get %JSONINCLUDE property parameter
		Set jsoninclude=$zcvt(property.Include,"L")
		Set includeProperty=$case(jsoninclude,"":"","inout":1,"inputonly":1,"outputonly":1,"none":1,:-1)
		If includeProperty=-1 {
			Set sc=$$$ERROR($$$JSONInvalidPropertyParameter,"attribute Include",property,$$$mappingNameDisplay(name))
			Quit
		}
		
		// Get details of the property's type
		Do ..GetMemberInfo(class,propertyName,.includeProperty,.type,.membercat)
		
		If includeProperty {
			// Default for %JSONINCLUDE is "inout"
			If jsoninclude="" Set jsoninclude="inout"
	
			// Do not support array of streams
			If membercat["STREAM",membercat["Array" {
				Set sc=$$$ERROR($$$JSONNoStreamArray,property,$$$mappingNameDisplay(name))
				Quit
			}
			
			// For string types, set literaltype to string, base64 or hex.
			Set literaltype=""
			If membercat["CSTREAM" {
				Set literaltype="string"
			} ElseIf membercat["BSTREAM" {
				Set encoding=$$$comMemberArrayGet(class,$$$cCLASSproperty,propertyName,$$$cPROPparameter,"ENCODING")
				Set literaltype=$case($zcvt(encoding,"L"),"":"base64","base64":"base64","hex":"hex",:"")
				If literaltype="" {
					Set sc=$$$ERROR($$$XMLInvalidEncoding,encoding,property)
					Quit
				}
			} ElseIf membercat["LITERAL" {
				Set literaltype=$$$comMemberKeyGet(type,$$$cCLASSparameter,"JSONTYPE",$$$cPARAMdefault)
				If literaltype="" Set literaltype="string"
			
				// We need to differentiate between registered object strings and JSON strings.
				// For example between %String and %Timestamp.
				// A string is considered a registered object string if XSDTYPE, as well as JSONTYPE, is = "string".
				If literaltype="string",$$$comMemberKeyGet(type,$$$cCLASSparameter,"XSDTYPE",$$$cPARAMdefault)'="string" {
					Set literaltype="string/json"
				}
			}
			
			// Find if required
			Set required=$$$comMemberKeyGet(class,$$$cCLASSproperty,propertyName,$$$cPROPrequired)

			// Get JSON field name. If not specified, then it defaults to the property name.
			Set jsonfieldname=property.FieldName
			If jsonfieldname="" Set jsonfieldname=propertyName

			// Get %JSONNULL property parameter.  Default is %JSONNULL class parameter.
			Set jsonnull=property.Null
			Set jsonnull=$select(jsonnull="":jsondefaultnull,1:''jsonnull)

			// Get %JSONIGNORENULL property parameter.  Default is %JSONIGNORENULL class parameter.
			If literaltype="string" {
				Set jsonignorenull=property.IgnoreNull
				Set jsonignorenull=$select(jsonignorenull="":jsondefaultignorenull,1:''jsonignorenull)
			} Else {
				Set jsonignorenull=0
			}

			// Get %JSONREFERENCE property parameter.  Default is %JSONREFERENCE class parameter.
			If membercat["OBJ" {
				Set jsonreference=$zcvt(property.Reference,"U")
				If jsonreference="" Set jsonreference=jsondefaultreference
				Set jsonreference=$case(jsonreference,
										"OBJECT":$$$jsonrefobject,
										"ID":$$$jsonrefid,
										"OID":$$$jsonrefoid,
										"GUID":$$$jsonrefguid,
										:"")
				If jsonreference="" {
					Set sc=$$$ERROR($$$JSONInvalidPropertyParameter,"attribute Reference",property)
					Quit
				}

				// Get JSON mapping for object references.
				Set jsonmapping=property.Mapping
				If jsonmapping="" Set jsonmapping=jsondefaultmapping

			} Else {
				Set jsonreference=""
			}

			// Set the node
			Set mapping(name,$increment(mapping(name)))=
			   $lb(propertyName,$$$QN(propertyName),jsoninclude,jsonfieldname,jsonnull,jsonignorenull,jsonreference,required,literaltype,membercat,type,jsonmapping)
		}
	}

	Quit sc
]]></Implementation>
</Method>

<Method name="%JSONGenerate">
<Description>
%JSONGenerate creates thee metadata structure and generates the code for all methods.</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec>%mode,%class,%property,%method,%parameter,%codemode,%code,%classmodify,%context</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set %code=0
	If '$$$comMemberKeyGet(%class,$$$cCLASSparameter,"%JSONENABLED",$$$cPARAMdefault) Quit $$$OK

	Set abstract=$$$comClassKeyGet(%class,$$$cCLASSabstract)
	Set sc=$$$OK

	Set sc=..GenerateMapping(%class,.mapping)
	If $$$ISERR(sc) Quit sc

	Set sc=..GenerateMappingFromXdata(%class,.mapping)
	If $$$ISERR(sc) Quit sc

	// Create the map from class properties
	If 'abstract {
		If $$$ISOK(sc) {
			Set sc=..GenerateAllImportInternal(%class,.mapping)
		}

		If $$$ISOK(sc) {
			Set sc=..GenerateAllExportInternal(%class,.mapping,1)
		}

		If $$$ISOK(sc) {
			Set sc=..GenerateAllExportInternal(%class,.mapping,0)
		}
	}

	Quit sc
]]></Implementation>
</Method>

<Method name="JSONImportInternal">
<Description>
Get the code for the %JSONImportInternal method to actually do the method generation</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec>%mode,%class,%property,%method,%parameter,%codemode,%code,%classmodify,%context</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set %code=0
	If $$$comMemberKeyGet(%class,$$$cCLASSparameter,"%JSONENABLED",$$$cPARAMdefault) {
		Merge %code=$$$tEXTcode("%JSONImportInternal")
	}
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="JSONExportInternal">
<Description>
Get the code for the %JSONExportInternal method to actually do the method generation</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec>%mode,%class,%property,%method,%parameter,%codemode,%code,%classmodify,%context</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set %code=0
	If $$$comMemberKeyGet(%class,$$$cCLASSparameter,"%JSONENABLED",$$$cPARAMdefault) {
		Merge %code=$$$tEXTcode("%JSONExportInternal")
	}
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="JSONExportToStringInternal">
<Description>
Get the code for the %JSONExportToStringInternal method to actually do the method generation</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec>%mode,%class,%property,%method,%parameter,%codemode,%code,%classmodify,%context</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set %code=0
	If $$$comMemberKeyGet(%class,$$$cCLASSparameter,"%JSONENABLED",$$$cPARAMdefault) {
		Merge %code=$$$tEXTcode("%JSONExportToStringInternal")
	}
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="JSONNew">
<ClassMethod>1</ClassMethod>
<FormalSpec>%mode,%class,%property,%method,%parameter,%codemode,%code,%classmodify,%context</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set %code=0
	If $$$comMemberKeyGet(%class,$$$cCLASSparameter,"%JSONENABLED",$$$cPARAMdefault) {
		$$$GENERATE("  Quit ##class("_%class_").%New()")
	}
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="GenerateAllImportInternal">
<Description>
Generate the code for the %JSONImportInternal method</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[class:%String,&mapping:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	New %code
	Set %code=0
	Set sc=$$$OK
	
	Try {
		$$$GENERATE("  Set sc=$$$OK")
		Set needTestInvalidField=0
		Set needRequired=0
		
		// Process all mappings except base
		Set indent=""
		Set mappingName=$c(1)
		Set count=0
		For {
			Set mappingName=$order(mapping(mappingName))
			If mappingName="" Quit
			$$$GENERATE("  "_$select(count=0:"If",1:"} ElseIf")_" %mappingName="""_mappingName_""" {")
			Set count=count+1
			Set indent="  "
			Set sc=..GenerateImportInternal(class,indent,mappingName,.mapping,.needRequired,.needTestInvalidField)
			If $$$ISERR(sc) Quit
		}
		If $$$ISERR(sc) Quit

		// Add in base mapping.
		If count>0 $$$GENERATE("  } Else {")
		Set sc=..GenerateImportInternal(class,indent,$c(1),.mapping,.needRequired,.needTestInvalidField)
		If $$$ISERR(sc) Quit
		If count>0 $$$GENERATE("  }")
		
		// Generate code to check for invalid field
		If needTestInvalidField {
			$$$GENERATE("  If $get(testInvalidField) {")
			$$$GENERATE("    Set invalid=0,iterator=%JSONObject.%GetIterator()")
			$$$GENERATE("    While iterator.%GetNext(.key,.value) { If $data(proplist(key))=0 Set invalid=1 Quit  }")
			$$$GENERATE("    If invalid Quit $$$ERROR($$$JSONImportBadField,key,$$$mappingNameDisplay(%mappingName))")
			$$$GENERATE("  }")
		}

		$$$GENERATE("%JSONImportExit Quit sc")
		$$$GENERATE("%JSONImportError Quit $$$ERROR($$$JSONImportError,field,$$$mappingNameDisplay(%mappingName))")
		If needRequired $$$GENERATE("%JSONImportRequired Quit $$$ERROR($$$JSONImportRequired,field,$$$mappingNameDisplay(%mappingName))")

		// Save the code for this method
		Merge $$$tEXTcode("%JSONImportInternal")=%code

	} Catch ex {
		Set sc=ex.AsStatus()
	}

	Quit sc
]]></Implementation>
</Method>

<Method name="GenerateImportInternal">
<Description>
Generate the code for the %JSONImportInternal method for the specified mappingName.</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[class:%String,indent:%String,mappingName:%String,&mapping:%String,&needRequired:%Boolean,&needTestInvalidField:%Boolean]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set sc=$$$OK
	Set ignoreInvalidField=$$$jsonignoreinvalidfield(mapping,mappingName)
	If 'ignoreInvalidField {
		Set needTestInvalidField=1
		$$$GENERATE(indent_"  Set testInvalidField=1")
	}

	For index=1:1:$$$jsonpropertycount(mapping,mappingName) {
		Set propertyMap=$$$jsongetprop(mapping,mappingName,index)
		Set fieldname=$replace($$$jsonfieldname(propertyMap),"""","""""")
		
		// Code to indicate property seen
		If 'ignoreInvalidField {
			$$$GENERATE(indent_"  Set proplist("""_fieldname_""")=""""")
		}
		
		// Skip processing for outputonly and none values of JSONINCLUDE.
		If $$$jsoninclude(propertyMap)'["in" Continue
		
		// Code to test if field is present
		$$$GENERATE(indent_"  Set field="""_fieldname_""" Set jsontype=$$$JSONGetTypeOf(%JSONObject,field)")
		$$$GENERATE(indent_"  If jsontype'=""unassigned"" {")
		$$$GENERATE(indent_"    If (jsontype=""string"")&&(%JSONObject.%Get(field)="""") Set jsontype=""null""")
		$$$GENERATE(indent_"    If jsontype=""null"" {")
		// null value does not satisfy field required.
		If $$$jsonrequired(propertyMap) {
			$$$GENERATE(indent_"      Goto %JSONImportRequired")
		} Else {
			$$$GENERATE(indent_"      Set .."_$$$jsonpropertyQN(propertyMap)_"=""""")
		}
		$$$GENERATE(indent_"    } Else {")

		// Generate code to import this property.
		Set membercat=$$$jsonmembercat(propertyMap)
		If membercat["Collection" {
			// Generate code to import collections
			If membercat["List" {
				// Generate code to import lists
				Do ..GenImportList(class,propertyMap,indent_"    ")
			} Else {
				// Generate code to import arrays
				Do ..GenImportArray(class,propertyMap,indent_"    ")
			}
			
		} Else {
			// Generate code to import this non-collection field
			Do ..GenImportField(class,propertyMap,indent_"    ",0)
		}

		// Handle checking for field required.
		If $$$jsonrequired(propertyMap) {
			$$$GENERATE(indent_"  } Else { Goto %JSONImportRequired }")
			Set needRequired=1
		} Else {
			$$$GENERATE(indent_"  }")
		}
	}
		
	Quit sc
]]></Implementation>
</Method>

<Method name="GenImportList">
<Description>
Generate code for importing a JSON array as a List collection.</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec>class:%String,propertyMap:%List,indent:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	// If present, then must be the expected JSON array type
	$$$GENERATE(indent_"  If jsontype'=""array"" Goto %JSONImportError")
	$$$GENERATE(indent_"  Set data=%JSONObject."_$$$QN($$$jsonfieldname(propertyMap)))
	// Get each element of the array.
	$$$GENERATE(indent_"  For index=0:1:data.%Size()-1 {")
	// Get the field value
	$$$GENERATE(indent_"    Set jsontype=$$$JSONGetTypeOf(data,index)")
	$$$GENERATE(indent_"    If jsontype=""null"" {")
	$$$GENERATE(indent_"      Do .."_$$$jsonpropertyQN(propertyMap)_".Insert("""")")
	$$$GENERATE(indent_"    } Else {")
	$$$GENERATE(indent_"      Set value=data.%Get(index)")
	// Generate code to import list element
	Do ..GenImportField(class,propertyMap,indent_"    ",$$$isCollectionList)
	$$$GENERATE(indent_"  }}")
]]></Implementation>
</Method>

<Method name="GenImportArray">
<Description>
Generate code for importing an array value from JSON object of the form {"key":value,...}</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec>class:%String,propertyMap:%List,indent:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	// If present, then must be the expected JSON object type
	$$$GENERATE(indent_"  If jsontype'=""object"" Goto %JSONImportError")
	$$$GENERATE(indent_"  Set data=%JSONObject."_$$$QN($$$jsonfieldname(propertyMap)))
	$$$GENERATE(indent_"  Set iterator=data.%GetIterator()")
	$$$GENERATE(indent_"  While iterator.%GetNext(.index,.value) {")
	$$$GENERATE(indent_"    Set jsontype=$$$JSONGetTypeOf(data,index)")
	$$$GENERATE(indent_"    If jsontype=""null"" {")
	$$$GENERATE(indent_"      Do .."_$$$jsonpropertyQN(propertyMap)_".SetAt("""",index)")
	$$$GENERATE(indent_"    } Else {")
	Do ..GenImportField(class,propertyMap,indent_"    ",$$$isCollectionArray)
	$$$GENERATE(indent_"  }}")
]]></Implementation>
</Method>

<Method name="GenImportField">
<Description>
Generate code for importing a single field value.</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec>class:%String,propertyMap:%List,indent:%String,isCollectionValue:%Integer</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	// Generate code to import this property.
	Set membercat=$$$jsonmembercat(propertyMap)
	If membercat["OBJ" {
		Set reference=$$$jsonreference(propertyMap)
		If reference=$$$jsonrefid {
			// Generate code to import object ID.
			Do ..GenImportID(class,propertyMap,indent,isCollectionValue)
		} ElseIf reference=$$$jsonrefoid {
			// Generate code to import object OID.
			Do ..GenImportOID(class,propertyMap,indent,isCollectionValue)
		} ElseIf reference=$$$jsonrefguid {
			// Generate code to import object GUID.
			Do ..GenImportGUID(class,propertyMap,indent,isCollectionValue)
		} Else {
			// Generate code to import object references.
			Do ..GenImportObject(class,propertyMap,indent,isCollectionValue)
		}

	} ElseIf membercat["STREAM" {
		// Input stream
		If membercat="BSTREAM" {
			// Generate code to import binary stream
			Do ..GenImportBinaryStream(class,propertyMap,indent,isCollectionValue)
		} Else {
			// Generate code to import character stream
			Do ..GenImportCharacterStream(class,propertyMap,indent,isCollectionValue)
		}

	} Else {
		// Generate code to import literals
		Do ..GenImportLiteral(class,propertyMap,indent,isCollectionValue)
	}

	$$$GENERATE(indent_"}")
]]></Implementation>
</Method>

<Method name="GenImportID">
<Description>
Generate code for importing an object ID and storing the object reference in variable named data.</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec>class:%String,propertyMap:%List,indent:%String,isCollectionValue:%Integer</FormalSpec>
<Implementation><![CDATA[
	// If present, then must be the expected JSON type
	$$$GENERATE(indent_"  If jsontype'=""string"",jsontype'=""number"" Goto %JSONImportError")
	// Get the field value
	If isCollectionValue {
		Set indexarg=$select(isCollectionValue=$$$isCollectionList:"index+1",1:"index")
		$$$GENERATE(indent_"  Do .."_$$$jsonpropertyQN(propertyMap)_".SetObjectIdAt(value,"_indexarg_")")
	} Else {
		$$$GENERATE(indent_"  Do .."_$$$QN($$$jsonproperty(propertyMap)_"SetObjectId")_"(%JSONObject."_$$$QN($$$jsonfieldname(propertyMap))_")")
	}
]]></Implementation>
</Method>

<Method name="GenImportOID">
<Description>
Generate code for importing an object OID and storing the object reference in variable named data.</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec>class:%String,propertyMap:%List,indent:%String,isCollectionValue:%Integer</FormalSpec>
<Implementation><![CDATA[
	// If present, then must be the expected JSON type
	$$$GENERATE(indent_"  If jsontype'=""string"" Goto %JSONImportError")
	// Get the field value
	Set var=$select(isCollectionValue:"value",1:"data")
	Set exp="$lb($piece("_var_","","",2,*),$piece("_var_","","",1))"
	If isCollectionValue {
		Set indexarg=$select(isCollectionValue=$$$isCollectionList:"index+1",1:"index")
		$$$GENERATE(indent_"  Do .."_$$$jsonpropertyQN(propertyMap)_".SetObjectAt("_exp_","_indexarg_")")
	} Else {
		$$$GENERATE(indent_"  Set data=%JSONObject."_$$$QN($$$jsonfieldname(propertyMap)))
		$$$GENERATE(indent_"  Do .."_$$$QN($$$jsonproperty(propertyMap)_"SetObject")_"("_exp_")")
	}
]]></Implementation>
</Method>

<Method name="GenImportGUID">
<Description>
Generate code for importing an object GUID and storing the object reference in variable named data.</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec>class:%String,propertyMap:%List,indent:%String,isCollectionValue:%Integer</FormalSpec>
<Implementation><![CDATA[
	// If present, then must be the expected JSON type
	$$$GENERATE(indent_"  If jsontype'=""string"" Goto %JSONImportError")
	// Get the field value
	If isCollectionValue {
		Set indexarg=$select(isCollectionValue=$$$isCollectionList:"index+1",1:"index")
		$$$GENERATE(indent_"  Do .."_$$$jsonpropertyQN(propertyMap)_".SetObjectAt(##class(%Library.GUID).%GUIDFind(value),"_indexarg_")")
	} Else {
		$$$GENERATE(indent_"  Do .."_$$$QN($$$jsonproperty(propertyMap)_"SetObject")_"(##class(%Library.GUID).%GUIDFind(%JSONObject."_$$$QN($$$jsonfieldname(propertyMap))_"))")
	}
]]></Implementation>
</Method>

<Method name="GenImportObject">
<Description>
Generate code for importing a referenced object and storing in variable named data.</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec>class:%String,propertyMap:%List,indent:%String,isCollectionValue:%Integer</FormalSpec>
<Implementation><![CDATA[
	Set mappingName=$$$jsonmapping(propertyMap)
	// If present, then must be the expected JSON type
	$$$GENERATE(indent_"  If jsontype=""object"" {")
	// Get a new empty object
	$$$GENERATE(indent_"    Set newobj=##class("_$$$jsontype(propertyMap)_").%JSONNew(%JSONObject,$this)")
	// Get the field value
	$$$GENERATE(indent_"    Set saveJSON=%JSONObject")
	If mappingName'="" {
		$$$GENERATE(indent_"    Set saveMapping=%mappingName,%mappingName="""_mappingName_"""")
	}
	$$$GENERATE(indent_"    Set %JSONObject="_$select(isCollectionValue:"value",1:"%JSONObject."_$$$QN($$$jsonfieldname(propertyMap))))
	// Call adapter for referenced object.
	$$$GENERATE(indent_"    Set sc=newobj.%JSONImportInternal()")
	$$$GENERATE(indent_"    Set %JSONObject=saveJSON")
	If mappingName'="" {
		$$$GENERATE(indent_"    Set %mappingName=saveMapping")
	}
	$$$GENERATE(indent_"    If $$$ISERR(sc) Goto %JSONImportExit")
	If isCollectionValue=$$$isCollectionList {
		// Generate code to save value in list
		$$$GENERATE(indent_"    Do .."_$$$jsonpropertyQN(propertyMap)_".Insert(newobj)")
	} ElseIf isCollectionValue=$$$isCollectionArray {
		// Generate code to save value in array
		$$$GENERATE(indent_"    Do .."_$$$jsonpropertyQN(propertyMap)_".SetAt(newobj,index)")
	} Else {
		// Code to store the property value
		$$$GENERATE(indent_"    Set .."_$$$jsonpropertyQN(propertyMap)_"=newobj")
	}
	$$$GENERATE(indent_"  } ElseIf jsontype=""oref"" {")
	If isCollectionValue=$$$isCollectionList {
		// Generate code to save value in list
		$$$GENERATE(indent_"    Do .."_$$$jsonpropertyQN(propertyMap)_".Insert(value)")
	} ElseIf isCollectionValue=$$$isCollectionArray {
		// Generate code to save value in array
		$$$GENERATE(indent_"    Do .."_$$$jsonpropertyQN(propertyMap)_".SetAt(value,index)")
	} Else {
		// Code to store the property value
		$$$GENERATE(indent_"    Set .."_$$$jsonpropertyQN(propertyMap)_"=%JSONObject."_$$$QN($$$jsonfieldname(propertyMap)))
	}
	$$$GENERATE(indent_"  } Else { Goto %JSONImportError }")
]]></Implementation>
</Method>

<Method name="GenImportBinaryStream">
<Description>
Generate code for getting the field value from a binary stream and storing in variable named data.</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec>class:%String,propertyMap:%List,indent:%String,isCollectionValue:%Integer</FormalSpec>
<Implementation><![CDATA[
	Set property=$$$jsonproperty(propertyMap)
	
	// If present, then must be the expected JSON type
	$$$GENERATE(indent_"  If jsontype'=""string"" Goto %JSONImportError")
	// Get the field value
	If isCollectionValue {
		// Code for new stream to insert
		Set indexarg=$select(isCollectionValue=$$$isCollectionList:"index+1",1:"index")
		$$$GENERATE(indent_"  Set stream=..##class("_$$$jsontype(propertyMap)_").%New()")
		If $$$jsonliteraltype(propertyMap)["hex" {
			$$$GENERATE(indent_"  For i=1:16:$length(value)-15 { Set bin=bin_$re($zqc($zhex($e(value,i,i+15)))) }")
			$$$GENERATE(indent_"  For i=i+16:2:$length(value)-1 { Set bin=bin_$char($zhex($extract(value,i,i+1))) }")
			$$$GENERATE(indent_"  Set sc=stream.Write(value) If $$$ISERR(sc) Goto %JSONImportExit")
		} Else {
			$$$GENERATE(indent_"  Set sc=stream.Write($system.Encryption.Base64Decode(value)) If $$$ISERR(sc) Goto %JSONImportExit")
		}
		If isCollectionValue=$$$isCollectionList {
			// Generate code to save value in list
			$$$GENERATE(indent_"  Do .."_$$$jsonpropertyQN(propertyMap)_".Insert(stream)")
		} Else {
			// Generate code to save value in array
			$$$GENERATE(indent_"  Do .."_$$$jsonpropertyQN(propertyMap)_".SetAt(stream,index)")
		}
	} Else {
		// Code to use property stream
		$$$GENERATE(indent_"  Set tStream = %JSONObject.%Get("""_$$$jsonfieldname(propertyMap)_""",,""stream"")")
		$$$GENERATE(indent_"  Set stream=.."_$$$jsonpropertyQN(propertyMap)_" Do stream.Rewind()")
		$$$GENERATE(indent_"  If tStream.Size>0 { While 'tStream.AtEnd {")
		If $$$jsonliteraltype(propertyMap)["hex" {
			$$$GENERATE(indent_"  Set value=tStream.Read(32000),bin=""""")
			$$$GENERATE(indent_"  For i=1:16:$length(value)-15 { Set bin=bin_$re($zqc($zhex($e(value,i,i+15)))) }")
			$$$GENERATE(indent_"  For i=i+16:2:$length(value)-1 { Set bin=bin_$char($zhex($extract(value,i,i+1))) }")
			$$$GENERATE(indent_"  Set sc=stream.Write(bin) If $$$ISERR(sc) Goto %JSONImportExit")
		} Else {
			$$$GENERATE(indent_"    Set rc=stream.Write($system.Encryption.Base64Decode(tStream.Read(43540,.sc))) Set:$$$ISERR(rc) sc=$$$ADDSC(sc,rc) If $$$ISERR(sc) Goto %JSONImportExit")
		}
		$$$GENERATE(indent_"  }}")
		$$$GENERATE(indent_"  Set %JSONObject."_$$$QN($$$jsonfieldname(propertyMap))_" = """"")
		$$$GENERATE(indent_"  Do %JSONObject.%Remove("""_$$$jsonfieldname(propertyMap)_""")")
	}
]]></Implementation>
</Method>

<Method name="GenImportCharacterStream">
<Description>
Generate code for getting the field value from a character stream and storing in variable named data.</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec>class:%String,propertyMap:%List,indent:%String,isCollectionValue:%Integer</FormalSpec>
<Implementation><![CDATA[
	Set property=$$$jsonproperty(propertyMap)
	
	// If present, then must be the expected JSON type
	$$$GENERATE(indent_"  If jsontype'=""string"" Goto %JSONImportError")
	// Get the field value
	If isCollectionValue {
		// Code for new stream to insert
		Set indexarg=$select(isCollectionValue=$$$isCollectionList:"index+1",1:"index")
		$$$GENERATE(indent_"  Set stream=..##class("_$$$jsontype(propertyMap)_").%New()")
		$$$GENERATE(indent_"  Set sc=stream.Write(value) If $$$ISERR(sc) Goto %JSONImportExit")
		If isCollectionValue=$$$isCollectionList {
			// Generate code to save value in list
			$$$GENERATE(indent_"  Do .."_$$$jsonpropertyQN(propertyMap)_".Insert(stream)")
		} Else {
			// Generate code to save value in array
			$$$GENERATE(indent_"  Do .."_$$$jsonpropertyQN(propertyMap)_".SetAt(stream,index)")
		}
	} Else {
		// Code to use property stream
    $$$GENERATE(indent_"  Set tStream = %JSONObject.%Get("""_$$$jsonfieldname(propertyMap)_""",,""stream"")")
		$$$GENERATE(indent_"  Set stream=.."_$$$jsonpropertyQN(propertyMap)_" Do stream.Rewind()")
    $$$GENERATE(indent_"  If tStream.Size>0 { ")
		$$$GENERATE(indent_"    Set sc=stream.CopyFrom(tStream) If $$$ISERR(sc) Goto %JSONImportExit")
    $$$GENERATE(indent_"  }")
    $$$GENERATE(indent_"  Set %JSONObject."_$$$QN($$$jsonfieldname(propertyMap))_" = """"")
    $$$GENERATE(indent_"  Do %JSONObject.%Remove("""_$$$jsonfieldname(propertyMap)_""")")
	}
]]></Implementation>
</Method>

<Method name="GenImportLiteral">
<Description>
Generate code for getting the field value and storing in variable named data.</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec>class:%String,propertyMap:%List,indent:%String,isCollectionValue:%Integer</FormalSpec>
<Implementation><![CDATA[
	Set property=$$$jsonproperty(propertyMap)
	Set type=$$$jsontype(propertyMap)
	Set literaltype=$$$jsonliteraltype(propertyMap)
	
	// If present, then must be the expected JSON type
	If literaltype="double" {
		$$$GENERATE(indent_"  If jsontype'=""number"",jsontype'=""string"" Goto %JSONImportError")
	} Else {
		$$$GENERATE(indent_"  If jsontype'="""_$piece(literaltype,"/",1)_""" Goto %JSONImportError")
	}
	// Get the field value
	If isCollectionValue {
		Set var="value"
	} Else {
		Set var="data"
	}
	
	Set useProperty='isCollectionValue
	If literaltype'="boolean" { // boolean JSON values need nop additional processing.
		// Get information about data type class
		Do ##class(%Compiler.XML.Generator.Adaptor).getPropertyParameters(class,property,.parms)
		Set haveJSONToLogical=##class(%Compiler.XML.Generator.Adaptor).getSingleLine(class,property,type,"JSONToLogical",.parms,var,.codeJSONToLogical)
		// Try to use XSDToLogical if JSONToLogical is not specified.  
		// The point is to avoid extra property mnethods being geenrated.
		If 'haveJSONToLogical {
			Set haveJSONToLogical=##class(%Compiler.XML.Generator.Adaptor).getSingleLine(class,property,type,"XSDToLogical",.parms,var,.codeJSONToLogical)
		}
		Set haveIsValid=##class(%Compiler.XML.Generator.Adaptor).getSingleLine(class,property,type,"IsValid",.parms,var,.codeIsValid)
		
		// Call datatype methods
		Set line=""
		If haveJSONToLogical {
			Set line=line_" Set "_var_"="_codeJSONToLogical_" Goto:"_var_"="""" %JSONImportError"
		}
		If haveIsValid {
			Set line=line_" If $$$ISERR("_codeIsValid_") Goto %JSONImportError"
		}
		If line'="" {
			If useProperty {
				Set useProperty=0
				$$$GENERATE(indent_"  Set data=%JSONObject."_$$$QN($$$jsonfieldname(propertyMap)))
			}
			$$$GENERATE(indent_" "_line)
		}
		// Handle the ignorenull case
		If literaltype="string",'$$$jsonignorenull(propertyMap) {
			If useProperty {
				Set useProperty=0
				$$$GENERATE(indent_"  Set data=%JSONObject."_$$$QN($$$jsonfieldname(propertyMap)))
			}
			$$$GENERATE(indent_"  If "_var_"="""" Set "_var_"=$c(0)")
		}
	}
	If isCollectionValue=$$$isCollectionList {
		// Generate code to save value in list
		$$$GENERATE(indent_"  Do .."_$$$jsonpropertyQN(propertyMap)_".Insert("_var_")")
	} ElseIf isCollectionValue=$$$isCollectionArray {
		// Generate code to save value in array
		$$$GENERATE(indent_"  Do .."_$$$jsonpropertyQN(propertyMap)_".SetAt("_var_",index)")
	} Else {
		// Code to store the property value
		If useProperty Set var="%JSONObject."_$$$QN($$$jsonfieldname(propertyMap))
		$$$GENERATE(indent_"  Set .."_$$$jsonpropertyQN(propertyMap)_"="_var)
	}
]]></Implementation>
</Method>

<Method name="GenerateAllExportInternal">
<Description>
Generate the code for the %JSONExportInternal method</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[class:%String,&mapping:%String,useWrite:%Boolean]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	New %code,%outputCode,%exitCode,%objectCode
	Set %code=0
	Set sc=$$$OK
	
	Try {
		// Setup the output code for write or string concatenation.
		If useWrite {
			Set %outputCode="Write "
			Set %exitCode="%JSONExportExit"
			Set %objectCode="%JSONExportInternal"
		} Else {
			Set %outputCode="Set %export=%export_"
			Set %exitCode="%JSONExportExitToString"
			Set %objectCode="%JSONExportToStringInternal"
		}
		
		// Begin output of code
		$$$GENERATE("  Set sc=$$$OK")
		$$$GENERATE("  "_%outputCode_"""{"" Set sep=""""")
		
		// Process all mappings except base
		Set indent=""
		Set mappingName=$c(1)
		Set count=0
		For {
			Set mappingName=$order(mapping(mappingName))
			If mappingName="" Quit
			$$$GENERATE("  "_$select(count=0:"If",1:"} ElseIf")_" %mappingName="""_mappingName_""" {")
			Set count=count+1
			Set indent="  "
			Set sc=..GenerateExportInternal(class,indent,mappingName,.mapping)
			If $$$ISERR(sc) Quit
		}
		If $$$ISERR(sc) Quit

		// Add in base mapping.
		If count>0 $$$GENERATE("  } Else {")
		Set sc=..GenerateExportInternal(class,indent,$c(1),.mapping)
		If $$$ISERR(sc) Quit
		If count>0 $$$GENERATE("  }")
		
    	$$$GENERATE("  "_%outputCode_"""}""")
		$$$GENERATE(%exitCode_" Quit sc")

		// Save the code for this method
		Merge $$$tEXTcode("%JSONExport"_$select(useWrite:"",1:"ToString")_"Internal")=%code

	} Catch ex {
		Set sc=ex.AsStatus()
	}

	Quit sc
]]></Implementation>
</Method>

<Method name="GenerateExportInternal">
<Description>
Generate the code for the specified mapping of %JSONExportInternal method</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[class:%String,indent:%String,mappingName:%String,&mapping:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set sc=$$$OK
	
	// Loop over all properties
	For index=1:1:$$$jsonpropertycount(mapping,mappingName) {
		Set propertyMap=$$$jsongetprop(mapping,mappingName,index)
		Set fieldname=$$$jsonfieldname(propertyMap)
		
		// Skip procssing for inputonly and none values of JSONINCLUDE.
		If $$$jsoninclude(propertyMap)'["out" Continue
		
		// Generate code to import this property.
		Set membercat=$$$jsonmembercat(propertyMap)
		If membercat["Collection" {
			// Generate code to import collections
			$$$GENERATE("    Set aval=.."_$$$jsonpropertyQN(propertyMap))
			If membercat["List" {
				// Generate code to import lists
				Do ..GenExportList(class,propertyMap,indent)
			} Else {
				// Generate code to import arrays
				Do ..GenExportArray(class,propertyMap,indent)
			}
			
		} Else {
			// Generate code to import this non-collection field
			$$$GENERATE(indent_"  Set value=.."_$$$jsonpropertyQN(propertyMap))
			Do ..GenExportField(class,propertyMap,fieldname,indent,0)
		}
	}
		
	Quit sc
]]></Implementation>
</Method>

<Method name="GenExportList">
<Description>
Generate code for exporting a List collection as a JSON array.</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec>class:%String,propertyMap:%List,indent:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	Set jsonreference=$$$jsonreference(propertyMap) 
	If jsonreference=$$$jsonrefoid {
		Set nextFunction="GetObjectNext"
	} ElseIf jsonreference=$$$jsonrefguid {
		Set nextFunction="GetNext"
	} ElseIf jsonreference=$$$jsonrefid {
		Set nextFunction="GetObjectIdNext"
	} Else {
		Set nextFunction="GetNext"
	}
	$$$GENERATE(indent_"  If aval.Count()>0 {")
	Do ..GenWriteField($$$jsonfieldname(propertyMap),indent_"  ","")
	$$$GENERATE(indent_"    Set sep=""[""")
	$$$GENERATE(indent_"    Set k="""" For {")
	$$$GENERATE(indent_"      Set value=aval."_nextFunction_"(.k) If k="""" Quit")
	Do ..GenExportField(class,propertyMap,"","      ",$$$isCollectionList)
	$$$GENERATE(indent_"    }")
   	$$$GENERATE(indent_"    "_%outputCode_"""]""")
   	$$$GENERATE(indent_"  }")
]]></Implementation>
</Method>

<Method name="GenExportArray">
<Description>
Generate code for exporting an array collection value from JSON object of the form {"key":value,...}</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec>class:%String,propertyMap:%List,indent:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	Set jsonreference=$$$jsonreference(propertyMap)
	If jsonreference=$$$jsonrefoid {
		Set nextFunction="GetObjectNext"
	} ElseIf jsonreference=$$$jsonrefguid {
		Set nextFunction="GetNext"
	} ElseIf jsonreference=$$$jsonrefid {
		Set nextFunction="GetObjectIdNext"
	} Else {
		Set nextFunction="GetNext"
	}
	$$$GENERATE(indent_"  If aval.Count()>0 {")
	Do ..GenWriteField($$$jsonfieldname(propertyMap),indent_"  ","")
	$$$GENERATE(indent_"    Set sep=""{""")
	$$$GENERATE(indent_"    Set aval=.."_$$$jsonpropertyQN(propertyMap)_",k=""""")
	$$$GENERATE(indent_"    For {")
	$$$GENERATE(indent_"      Set value=aval."_nextFunction_"(.k) If k="""" Quit")
	Do ..GenExportField(class,propertyMap,$c(1)_"k",indent_"    ",$$$isCollectionArray)
	$$$GENERATE(indent_"    }")
   	$$$GENERATE(indent_"    "_%outputCode_"""}""")
   	$$$GENERATE(indent_"  }")
]]></Implementation>
</Method>

<Method name="GenExportField">
<Description>
Generate code for exporting a single field value.</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec>class:%String,propertyMap:%List,fieldName:%String,indent:%String,isCollectionValue:%Integer</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	Set needClosingBrace=1
	// Generate code to import this property.
	Set membercat=$$$jsonmembercat(propertyMap)
	If membercat["OBJ" {
		// Handle no object specified.
		Set serialTest=$select(membercat["SERIAL":"&&'value.%IsNull()",1:"")
		$$$GENERATE(indent_"  If value'="""""_serialTest_" {")
		Set indent=indent_"  "
		// Output JSON for the object reference
		Set reference=$$$jsonreference(propertyMap)
		If reference=$$$jsonrefid {
			// Generate code to export object ID.
			Do ..GenExportID(class,propertyMap,fieldName,indent,isCollectionValue)
		} ElseIf reference=$$$jsonrefoid {
			// Generate code to export object OID.
			Do ..GenExportOID(class,propertyMap,fieldName,indent,isCollectionValue)
		} ElseIf reference=$$$jsonrefguid {
			// Generate code to export object GUID.
			Do ..GenExportGUID(class,propertyMap,fieldName,indent,isCollectionValue)
		} Else {
			// Generate code to export object references.
			Do ..GenExportObject(class,propertyMap,fieldName,indent,isCollectionValue)
		}

	} ElseIf membercat["STREAM" {
		// Handle no stream specified.
		If $$$jsonliteraltype(propertyMap)="string",$$$jsonignorenull(propertyMap) {
			Set needClosingBrace=0
		} Else {
			$$$GENERATE(indent_"  If (value'="""")&&'value.IsNull() {")
			Set indent=indent_"  "
		}
		// Output stream
		If membercat="BSTREAM" {
			// Generate code to export binary stream
			Do ..GenExportBinaryStream(class,propertyMap,fieldName,indent,isCollectionValue)
		} Else {
			// Generate code to export character stream
			Do ..GenExportCharacterStream(class,propertyMap,fieldName,indent,isCollectionValue)
		}

	} Else {
		// Handle no value specified.
		If $$$jsonliteraltype(propertyMap)="string",$$$jsonignorenull(propertyMap) {
			Set needClosingBrace=0
		} Else {
			$$$GENERATE(indent_"  If value'="""" {")
			Set indent=indent_"  "
		}
		// Generate code to export literals
		Do ..GenExportLiteral(class,propertyMap,fieldName,indent,isCollectionValue)
	}
	
   	If needClosingBrace {
		If isCollectionValue || ($$$jsonnull(propertyMap) && '$$$jsonignorenull(propertyMap)) {
			$$$GENERATE(indent_"} Else {")
			Do ..GenWriteField(fieldName,indent,"""null""")
	   		$$$GENERATE(indent_"}")
		   	$$$GENERATE(indent_"Set $extract(sep,1)="",""")
		} Else {
		   	$$$GENERATE(indent_"  Set $extract(sep,1)="",""")
	   		$$$GENERATE(indent_"}")
		}
	} Else {
	   	$$$GENERATE(indent_"  Set $extract(sep,1)="",""")
	}
]]></Implementation>
</Method>

<Method name="GenExportID">
<Description>
Generate code for exporting an object ID as JSON.</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec>class:%String,propertyMap:%List,fieldName:%String,indent:%String,isCollectionValue:%Integer</FormalSpec>
<Implementation><![CDATA[
	// Write the field value
	If isCollectionValue {
		// GetObjectNextId already returned id
		Do ..GenWriteField(fieldName,indent,"""""""""_$zcvt(value,""O"",""JSON"")_""""""""")
	} Else {
		Do ..GenWriteField(fieldName,indent,"""""""""_$zcvt(value.%Id(),""O"",""JSON"")_""""""""")
	}
]]></Implementation>
</Method>

<Method name="GenExportOID">
<Description>
Generate code for exporting an object OID as JSON.</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec>class:%String,propertyMap:%List,fieldName:%String,indent:%String,isCollectionValue:%Integer</FormalSpec>
<Implementation><![CDATA[
	// Write the field value
	If isCollectionValue {
		// GetObjectNextId already returned oid
		Do ..GenWriteField(fieldName,indent,"""""""""_$select($listget(value,2)="""":$listget(aval.GetAt(k).%Oid(),2),1:$listget(value,2))_"",""_$listget(value)_""""""""")
	} Else {
		Do ..GenWriteField(fieldName,indent,"""""""""_$listget(value.%Oid(),2)_"",""_$listget(value.%Oid())_""""""""")
	}
]]></Implementation>
</Method>

<Method name="GenExportGUID">
<Description>
Generate code for exporting an object GUID as JSON.</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec>class:%String,propertyMap:%List,fieldName:%String,indent:%String,isCollectionValue:%Integer</FormalSpec>
<Implementation><![CDATA[	Do ..GenWriteField(fieldName,indent,"""""""""_value.%GUID(value.%Oid())_""""""""")
]]></Implementation>
</Method>

<Method name="GenExportObject">
<Description>
Generate code for exporting a referenced object as JSON.</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec>class:%String,propertyMap:%List,fieldName:%String,indent:%String,isCollectionValue:%Integer</FormalSpec>
<Implementation><![CDATA[
	Set mappingName=$$$jsonmapping(propertyMap)
	If mappingName'="" {
		$$$GENERATE(indent_"  Set saveMapping=%mappingName,%mappingName="""_mappingName_"""")
	}
	// Write the field value
	Do ..GenWriteField(fieldName,indent,"")
	$$$GENERATE(indent_"  Set sc=value."_%objectCode_"() If $$$ISERR(sc) Goto "_%exitCode)
	If mappingName'="" {
		$$$GENERATE(indent_"  Set %mappingName=saveMapping")
	}
]]></Implementation>
</Method>

<Method name="GenExportBinaryStream">
<Description>
Generate code for exporting a binary stream as JSON.</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec>class:%String,propertyMap:%List,fieldName:%String,indent:%String,isCollectionValue:%Integer</FormalSpec>
<Implementation><![CDATA[
	Do ..GenWriteField(fieldName,indent,"")
	If $$$jsonliteraltype(propertyMap)["hex" {
		$$$GENERATE(indent_"  "_%outputCode_""""""""" Do value.Rewind() If value.Size>0 { While 'value.AtEnd { ")
		$$$GENERATE(indent_"    Set first=value.Read(.len,.sc) If $$$ISERR(sc) Goto "_%exitCode)
    	$$$GENERATE(indent_"    For k=1:8:$length(first)-7 {"_%outputCode_"$tr($j($zhex($zqa($re($e(first,k,k+7)))),16),"" "",""0"") }")
    	$$$GENERATE(indent_"    For k=k+8:1:$length(first) {"_%outputCode_"$select($ascii(first,k)<16:""0"",1:"""")_$zhex($ascii(first,k)) }")
		$$$GENERATE(indent_"  }} "_%outputCode_"""""""""")
	} Else {
		$$$GENERATE(indent_"  "_%outputCode_""""""""" Do value.Rewind() If value.Size>0 { While 'value.AtEnd { "_%outputCode_"$system.Encryption.Base64Encode(value.Read(32655,.sc),1) If $$$ISERR(sc) Goto "_%exitCode_" }} "_%outputCode_"""""""""")
	}
]]></Implementation>
</Method>

<Method name="GenExportCharacterStream">
<Description>
Generate code for exporting a character stream as JSON.</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec>class:%String,propertyMap:%List,fieldName:%String,indent:%String,isCollectionValue:%Integer</FormalSpec>
<Implementation><![CDATA[
	Do ..GenWriteField(fieldName,indent,"")
	$$$GENERATE(indent_"  "_%outputCode_""""""""" Do value.Rewind() If value.Size>0 { While 'value.AtEnd { "_%outputCode_"$zcvt(value.Read(,.sc),""O"",""JSON"") If $$$ISERR(sc) Goto "_%exitCode_" }} "_%outputCode_"""""""""")
]]></Implementation>
</Method>

<Method name="GenExportLiteral">
<Description>
Generate code for exporting a literal value as JSON.</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec>class:%String,propertyMap:%List,fieldName:%String,indent:%String,isCollectionValue:%Integer</FormalSpec>
<Implementation><![CDATA[
	Set property=$$$jsonproperty(propertyMap)
	Set type=$$$jsontype(propertyMap)
	
	// Get information about data type class
	Do ##class(%Compiler.XML.Generator.Adaptor).getPropertyParameters(class,property,.parms)
	Set haveLogicalToJSON=##class(%Compiler.XML.Generator.Adaptor).getSingleLine(class,property,type,"LogicalToJSON",.parms,"value",.codeLogicalToJSON)
	// Try to use LogicalToXSD if LogicalToJSON is not specified.  
	// The point is to avoid extra property mnethods being geenrated.
	If 'haveLogicalToJSON {
		Set haveLogicalToJSON=##class(%Compiler.XML.Generator.Adaptor).getSingleLine(class,property,type,"LogicalToXSD",.parms,"value",.codeLogicalToJSON)
	}
	If 'haveLogicalToJSON Set codeLogicalToJSON="value"
	Set literaltype=$$$jsonliteraltype(propertyMap)
	If $piece(literaltype,"/",1)="string" {
		If literaltype="string" {
			Set codeLogicalToJSON="$select("_$select($$$jsonignorenull(propertyMap):"(value="""""""")||",1:"")_"(value=$c(0)):"""",1:$zcvt("_codeLogicalToJSON_",""O"",""JSON""))"
		}
		Set codeLogicalToJSON="""""""""_"_codeLogicalToJSON_"_"""""""""
	} ElseIf literaltype="boolean" {
		Set codeLogicalToJSON="$select(value:""true"",1:""false"")"
	}
	Do ..GenWriteField(fieldName,indent,codeLogicalToJSON)
]]></Implementation>
</Method>

<Method name="GenWriteField">
<Description>
Generate code to write out the field name and value</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>fieldName:%String,indent:%String,valueText:%String</FormalSpec>
<Implementation><![CDATA[
	If fieldName'="" {
		// If first character of fieldName is $c(1), then the name is actually a variable name that contains field name
		If $extract(fieldName,1)=$c(1) {
			Set field="""_"_$replace($zcvt($extract(fieldName,2,*),"O","JSON"),"""","""""")_"_"""
		} Else {
			set field=$replace($zcvt(fieldName,"O","JSON"),"""","""""")
		}
		If valueText'="" {
			$$$GENERATE(indent_"  "_%outputCode_"sep_"_""""""""_field_""""""_$select($extract(valueText,1)="""":":"_$extract(valueText,2,*),1:":""_"_valueText))
		} Else {
			$$$GENERATE(indent_"  "_%outputCode_"sep_"_""""""""_field_""""":""")
		}
	} Else {
		$$$GENERATE(indent_"  "_%outputCode_"sep"_$select(valueText="":"",1:"_")_valueText)
	}
]]></Implementation>
</Method>
</Class>


<Class name="%JSON.Mapping">
<Description>
* Copyright (c) 2022 by InterSystems Corporation.
  Cambridge, Massachusetts, U.S.A.  All rights reserved.
  Confidential property of InterSystems Corporation. */
%JSON.Mapping is the internal class which represents the contents of the
XData block which defines a JSON Adaptor mapping.</Description>
<Super>%RegisteredObject,%XML.Adaptor</Super>
<System>2</System>
<TimeCreated>66440,61056.706126</TimeCreated>

<Parameter name="NAMESPACE">
<Default>http://www.intersystems.com/jsonmapping</Default>
</Parameter>

<Parameter name="XMLFORMAT">
<Default>literal</Default>
</Parameter>

<Parameter name="XMLIGNOREINVALIDATTRIBUTE">
<Default>0</Default>
</Parameter>

<Property name="IgnoreInvalidField">
<Description>
See %JSONIGNOREINVALIDFIELD class parameter in %JSON.Adaptor</Description>
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
<Parameter name="XMLPROJECTION" value="attribute"/>
</Property>

<Property name="Null">
<Description>
See %JSONNULL class parameter in %JSON.Adaptor</Description>
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
<Parameter name="XMLPROJECTION" value="attribute"/>
</Property>

<Property name="IgnoreNull">
<Description>
See %JSONIGNORENULL class parameter in %JSON.Adaptor</Description>
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
<Parameter name="XMLPROJECTION" value="attribute"/>
</Property>

<Property name="Mapping">
<Description>
See %JSONMAPPING class parameter in %JSON.Adaptor</Description>
<Type>%String</Type>
<Parameter name="XMLPROJECTION" value="attribute"/>
</Property>

<Property name="Reference">
<Description>
See %JSONREFERENCE class parameter in %JSON.Adaptor</Description>
<Type>%String</Type>
<InitialExpression>"OBJECT"</InitialExpression>
<Parameter name="XMLPROJECTION" value="attribute"/>
</Property>

<Property name="propertyList">
<Description>
The list of property definitions</Description>
<Type>%JSON.MappingProperty</Type>
<Collection>list</Collection>
<Parameter name="XMLNAME" value="Property"/>
<Parameter name="XMLPROJECTION" value="element"/>
</Property>
</Class>


<Class name="%JSON.MappingProperty">
<Description>
* Copyright (c) 2022 by InterSystems Corporation.
  Cambridge, Massachusetts, U.S.A.  All rights reserved.
  Confidential property of InterSystems Corporation. */
%JSON.MappingProperty is the internal class which represents the Property elements in the
XData block which defines a JSON Adaptor mapping.</Description>
<Super>%RegisteredObject,%XML.Adaptor</Super>
<System>2</System>
<TimeCreated>66440,61144.33371</TimeCreated>

<Parameter name="NAMESPACE">
<Default>http://www.intersystems.com/jsonmapping</Default>
</Parameter>

<Parameter name="XMLFORMAT">
<Default>literal</Default>
</Parameter>

<Parameter name="XMLIGNOREINVALIDATTRIBUTE">
<Default>0</Default>
</Parameter>

<Property name="Name">
<Description>
Property name.</Description>
<Type>%String</Type>
<Required>1</Required>
<Parameter name="XMLPROJECTION" value="attribute"/>
</Property>

<Property name="FieldName">
<Description>
See %JSONFIELDNAME property parameter in %JSON.Adaptor</Description>
<Type>%String</Type>
<Parameter name="XMLPROJECTION" value="attribute"/>
</Property>

<Property name="Include">
<Description>
See %JSONINCLUDE property parameter in %JSON.Adaptor</Description>
<Type>%String</Type>
<Parameter name="XMLPROJECTION" value="attribute"/>
</Property>

<Property name="Null">
<Description>
See %JSONNULL property parameter in %JSON.Adaptor</Description>
<Type>%Boolean</Type>
<Parameter name="XMLPROJECTION" value="attribute"/>
</Property>

<Property name="IgnoreNull">
<Description>
See %JSONIGNORENULL property parameter in %JSON.Adaptor</Description>
<Type>%Boolean</Type>
<Parameter name="XMLPROJECTION" value="attribute"/>
</Property>

<Property name="Mapping">
<Description>
See %JSONMAPPING property parameter in %JSON.Adaptor</Description>
<Type>%String</Type>
<Parameter name="XMLPROJECTION" value="attribute"/>
</Property>

<Property name="Reference">
<Description>
See %JSONREFERENCE property parameter in %JSON.Adaptor</Description>
<Type>%String</Type>
<Parameter name="XMLPROJECTION" value="attribute"/>
</Property>
</Class>


<Class name="%JSON.PropertyParameters">
<Description>
* Copyright (c) 2022 by InterSystems Corporation.
  Cambridge, Massachusetts, U.S.A.  All rights reserved.
  Confidential property of InterSystems Corporation. */
Property superclass used to hold information about property parameters for %JSON.Adaptor.</Description>
<System>2</System>
<TimeCreated>66440,64900.978922</TimeCreated>

<Parameter name="%JSONFIELDNAME">
<Description>
The %JSONFIELDNAME parameter specifies the field name that this property is mapped to in JSON.
The default %JSONFIELDNAME is the property name.</Description>
<Type>STRING</Type>
</Parameter>

<Parameter name="%JSONINCLUDE">
<Description>
The %JSONINCLUDE parameter controls if this property will be included in the JSON output or input.
Possible values are INOUT, INPUTONLY, OUTPUTONLY and NONE.  The default is INOUT.</Description>
<Type>STRING</Type>
<Constraint>INOUT,INPUTONLY,OUTPUTONLY,NONE</Constraint>
<Flags>ENUM</Flags>
</Parameter>

<Parameter name="%JSONNULL">
<Description>
If %JSONNULL is true (=1), then unspecified properties are exported as the null value.
Otherwise the field corresponding to the property is just skipped during export. </Description>
<Type>BOOLEAN</Type>
</Parameter>

<Parameter name="%JSONIGNORENULL">
<Description><![CDATA[
%JSONIGNORENULL allows the programmer to override the default handling of empty strings for string properties.
This parameter applies to only true strings which is determined by XSDTYPE = "string" as well as JSONTYPE="string"
By default (%JSONIGNORENULL = 0), empty strings in the JSON input are stored as $c(0)
and $c(0) is written to JSON as the string "". A missing field in the JSON input is always stored as ""
and "" is always output to JSON according to the %JSONNULL parameter.<br>
If %JSONIGNORENULL is set = 1, then both missing fields in the JSON and empty strings are input as "",
and both "" and $c(0) are output as field values of "". ]]></Description>
<Type>BOOLEAN</Type>
</Parameter>

<Parameter name="%JSONREFERENCE">
<Description><![CDATA[
%JSONREFERENCE specifies the default value of the %JSONREFERENCE property parameter that specifies how to
project references to JSON.  %JSONREFERENCE may be specified for any property to override this default value.
Possible values of %JSONREFERENCE are "OBJECT", "ID", "OID", "GUID".<br>
="OBJECT" is the default and indicates that the properties of the referenced class are used to represent the referenced object.<br>
="ID" indicates that the id of a persistent or serial class is used to represent the reference.<br>
="OID" indicates that the oid of a persistent or serial class is used to represent the reference.
 The form of the oid as projected to JSON will be classname,id.<br>
="GUID" indicates the GUID of a persistent class is used to represent the reference.<br>]]></Description>
<Type>STRING</Type>
<Constraint>OBJECT,ID,OID,GUID</Constraint>
<Flags>ENUM</Flags>
</Parameter>
</Class>


<Class name="%Library.RawString">
<Description>
* Copyright (c) 2022 by InterSystems Corporation.
  Cambridge, Massachusetts, U.S.A.  All rights reserved.
  Confidential property of InterSystems Corporation. */
This is an internal datatype used to represent string values.</Description>
<ClassType>datatype</ClassType>
<System>1</System>
<TimeCreated>66440,63085.151269</TimeCreated>
</Class>


<Routine name="%PVA" type="INC"><![CDATA[
#;
	; Copyright (c) 2022 by InterSystems Corporation.
	; Cambridge, Massachusetts, U.S.A.  All rights reserved.
	; Confidential property of InterSystems Corporation.
#; Definitions for Packed Vectors (PV) and Packed Vector Arrays (PVA)
#;
#; Define the PV_IDTYPE_x of PV as found in the header of the PV
#;
#; PV is a %DynamicArray
#define	PVTYPEARRAY	     157         
#; PV is a %DynamicObject (with its own keymap)
#define PVTYPEOBJECT         158
#; PV is a %DynamicString
#define PVTYPECHAR	     159
#; PV is a %DynamicBinary
#define PVTYPEBINARY	     160
#; PV is a %DynamicBase64
#define PVTYPEBASE64	     161
#;
#; PV_Bufxxx type codes
#;
#; Buffer contains Characters
#define PVBUFCHAR	1
#; Buffer contains 8-bit bytes
#define PVBUFBYTE	2
#; Buffer contains 8-bit bytes (to be converted to Base64 when fetched)
#define PVBUFBASE64	3
#;
#; Define the PV_VALUE_x, types of values, found inside a PV as returned
#; by $gettypeof()
#;
#; String is null
#define PVVALUENULL          0
#; String is true
#define PVVALUETRUE          1
#; String is false
#define PVVALUEFALSE         2
#; 32-bit positive integer
#define PVVALUEINTEGERPOS    3
#; 32-bit negative integer
#define PVVALUEINTEGERNEG    4
#; Unused code
#define PVVALUEUNUSED1       5
#; This is meta-data for an array
#define PVVALUEARRAY         6
#; This is meta-data for an object
#define PVVALUEOBJECT        7
#; Normal text string
#define PVVALUETEXT          8
#; Numeric number
#define PVVALUENUMBER        9
#; Long Text in separate buffer
#define	PVVALUELONGTEXT	     10
#; Cache floating point, 64 bit mantissa, 8 bits for sign and exponent
#define PVVALUECACHENUMERIC  11
#; An embedded Cache object, maybe another %Object or %Array
#define PVVALUEOREF          12
#; The value is unassigned
#define	PVVALUEUNASSIGNED    13
#; Long 64 bit, positive
#define PVVALUELONGPOS       14
#; Long 64 bit, negative
#define PVVALUELONGNEG       15
#; A byte[] array.
#define PVVALUEBYTE          16
#; Date/Time object
#define PVVALUEDATETIME      17
#; Double precision floating point in binary
#define PVVALUEDOUBLE        18
#; Single precision floating point in binary
#define PVVALUESINGLE        19
#; UTF-8 Bytes, in serialised format only
#define PVVALUEUTF8          20
#; Nested array or object, in serialised format only
#define PVVALUENESTED        21
#; End of data during $getNext()
#define	PVVALUEEOF	     31
#;
#; Find out the type of value. 
#; One of the following strings are returned.
#;   "null"                  - JSON null
#;   "boolean"               - Either "true" or "false"
#;   "number"                - Any numeric value
#;   "oref"                  - A reference to another Cache object
#;   "object"                - A nested object
#;   "array"                 - A nested array 
#;   "string"                - Normal text string
#;   "unassigned"            - The value is unassigned
#; 
#define JSONGetTypeOf(%object,%key) $CASE(%object.%GetTypeCodeOf(%key),$$$PVVALUENULL:"null",$$$PVVALUETRUE:"boolean",$$$PVVALUEFALSE:"boolean",$$$PVVALUEINTEGERPOS:"number",$$$PVVALUEINTEGERNEG:"number",$$$PVVALUEARRAY:"array",$$$PVVALUEOBJECT:"object",$$$PVVALUETEXT:"string",$$$PVVALUENUMBER:"number",$$$PVVALUELONGTEXT:"string",$$$PVVALUECACHENUMERIC:"number",$$$PVVALUEOREF:"oref",$$$PVVALUEUNASSIGNED:"unassigned",$$$PVVALUELONGPOS:"number",$$$PVVALUELONGNEG:"number",$$$PVVALUEBYTE:"string",$$$PVVALUEDOUBLE:"number",$$$PVVALUESINGLE:"number",$$$PVVALUEUTF8:"string",$$$PVVALUEEOF:"unassigned",:"UNKNOWN")
#define JSONConvertType(%typecode) $CASE(%typecode,$$$PVVALUENULL:"null",$$$PVVALUETRUE:"boolean",$$$PVVALUEFALSE:"boolean",$$$PVVALUEINTEGERPOS:"number",$$$PVVALUEINTEGERNEG:"number",$$$PVVALUEARRAY:"array",$$$PVVALUEOBJECT:"object",$$$PVVALUETEXT:"string",$$$PVVALUENUMBER:"number",$$$PVVALUELONGTEXT:"string",$$$PVVALUECACHENUMERIC:"number",$$$PVVALUEOREF:"oref",$$$PVVALUEUNASSIGNED:"unassigned",$$$PVVALUELONGPOS:"number",$$$PVVALUELONGNEG:"number",$$$PVVALUEBYTE:"string",$$$PVVALUEDOUBLE:"number",$$$PVVALUESINGLE:"number",$$$PVVALUEUTF8:"string",$$$PVVALUEEOF:"unassigned",:"UNKNOWN")
#;
#;
#; These are the error codes that can be returned with %FromJSON()
#;
#; Parsing okay
#define JSONERROROKAY					1
#; Source wasn't a string
#define JSONERRORNOSTRING				2
#; General parsing error on JSON string
#define JSONERRORPARSEFAIL				3
#; Internal error
#define JSONERRORINTERNALERROR				4
#; Memory allocation failure
#define JSONERRORNOMEMORY				5
#; Invalid hex in \uXXXX string
#define JSONERRORINVALIDHEX				6
#; Hex in \uXXXX string too big for 8-bit systems
#define JSONERROROVERFLOWHEX				7
#; Invalid escape sequence \X
#define JSONERRORINVALIDESCAPE				8
#; Number is too large
#define JSONERRORMAXNUMBERC				9
#; Read error from input stream
#define JSONERRORREADERROR				10
#; Exceeded the maximum depth
#define JSONERRORMAXDEPTH				11
#; EOF seen prematurely
#define JSONERRORUNEXPECTEDEOF				12
#; A duplicate key was seen in an object
#define JSONERRORDUPLICATEKEY				13
#; An error was thrown by Cache
#define JSONERRORCACHEKERNEL				14
#; The metadata is missing or illegal
#define JSONERRORMETADATA				15
#; The internal structure is corrupt
#define JSONERRORCORRUPTSTRUCTURE			16
#; Invalid arguments passed to the $zu(210)
#define JSONERRORINVALIDZUARGS				17
#; Output variable exceeded maximum size
#define JSONERRORMAXSIZE				18
#;
#;
#; $ZU(210,subcode,...) subcodes
#;
#;
#; PVSSize $ZU(210,$$$PVSSize)
#; Returns 'allocated' size of PV_Buf/PV_Stream
#;
#define PVSSize			40
#;
#; PVSReadbuf $zu(210,$$$PVSReadBuf,i%DAOPos,..#BUFLEN)
#; Returns string of length ..#BUFLEN starting at i%DAPPos in a PV_Buf;
#; Note string may be shorter if end-of-buffer is enounted.
#;
#define PVSReadBuf		41
#;
#; PVSstreamPVO $ZU(210,$$$PVSstreamPVO,DAOstring)
#; Current oref (which is an oref of the %Stream.DAOString
#; class) gets PVO of type PVO_TYPE_STREAM which references the PV_Buf of
#; oref DAOString (which is an oref of the %DynamicString class)
#;
#define PVSstreamPVO		42
#;
#; PVSstringBuf $ZU(210,$$$PVSstringBuf,size)
#; Returns an empty %DynamicString object capable of holding at least
#; 'size' characters.  This %DynamicString object is populated using
#; $ZU(210,$$$PVSWriteBuf,buf,string) method calls.
#;
#define PVSstringBuf		43
#;
#; PVSWriteBuf $ZU(210,$$$PVSWriteBuf,buf,string)
#; Appends 'string' onto end of %DynamicString 'buf' and returns the new
#; length of 'buf'.
#;
#define PVSWriteBuf		44
#;
#; PVSCompressBuf $ZU(210,$$$PVSCompressBuf,buf)
#; Checks if buffer does not contain any wide characters; if so, changes it
#; from PV_BufChar to a PV_BufByte, deletes original PV_BufChar buffer and
#; returns the new PB_BufByte buffer.
#;
#define PVSCompressBuf		45
#;
#; PVSGetNext2 $ZU(210,$$$PVSGetNext2,pvaoref,.position,.key,.value)
#; Does a %GetNext for both arrays and objects but does not generate
#; <MAXSTRING> error for long strings (returns a %DynamicString,
#; %DynamicBinary or %DynamicBase64 oref instead) and does not generate
#; <MAXNUMBER> for large PV_VALUE_NUMBER entries (returns an ObjectScript
#; string instead.)
#;
#define PVSGetNext2		46
]]></Routine>


<Class name="%Storage.Persistent">
<Super>%Library.CacheStorage</Super>
<TimeCreated>66440,65815.606037</TimeCreated>
</Class>


<Class name="%Storage.Serial">
<Super>%Library.CacheSerialState</Super>
<TimeCreated>66440,66206.025961</TimeCreated>
</Class>


<Routine name="%jsonMap" type="INC"><![CDATA[
#;Macros for JSON map
	; Copyright (c) 2022 by InterSystems Corporation.
	; Cambridge, Massachusetts, U.S.A.  All rights reserved.
	; Confidential property of InterSystems Corporation.
#define jsonclass(%map,%name)               $listget(%map(%name,0),1)
#define jsonignoreinvalidfield(%map,%name)  $listget(%map(%name,0),2)
#define jsonpropertycount(%map,%name)       $get(%map(%name))
#define jsongetprop(%map,%name,%idx)        $get(%map(%name,%idx))
#define jsonproperty(%node)     $list(%node,1)
#define jsonpropertyQN(%node)   $list(%node,2)
#; Possible values of jsoninclude are "N","I","O","IO"
#define jsoninclude(%node)      $list(%node,3)
#define jsonfieldname(%node)    $list(%node,4)
#define jsonnull(%node)         $list(%node,5)
#define jsonignorenull(%node)   $list(%node,6)
#; Possible jsonreference values
#define jsonrefobject    1
#define jsonrefid        2
#define jsonrefoid       3
#define jsonrefguid      4
#define jsonreference(%node)    $list(%node,7)
#define jsonrequired(%node)     $list(%node,8)
#define jsonliteraltype(%node)  $list(%node,9)
#define jsonmembercat(%node)    $list(%node,10)
#define jsontype(%node)         $list(%node,11)
#define jsonmapping(%node)      $list(%node,12)
#;
#; isCollectionValue possibilities
#define isCollectionList   1
#define isCollectionArray  2
#; External display format for mapping name
#define mappingNameDisplay(%name)  $select(%name="":"class base",1:%name)
  
 

]]></Routine>


<Routine name="%occErrors" type="INC"><![CDATA[
#define VolExists                                1
	; Copyright (c) 2022 by InterSystems Corporation.
	; Cambridge, Massachusetts, U.S.A.  All rights reserved.
	; Confidential property of InterSystems Corporation.
#define MapBlockReadFailed                       2
#define ErrWritingMapBlock                       3
#define CannotReadGloDirMapBlk                   4
#define CannotWriteGloDirMapBlk                  5
#define CannotWriteGloDirBlk                     6
#define CannotOpenNextVolume                     13
#define CannotReadNextVolMapBlk                  14
#define DirectoryNameTooLong                     15
#define NumMapsInvalid                           16
#define DatabaseSizeOutOfRange                   17
#define FailedToCreateNewVol                     18
#define AlreadyMounted                           19
#define FileExists                               20
#define FileCreateInProgress                     21
#define CurrentNumMapsTooSmall                   22
#define CannotExpandFile                         23
#define FileClusterMounted                       24
#define CannotAllocateCFN                        25
#define IncompatibleMountReq                     26
#define MgrCannotBeClusterMnt                    27
#define DatabaseInTransition                     28
#define SystemNotPartOfCluster                   30
#define CannotChangeModeOfMntDB                  31
#define NotSpaceForNewVol                        32
#define VolOverSysFileSizeLimit                  33
#define UnkErrWritingToNewVol                    34
#define DatabaseExpanding                        35
#define DatabaseNotMountable                     36
#define DBMountedElsewhere                       37
#define NoRoomInSecVolTable                      38
#define VolIsReadonly                            39
#define NoDeleteClusterMntDB                     40
#define DirectoryNotFound                        41
#define DatabaseNameInvalid                      42
#define WDFailedToSetRWFlag                      43
#define ExpansionFailedToStart                   44
#define SomeDBFilesNotDeleted                    45
#define UnkAndUnexpectedError                    51
#define InvalidArgument                          52
#define CannotOpenTarget                         53
#define CannotReadTarget                         54
#define CannotWriteToTarget                      55
#define DatabaseBeingRestored                    56
#define DatabaseNotThere                         57
#define ReqTooManyBitmapBlks                     58
#define AllocateBitmapBlksFail                   59
#define TaskNeedsDismount                        60
#define TaskNeedsPrivateMount                    61
#define GlobalDirMustBeEmpty                     62
#define CannotCluMntTemp                         63
#define CannotCluMntCacheTemp                    63
#define CannotDismountTemp                       64
#define CannotDismountCacheTemp                  64
#define CannotReinitMountedDatabase              65
#define UnknownResourceName                      66
#define DBEncryptionKeyNotFound                  67
#define DBCountExceedsLicenseLImit               68
#define DatabaseIsMirrored                       69
#define ErrorWhileFormatting                     70
#define NotOwner                                 71
#define NoSuchRawDevice                          72
#define NoSuchDirectory                          73
#define IOError                                  74
#define NoSuchDeviceOrAddress                    75
#define AccessToFileDenied                       76
#define DeviceOrResourceBusy                     77
#define UCFileExists                             78
#define NoSuchDeviceOrWrongUse                   79
#define FileTableOverflow                        80
#define TooManyOpenFiles                         81
#define ReadOnlyFileSystem                       82
#define ErrorCodeIs                              83
#define AuditMaxSize                             84
#define OperIllegalInSingleUserMode              85
#define CollationNotSupported                    86
#define DatabaseBlockSizeTooSmallForDIO          87
#define DIONotSupportedByNFS                     88
#define DIOOpenRequiredForAIO                    89
#define 2KDatabaseNotSupported                   90
#define CreateDBExtentNotAllow                   91
#define WrongDBEndian                            92
#define JournalRequiredForAuditDB                93
#define LicensedTotalDBSizeExceeded              94
#define FailedToLoadCompressionEngine            95
#define NoSparseFileSupportForCompression        96
#define TopPointerLevelKB                        101
#define BottomPointerLevelKB                     102
#define PointerLevelKB                           103
#define TopBottomPointerLevelKB                  104
#define DataLevelKB                              105
#define TotalBlocksKB                            106
#define ElapsedTime                              107
#define ErrorTypeWithPtr                         108
#define ErrorWhile                               109
#define WrongLinkBlock                           110
#define NoView                                   111
#define WhichIsFirst                             112
#define WhichHasLeft                             113
#define PtrBlkDegraded                           114
#define LowerDegraded                            115
#define FirstNodeRefTooLong                      116
#define FirstNodePtrWrong                        117
#define FirstNodeDoesNot                         118
#define FollowLastRef                            119
#define EqualExpectedRef                         120
#define LastLowerBlk                             121
#define WhichPntLower                            122
#define GlobalNotOK                              123
#define GlobalOK                                 124
#define LowerWrongType                           125
#define ExpectedType                             126
#define PtrDidExpect                             127
#define PtrDidNotExpect                          128
#define BigButTypeInfo                           129
#define BigButBigCount                           130
#define SaysDoesNot                              131
#define SaysDoes                                 132
#define LowerBlkInfoWrong                        133
#define LenZeroButIsRightLink                    134
#define LenPosButNoRightLink                     135
#define RefTooLong                               136
#define RefDescribed                             137
#define DoesNotFollowLastNode                    138
#define DoesNotMatchNextLen                      139
#define LowerBlkHasNextLen                       140
#define LowerBlkHasNextOff                       141
#define ButNotData                               142
#define ButNotBigDB                              143
#define FoundSeekingBigStrings                   144
#define DataBlkBigCountIs                        145
#define ButBlkTypeSays                           146
#define ShouldBeBigStrings                       147
#define ShouldNotBeBigStrings                    148
#define DataBlkSyntaxError                       150
#define BigStringInfo                            151
#define MapBlkLabelError                         152
#define LowerBlkNotInMapBlk                      153
#define BigStringInBlk                           154
#define NotAllocInMapBlk                         155
#define PtrBlkEmpty                              156
#define LowerRtLinkRefDoesNot                    157
#define MatchExpectedNextRef                     158
#define ExpLastNodeCollateEarlier                159
#define ExpectEqual                              160
#define LowerRtLinkRefIs                         161
#define PtrBlkNextRefIs                          162
#define PtrNodeRefDoesNotMatch                   163
#define FirstNodeOfLowerBlk                      164
#define LowerBlkFirstNodeIs                      165
#define BigDBRefShouldMatch                      166
#define RefNotMatchFirstBytes                    167
#define NotMatchNextPtrNode                      168
#define PtrNodeSaysBlkNumberIs                   169
#define OutOfRangeOfDataBase                     170
#define PtrBlkHasRightLink                       171
#define NotPresentOnDisk                         172
#define NotPtrBlkType                            173
#define TopBlkHasNoTopPtrBlkType                 174
#define LowerPtrBlkHasTopPtrBlkType              175
#define BigStringsInBlkMB                        176
#define BigStringsInBlkKB                        177
#define DBNotAvailableBecause                    178
#define UnexpectedError                          179
#define ReportValue                              180
#define FurtherDirCheckAborted                   181
#define FurtherGloCheckAborted                   182
#define ContCheckWithNextPtrBlk                  183
#define DatabaseNotAvailable                     184
#define InsertedAtEnd                            185
#define ShouldNodeBeInThisBlock                  186
#define InsertedAtFront                          187
#define ChangeOtherBlocks                        188
#define InsertedAsNewNode                        189
#define OldNodesMovedUp                          190
#define NodeAlreadyExists                        191
#define NotEnoughRoomInBlock                     192
#define OldNodesMovedDown                        193
#define DeletedAtFront                           194
#define TypeInvalidForRepair                     195
#define OffsetImproper                           196
#define TopPointerLevelMB                        197
#define BottomPointerLevelMB                     198
#define PointerLevelMB                           199
#define TopBottomPointerLevelMB                  200
#define DataLevelMB                              201
#define TotalBlocksMB                            202
#define LowerBlkHasRightLink                     203
#define MapFreeCountOff                          204
#define IntegrityJobNotStarted                   205
#define StopIntegrityCheck                       206
#define StopDirectoryCheck                       207
#define StopGlobalCheck                          208
#define NotBigStringDataType                     209
#define BlankLine                                210
#define PtrBlkWrongGlobal                        211
#define NoLongStringInserts                      212
#define CannotCreate2KDB                         213
#define DuplicatePointers                        214
#define DuplicatePointer                         215
#define InvalidGlobalName                        216
#define GlobalNameTooLong                        217
#define ErrorParsingNodes                        218
#define ErrorParsingPointerRef                   219
#define ErrorParsingNextPointerRef               220
#define FailedFindingBottomPointer               221
#define MissingIntegrityRanges                   222
#define FurtherSysCheckAborted                   223
#define IntegrityResultsInFlux                   224
#define IntegrityCannotRetry                     225
#define StoredNextPtrIsWrong                     250
#define NodeHasBadSubscriptLength                251
#define MismatchCollate                          252
#define BadOffsetInBigStringBlock                253
#define BadRightLinkInBigStringBlock             254
#define BlkChangedOK                             255
#define BlkChangedBad                            256
#define GloDirBlk                                257
#define GloDirName                               258
#define CorruptMapBlockType                      259
#define IncorrectMapBlockType                    260
#define IncorrectMapBlockLabel                   261
#define IncorrectMapBlockNumber                  262
#define IncorrectIncrementalFileNumber           263
#define IncorrectDatabaseCreationTime            264
#define BlockMarkedBad                           265
#define TopPointerBlkNotAllocated                266
#define IntegrityCheckErrors                     267
#define ExpectedPtrType                          268
#define GloDirLoop                               269
#define GloDirType                               270
#define GlobalBlkChange                          271
#define GlobalMaybeBad1                          272
#define GlobalMaybeBad2                          273
#define WhichDataBlk                             274
#define WhichPntLowerError                       275
#define TopPointerRightLink                      276
#define PossibleLoop                             277
#define PossibleLoopBlk                          278
#define NotMatchNextPtrNodeError                 279
#define GloDirParseError                         280
#define BadOffsetInPointerBlock                  281
#define BadOffsetInLowerBlock                    282
#define ErrorParsingPointerBlock                 283
#define BlkTypeNotAllocated                      284
#define TopPtrBlkFirstNode                       285
#define LeftEdgePtrBlkFirstNode                  286
#define ErrorRestartingLevel                     287
#define NumberOfLevelsChanged                    288
#define IntegrityLockFailure                     289
#define IntegrityJobExited                       290
#define PtrBlkTypeMismatch                       291
#define DatabaseNotMounted                       300
#define DatabaseHasDegradation                   301
#define DatabaseReadOnly                         302
#define PrimaryVolumeExists                      303
#define SecondaryVolumeExists                    304
#define ChooseDiffPrimaryLocation                305
#define ChooseDiffSecondaryLocation              306
#define CreatedButFailureToMountIs               307
#define GlobalNotFound                           308
#define GlobalAlreadyDefined                     309
#define TempCannotBeMgrDB                        310
#define CacheTempCannotBeMgrDB                   310
#define FailedToDesignateTemp                    311
#define FailedToDesignateCacheTemp               311
#define FailedTempSfnLookup                      312
#define FailedCacheTempSfnLookup                 312
#define ModifyFailedBecause                      313
#define NotADatabaseFile                         314
#define CreatedButNotFormatted                   315
#define CannotDeleteDatabaseBecause              316
#define CannotDeleteDatabase                     317
#define CannotDeleteMirrorDatabase               318
#define CompletedReclaimingRtnBlocks             319
#define CreateFailedBecause                      320
#define FailedToSetKeepType                      321
#define NoNetworkForClusterMount                 322
#define ClusterMountFailed                       323
#define CorruptGlobalDirectory                   324
#define FailedToSetJournalType                   325
#define FailedToSetProtectState                  326
#define NoBuffersOfRequiredSize                  327
#define FailedToSetCollationType                 328
#define DatabaseError                            329
#define BlockNotInUse                            330
#define BadBlockVariable                         331
#define BigStringBlockUseDump                    332
#define GlobalExists                             333
#define CannotCreateGlobal                       334
#define GlobalIsRemote                           335
#define NotALegalName                            336
#define CannotWriteConfigFile                    337
#define InputFileError                           338
#define CorruptConfigFile                        339
#define FileNotFound                             340
#define BlockNumberTooHigh                       341
#define NotAMapBlock                             342
#define MapBlockNumberIncorrect                  343
#define 2kNotSupported                           344
#define CannotDismountManagerDB                  345
#define CannotModifyProperty                     346
#define SizeMustBeGreaterOrEqual                 347
#define BadParameter                             348
#define CannotAddVolUnlessDBExists               349
#define FailureToMountIs                         350
#define ErrorReclaimingRtnBlocks                 351
#define CorruptMapBlock                          352
#define CreatedLowerThanRequested                353
#define CommDevInUse                             354
#define DBCreationNotAllowed                     355
#define DatabaseResourceUnknown                  356
#define InsufficientBuffers                      357
#define Compacting                               358
#define Freespace                                359
#define FreeExceedsFile                          360
#define MaxSpace                                 361
#define DefragSpace                              362
#define CannotAddSystemDBToMirror                363
#define CannotDisplayMirrorInfoBlk               364
#define NamespaceUnavailable                     365
#define DatabaseTooSmall                         366
#define InvalidGblCollation                      367
#define RetFreeBlkCacheFail                      368
#define MaintOperationInProgress                 369
#define SizeNeedInteger                          370
#define DatabaseIsDismounted                     371
#define DatabaseIsReadOnly                       372
#define DatabaseIsClusterMounted                 373
#define DatabaseIsNotJournaled                   374
#define JournalingIsNotEnabled                   375
#define GlobalCollationIncorrect                 376
#define NamespaceUnavailableECP                  377
#define TruncationInprogress                     378
#define BadBlkTypeErr                            379
#define CompactionSkippedBlks                    380
#define StoppedAtUnmoveableBlock                 381
#define UnableToGetDirInfo                       382
#define GblNamesMustBeTheSame                    383
#define GblEndNodeAfterBeginNode                 384
#define DBExpansionSizeMin                       385
#define NotValidForTemp                          386
#define NotValidForCacheTemp                     386
#define NotSupportedOnVMS                        387
#define UnknownErrorCode                         388
#define BackupInProgress                         389
#define ExpansionInProgress                      390
#define NoBuffersOfRequiredSizeFromPrimary       391
#define DBCreationNotAllowedFromPrimary          392
#define UnknownSystemName                        393
#define ModifiedLowerThanRequested               394
#define RemoteCommandExecutionFailure            395
#define InvalidParameter1                        396
#define ProcessDoesNotExist                      397
#define InvalidCOLLATECollation                  398
#define CPFAtLine                                400
#define CPFLine                                  401
#define CPFNotEnoughFields                       402
#define CPFInvalidLine                           403
#define CPFNoVersion                             404
#define CPFInvalidVersion                        405
#define CPFInvalidParameterName                  406
#define CPFInvalidParameterValue                 407
#define CPFMissingParameters                     408
#define CPFCannotDeleteSection                   409
#define CPFTooManyFields                         410
#define CPFFileModifiedCannotImport              411
#define CPFInvalidMapKeyword                     412
#define CPFInvalidOrDuplicateSection             415
#define CPFDuplicateLine                         416
#define CPFDuplicateEntry                        417
#define CPFSectionAlreadyExists                  418
#define CPFNameAlreadyExists                     419
#define CPFNameDoesNotExist                      420
#define CPFMapDoesNotExist                       421
#define CPFMapAlreadyExists                      422
#define CPFServerInUse                           423
#define CPFDeviceSameasAlias                     424
#define CPFDataServerNotDefined                  425
#define CPFDataServerNotAllowed                  426
#define CPFCannotDeleteSystemDatabase            427
#define CPFNamespaceAlreadyExists                428
#define CPFDatabaseInUse                         429
#define CPFNotAllowedForRemoteServer             430
#define CPFCannotClusterMountSystemDB            431
#define CPFMissingDatabase                       432
#define CPFNamespaceDoesNotExist                 433
#define CPFCannotDeleteSystemNamespace           434
#define CPFMissingNamespace                      435
#define CPFServersBeforeDatabases                436
#define CPFDatabasesBeforeNamespaces             437
#define CPFDeviceSubTypesBeforeDevices           438
#define CPFNamespacesBeforeMap                   439
#define CPFMissingSections                       440
#define CPFFurtherCheckingAborted                441
#define CPFNoClusteredDatabases                  442
#define CPFCommentTooLong                        444
#define CPFCommentMustStart                      445
#define CPFInvalidNestedComment                  446
#define CPFNoEndCommentFound                     447
#define CPFInvalidRoutineType                    448
#define CPFCannotMapRoutine                      449
#define CPFDataServerAlreadyDefined              450
#define CPFMustDeleteMapping                     451
#define CPFMappingAlreadyExists                  452
#define CPFReactivateCannotQuiesce               453
#define CPFMappingMustBeDefined                  454
#define CPFDatabaseCouldNotMount                 455
#define CPFIncreaseMaxServers                    456
#define CPFInvalidNamespaceName                  457
#define CPFInvalidServerName                     458
#define CPFDatabaseAlreadyExists                 459
#define CPFInvalidCollation                      460
#define CPFIPv6SupportUnavailable                461
#define CPFInvalidBlockSize                      462
#define CPFBadDBForMirrorConnection              463
#define CPFECPServerNotExist                     464
#define CPFECPServerNotMirror                    465
#define CPFNoLongStrings                         466
#define CPFAliasInUse                            467
#define CPFInvalidShadowName                     468
#define CPFShadowsBeforeMap                      469
#define CPFServerMatchLocal                      470
#define CPFSectionBeforeMap                      471
#define CPFnewWIJdirexists                       472
#define CPFLocalDirectoryNotListed               473
#define CPFUnableToLock                          474
#define CPFRequiredDatabaseMountedReadOnly       475
#define CPFInvalidMirrorConnection               476
#define CPFBadDBForNonMirrorConnection           477
#define CPFInvalidMagTapeName                    478
#define CPFCannotCompressSystemDatabase          479
#define CPFUnknownCompressionEngineName          480
#define CPFInvalidWorkQueueName                  481
#define CPFCannotDeleteWorkQueue                 482
#define MGReadFileErrors                         501
#define MGValidateFileErrors                     502
#define MGPerformFileErrors                      503
#define MGInvalidPropertyValue                   504
#define MGInvalidPropertyName                    505
#define MGInvalidPropertyError                   506
#define MGActionFailed                           507
#define MGInvalidAction                          508
#define MGInvalidActionError                     509
#define MGVersionMismatch                        510
#define MGActionIndexMissing                     511
#define MGPropertyNotEnoughFields                512
#define MGActionMissingProperty                  513
#define MGInvalidPrivilege                       514
#define MGInvalidGrantee                         515
#define MGActionSQLErrorCode                     516
#define CtrlCharsInData                          570
#define DatabaseCopyAlreadyRunning               571
#define CannotCopyClusterDatabase                572
#define CannotCopyMirroredDatabase               573
#define CSPApplication                           601
#define DataServer                               602
#define Database                                 603
#define Device                                   604
#define GloMap                                   605
#define GloRepl                                  606
#define LicenseServer                            607
#define Namespace                                608
#define SQLGateway                               609
#define RouMap                                   610
#define MagTape                                  611
#define SubType                                  612
#define EthernetConnection                       613
#define UDPConnection                            614
#define EthernetDevice                           615
#define VolSetUCI                                616
#define ShdwDestination                          617
#define ShdwSource                               618
#define LATService                               619
#define ComPort                                  620
#define SysDataType                              621
#define UserDataType                             622
#define SLMRepl                                  623
#define SLM                                      624
#define JrnHistory                               625
#define VolumeSet                                626
#define Namespaces                               627
#define Databases                                628
#define Devices                                  629
#define Configuration                            630
#define ProjectionType                           631
#define JavaApp                                  632
#define EJBApp                                   633
#define CPPApp                                   634
#define ClsMap                                   635
#define ElementNotDefined                        641
#define ElementInUse                             642
#define ElementAlreadyExists                     643
#define InvalidParameter                         644
#define ElementDoesNotExist                      645
#define RestartRequired                          646
#define BadActiveFile                            647
#define ConfigNotSaved                           648
#define ConfigInUse                              649
#define AppAlreadyExists                         650
#define SetStartupError                          651
#define ClusterRequires                          652
#define SLMInvTilde                              653
#define SLMOpenParen                             654
#define SLMCloseParen                            655
#define SLMOpenBeforeClose                       656
#define SLMInvSub1                               657
#define SLMInvSubN                               658
#define SLMInvRange                              659
#define SLMMoreThan2Ranges                       660
#define NameRequired                             661
#define KeyRequired                              662
#define NoInfoFound                              663
#define NoProperty                               664
#define CouldNotOpenConfig                       665
#define RemoteChangeFailed                       666
#define ConfigParseError                         667
#define ActivateError                            668
#define SLMCollation                             669
#define LDAPerror                                701
#define LDAPNotInited                            702
#define LDAPLoadFailed                           703
#define LDAPOverflow                             704
#define LDAPOutOfHeap                            705
#define LDAPNotParent                            706
#define LDAPUnknownObj                           707
#define LDAPInvalidLib                           708
#define LDAPSASLChallenge                        709
#define LDAPParamErr                             710
#define LDAPNotSupported                         711
#define LDAPAuthNotSupported                     712
#define LDAPInvalidGroupId                       713
#define LDAPInvalidInstanceId                    714
#define SSLVerifyPeerIncorrectForClient          725
#define ExpandedCipherNoValue                    726
#define SSLUnlicensed                            727
#define CertificateExpired                       728
#define InvalidClientCert                        729
#define InvalidServerCert                        730
#define PublicKeyEncryptionFailed                731
#define PrivateKeyFileDecryptionFailed           732
#define PublicPriveKeyMismatch                   733
#define CertVerifyFailed                         734
#define NoMirrorSSL                              735
#define NotMirrorMember                          736
#define MemberUnreachable                        737
#define CanNotDisableTerminalAuthe               738
#define MirrorSSLValidateFailed                  739
#define MissingSSLCertificate                    740
#define MissingSSLCA                             741
#define InvalidCert                              742
#define InvalidCAFile                            743
#define MissingX509Certificate                   744
#define NoProtocols                              745
#define InvalidCiphersuite                       746
#define CertificateOCSPReq                       747
#define MissingIssuerCertificate                 748
#define MissingOCSPURL                           749
#define InvalidOCSPURL                           750
#define OCSPUpdateFailure                        751
#define OCSPUpdateTooManyFailures                752
#define MissingOCSPResponseFile                  753
#define InvalidOCSPConfig                        754
#define ServiceNotLicensed                       787
#define InsufficientPrivilegeForOperationReq     788
#define EnteredUserDoesNotMatch                  789
#define OperationRequiresOneOfTwo                790
#define DocDBRestricted                          791
#define DocDBDisabled                            792
#define DocDBDoesNotExist                        793
#define DocDBAlreadyExists                       794
#define AttemptToAccessProtectedRoutine          795
#define AttemptToAccessProtectedMethod           796
#define UserAccountHasExpired                    797
#define AuthenticationFailed                     798
#define ApplicationInvalidName                   799
#define ServiceDisabled                          800
#define ServiceLoginsDisabled                    801
#define ServiceSystemStartupInProgress           802
#define ServiceSystemShutdown                    803
#define ServiceAutheKBNotAllowed                 804
#define ServiceAutheKBIntegrityNotAllowed        805
#define ServiceAutheKBEncryptionNotAllowed       806
#define ServiceAutheOSNotAllowed                 807
#define ServiceKBRequired                        808
#define ServiceDoesNotExist                      809
#define ServiceInvalidUsernameOrPassword         810
#define ServiceAutheK5CCacheNotAllowed           811
#define ServiceAutheK5PromptNotAllowed           812
#define ServiceAutheK5APINotAllowed              813
#define ServiceAutheK5KeyTabNotAllowed           814
#define ServiceNotAuthorized                     815
#define ServiceInvalidAutheAllowed               816
#define ServiceInvalidIPAddress                  817
#define ServiceCannotDelete                      818
#define ServiceAlreadyExists                     819
#define ServiceInvalidAuthe                      820
#define AccessToResourceDenied                   821
#define AccessDenied                             822
#define InvalidUsernameOrPassword                824
#define UserUnableToInitializeSQL                825
#define UserUnableToRunZSTART                    826
#define UserNotAuthorizedOnSystem                827
#define UserAccountIsDisabled                    828
#define UserUnableToAddRole                      829
#define UserUnableToUpdateLastLogin              830
#define UserInvalidUsernameOrPassword            831
#define UserErrorUpdatingPassword                832
#define UserLoginTimeout                         833
#define UserCTRLC                                834
#define UserBypassingSystemSecurity              835
#define UserInsufficentPrivForProgrammer         836
#define UserAlreadyExists                        837
#define UserDoesNotExist                         838
#define UserCannotDeleteSuperUser                839
#define UserCannotDeleteLastAll                  840
#define UserCannotDeleteDefaultUser              841
#define UserInvalid                              842
#define UserInUseByService                       843
#define UserInsufficentPrivForNameSpace          844
#define UserPasswordInvalidFormat                845
#define UserCannotContainDomain                  846
#define SystemAlreadyExists                      848
#define SystemDoesNotExist                       849
#define AuditDatabaseNotAvailable                850
#define EventInvalidName                         851
#define EventAlreadyExists                       852
#define EventDoesNotExist                        853
#define EventCannotDeleteSystem                  854
#define EventCannotModifySystem                  855
#define AuditNotStopped                          856
#define AuditUnableToStart                       857
#define AuditUnableToQuiesce                     858
#define AuditDoesNotExist                        859
#define SecurityInitFailure                      860
#define ApplicationDisabled                      861
#define ApplicationRestricted                    862
#define ApplicationLocked                        863
#define RequireAuthentication                    864
#define RoutineNotAuthorizedforProfile           865
#define ClientApplicationNotAuthorized           866
#define ApplicationAlreadyExists                 867
#define ApplicationNotFound                      868
#define ApplicationDoesNotExist                  869
#define CannotDeleteSystemApp                    870
#define MatchRoleDuplicate                       874
#define MatchRoleDoesNotExist                    875
#define TargetRoleDuplicate                      878
#define TargetRoleDoesNotExist                   879
#define RoleCannotDelete                         880
#define RoleCannotRemove                         881
#define RoleDoesNotExist                         883
#define RoleAlreadyExists                        884
#define RoleMaxReached                           885
#define RoleCannotModify                         886
#define RoleInvalidName                          887
#define ResourceCannotDelete                     890
#define ResourceAlreadyExists                    891
#define ResourceDoesNotExist                     892
#define ResourceCannotModify                     893
#define ResourceMaxReached                       894
#define ResourceDuplicate                        895
#define ResourceInvalidName                      896
#define ResourceInvalidPermission                897
#define SSLConfigAlreadyExists                   898
#define InvalidTLSProcotols                      899
#define DomainCannotDelete                       900
#define DomainAlreadyExists                      901
#define DomainInvalidName                        902
#define DomainDoesNotExist                       903
#define DomainCannotChangeMultiple               904
#define LDAPConfigMustContainDot                 906
#define LDAPConfigAlreadyExists                  907
#define LDAPConfigInvalidName                    908
#define LDAPConfigDoesNotExist                   909
#define LDAPConfigNotEnabledForLDAP              910
#define UnableToDetermineLDAPConfig              911
#define LDAPISCLDAPConfigurationNotAllowed       912
#define PhoneProviderDoesNotExist                913
#define X509CredentialsDoesNotExist              914
#define OpenAMIdentityServicesDoesNotExist       915
#define CannotModifyResourceField                919
#define CannotModifyField                        920
#define OperationRequires                        921
#define OperationRequires1                       922
#define OperationRequires2                       923
#define OperationRequires3                       924
#define SystemCannotDelete                       930
#define PasswordChangeRequired                   935
#define InsufficientPrivilegeObjectAccess        939
#define InsufficientPrivilegeForOperation        940
#define AuditHeaderUnwritten                     941
#define UserAndRoleSameName                      942
#define UserHasNoRole                            943
#define UserInvalidExpirationDate                944
#define NoPctSysAuditImport                      945
#define UserHasNoNamespaces                      946
#define ServicePasswordNotAllowed                947
#define SSUnrecognizedType                       948
#define SSReadTimeout                            949
#define ServiceInvalidName                       950
#define ServiceAutheUnauthenticatedDisabled      951
#define UserInvalidPassword                      952
#define UserInvalidLegacyPassword                953
#define UserCannotConvertPassword                954
#define UserInvalidKerberosUsernameOrPassword    955
#define UserKerberosError                        956
#define ApplicationPasswordNotAllowed            957
#define InvalidPasswordPattern                   958
#define UserAccountIsExpired                     959
#define UserAccountIsInactive                    960
#define UserKerberosUnlicensed                   961
#define UpgradeCDClient                          962
#define NoAuthenticationEnabled                  963
#define LDAPServerUnavailable                    964
#define LDAPSearchBindFailed                     965
#define LDAPSearchFailed                         966
#define LDAPCountEntriesFailed                   967
#define LDAPUserDoesNotExist                     968
#define LDAPUserIsNotUnique                      969
#define LDAPFirstEntryFailed                     970
#define LDAPInvalidPassword                      971
#define NotALDAPUser                             972
#define NotADelegatedUser                        973
#define UserIsNotaIRISUser                       974
#define UserIsNotaCacheUser                      974
#define LDAPGetDNFailed                          975
#define LDAPGetValuesLenFailed                   976
#define AttributeValueMustBeList                 977
#define RequiresRoleForConnection                978
#define SSLConfigDoesNotExist                    979
#define UnableToActivateSSLConfig                980
#define SSLConfigInvalidName                     981
#define CipherRequireAuthe                       982
#define PrivateKeyReq                            983
#define CertificateKeyReq                        984
#define PrivateKeyReqPassword                    985
#define CAFileCAPathReq                          986
#define SSLConfigIsDisabled                      987
#define SSLHandShakeFailed                       988
#define SSLConnectionFailed                      989
#define SSLOnlyTestClient                        990
#define MustSpecifyHostAndPort                   991
#define PasswordHasExpired                       992
#define CannotModifyLDAPUser                     993
#define CannotModifyDelegatedUser                994
#define SSSSLRequired                            995
#define SSSSLNone                                996
#define OSDelegatedAuthenticationFailed          997
#define LoginTokenExpired                        998
#define UserLoginTokenExpired                    999
#define ShadowSourceNameUndefined                1000
#define ShadowSourcePortInvalid                  1001
#define ShadowJournalStoreUndefined              1002
#define ShadowStartPointUndefined                1003
#define ShadowDatabaseIsSys                      1004
#define ShadowDatabaseIsCachesys                 1004
#define ShadowDatabaseMappingUndefined           1005
#define ShadowIDInvalid                          1006
#define ShadowJournalStoreIsJournalDirectory     1007
#define ShadowMirrorAmbiguous                    1008
#define ShadowStoppedNotResumable                1010
#define ShadowLockFailed                         1012
#define ShadowIDRequired                         1013
#define ShadowIDNotExist                         1014
#define ShadowTestFailed                         1015
#define ShadowTestTimedOut                       1016
#define ShadowStopRequired                       1017
#define ShadowDatabaseSameAsSource               1018
#define ShadowVersionMismatch                    1020
#define ShadowJournalMismatch                    1021
#define ShadowConnectionDenied                   1022
#define ShadowVersionInvalid                     1023
#define ShadowGMHEAPAllocError                   1024
#define ShadowGMHEAPInsufficient                 1025
#define ShadowMessageInvalid                     1026
#define ShadowSourceNoCluster                    1027
#define ShadowSourceWrongCluster                 1028
#define ShadowAbort                              1029
#define ShadowJobFail                            1030
#define ShadowStopping                           1031
#define ShadowSuspendTimedOut                    1032
#define ShadowSourceJournalFileNotExist          1033
#define ShadowSourceJournalFileInvalid           1034
#define ShadowJournalFileCorrupt                 1035
#define ShadowFileOpenError                      1036
#define ShadowFileAheadOfSource                  1037
#define ShadowFileAddressInvalid                 1038
#define ShadowStartFileUndefined                 1039
#define ShadowSyncFailed                         1040
#define ShadowClusterStartPointUndefined         1041
#define ShadowClusterStartPointIncomplete        1042
#define ShadowLicenseInsufficient                1043
#define ShadowRunningNotResumable                1044
#define ShadowClusterCheckPointBad               1045
#define ShadowSourceJournalDisabled              1046
#define ShadowNotResumable                       1047
#define ShadowNotStartable                       1048
#define ShadowTCPOpenFailed                      1070
#define ShadowTCPReadTimedOut                    1071
#define ShadowSourceDisconnect                   1072
#define ShadowServerDisconnect                   1073
#define ShadowJobRoutineFail                     1074
#define ShadowPurgeInProgress                    1075
#define ShadowPurgeNotAvailable                  1076
#define ShadowAnswerError                        1077
#define ShadowKillJobError                       1078
#define ShadowPurgeNoSync                        1079
#define ShadowDatabaseMountError                 1080
#define ShadowSourceDatabaseNotExist             1090
#define ShadowSourceDatabaseNotMounted           1091
#define ShadowSourceDatabaseInvalid              1092
#define ShadowFileInvalidEOF                     1093
#define ShadowGotFewerData                       1094
#define JournalFileOpenForRecordFailed           1100
#define JournalFileNotExist                      1101
#define JournalFileInvalid                       1102
#define JournalFilePrevError                     1103
#define JournalFileOpenIdFailed                  1104
#define JournalFileFirstRecordInvalid            1105
#define JournalFileDeleteError                   1106
#define JournalFileSearchUndefined               1107
#define JournalFileUndefined                     1108
#define JournalFileNextNotExist                  1109
#define JournalFileNoValidRecord                 1110
#define JournalFileNextError                     1111
#define JournalFileCorruption                    1112
#define JournalFileNotInLog                      1113
#define JournalRecordFetchColumnUnknown          1120
#define JournalRecordBadDirectory                1121
#define JournalRecordBadGlobalNode               1122
#define JournalingStartError                     1140
#define JournalingStopError                      1141
#define JournalingSwitchError                    1142
#define JournalDirectoryNotExist                 1143
#define JournalDirectoryInvalid                  1144
#define JournalDirectoryCreateError              1145
#define JournalFilePrefixInvalid                 1146
#define JournalDirectoryTooLong                  1147
#define CommasInJournalPath                      1148
#define JournalUnableToGetAttributes             1149
#define JournalReadOnly                          1150
#define UserInsufficientPrivsDisableJournal      1151
#define JournalCompressionChunkSzRangeErr        1152
#define JournalFileCompressionFailed             1153
#define JournalFileDecompressionFailed           1155
#define JournalTransactionIDInvalid              1160
#define JournalTransactionStartInvalid           1161
#define ClusterJournalMarkerFileNotExist         1180
#define ClusterJournalMarkerFileNotOpen          1181
#define JrnEncRequiresStartupKey                 1197
#define JrnEncNotActivated                       1198
#define JrnEncNotDeactivated                     1199
#define DBEncKeyAlreadyActivated                 1200
#define DBEncKeyNotActivated                     1201
#define DBEncKeyFileBadFormat                    1202
#define DBEncKeyFileDoesNotMatch                 1203
#define DBEncKeyFileUserNotFound                 1204
#define DBEncKeyFileUserAlreadyExists            1205
#define DBEncKeyCreationFailed                   1206
#define DBEncKeyActivationFailed                 1207
#define DBEncDatabasesMounted                    1208
#define DBEncInvalidPassword                     1209
#define DBEncLastAdmin                           1210
#define DBEncWideUnicodeNotSupported             1211
#define DBEncKeyRequiredAtStartup                1212
#define DBEncKeyRequiredForRecovery              1213
#define DBEncKeyRequiredNow                      1214
#define DBEncKeyRequiredForRollback              1215
#define DBEncStartModeStillEnabled               1216
#define DBEncDatabasesRequired                   1217
#define AuditEncRequiresStartupKey               1218
#define DBEncKeyUnwrapFailed                     1219
#define DBEncKeyNoSpaceAvailable                 1220
#define DBEncKeyFileKeyNotFound                  1221
#define DBEncUnattendedAdmin                     1222
#define DBEncKMIPServerNotFound                  1223
#define DBEncKMIPServerConfigFailed              1224
#define DBEncKMIPCreateFailed                    1225
#define DBEncKMIPGetFailed                       1226
#define DBEncKMIPDestroyFailed                   1227
#define DBEncSysDB                               1228
#define DBEncMounted                             1229
#define DBEncLocked                              1230
#define DBEncKMIPNoStart                         1231
#define InvalidAESKeyLength                      1232
#define DBEncStartNoChange                       1233
#define DBEncStartBadKeyFile                     1234
#define DBEncKeyRequiredForAuditEncryption       1235
#define DCLockSystemFailed                       1300
#define DCDaemonNotAllowed                       1301
#define DCSystemAlreadyStarted                   1302
#define DCGlorefCollationOrder                   1303
#define DCProtocolError                          1304
#define DCInitQueueFailed                        1305
#define DCJobTimeout                             1306
#define DCJobFailure                             1307
#define DCAccessDenied                           1308
#define DCPeerTimeout                            1309
#define DCDuplicateDBMapping                     1310
#define DCConnectTimeout                         1311
#define DCFeatureNotSupportedByPeer              1312
#define DCMirrorConfig                           1313
#define DCSourceMismatch                         1314
#define DCObjectSystemName                       1315
#define DCInvalidDatabase                        1316
#define DCDuplicateGSMask                        1317
#define DCRangeListErrorStatus                   1360
#define DCRangeListCollationSet                  1361
#define DCRangeListModified                      1362
#define DCQueryInitialRefNull                    1370
#define DCQueryIdenticalRefs                     1371
#define DCQueryRefGlobalNames                    1372
#define DCWorkflowNull                           1380
#define DCWorkflowNextPhaseRange                 1381
#define DCGlobalReferenceInvalid                 1390
#define NotAKerberosUser                         1400
#define NoZauthorizeRoutine                      1401
#define NoZauthenticateRoutine                   1402
#define ZauthenticateParameter                   1403
#define CannotModifyKerberosUser                 1404
#define NotAOSUser                               1405
#define ZauthorizeParameter                      1406
#define CannotModifyOSUser                       1407
#define InvalidApplicationAuthe                  1408
#define TwoFactUserNotConfig                     1409
#define TwoFactWrongFunc                         1410
#define TwoFactTimeout                           1411
#define TwoFactBadToken                          1412
#define ProviderAlreadyExists                    1413
#define ProviderDoesNotExist                     1414
#define UserInvalidPhoneNumber                   1415
#define UserInvalidPhoneProvider                 1416
#define TwoFactInvalidConfig                     1417
#define UserAccountLoginLimit                    1418
#define GetCredentialsFailed                     1419
#define GetCredentialsNoUsername                 1420
#define UserNoPhoneProvider                      1421
#define ServiceNoMirrorAndShadow                 1422
#define AddRolesNoZINSERT                        1424
#define AppAutheUnauthenticatedDisabled          1426
#define UnableToAddOrSetAuditEvent               1427
#define StudioNoTwoFactor                        1428
#define UserInsufficentPrivForService            1429
#define NoImpliedNamespace                       1430
#define ManagerRoleRequires                      1431
#define DomainNameIsNull                         1432
#define TwoFactorPWBadToken                      1433
#define TwoFactorRequiresAuthentication          1434
#define TwoFactSMSTextNotConfig                  1435
#define TwoFactorOnlyOneEnabled                  1436
#define CannotDeleteDefaultDomain                1437
#define LDAPMustBeEnabled                        1438
#define UsernamesTooLong                         1439
#define LDAPNestedGroupsInvalidNoAD              1440
#define LDAPNestedGroupsInvalidNoGroups          1441
#define LDAPConfigIsKerberosOnly                 1442
#define LDAPGroupsNotConfigured                  1443
#define NoMultipleAndDomainChange                1444
#define PasswordChangeZAUTHFailed                1445
#define PasswordChangeFailed                     1446
#define PhoneProviderInUse                       1447
#define CannotVerifyPhoneProviderUnused          1448
#define CannotExportDatabaseRoles                1449
#define ServiceNotEnabled                        1450
#define SSLUsedByECPServer                       1451
#define SSLUsedByECPClient                       1452
#define SSLECPServerNotExist                     1453
#define SSLECPClientNotExist                     1454
#define IncorrectNamespace                       1455
#define PBKDF2AlgorithmInvalid                   1456
#define PBKDF2WorkFactorTooLow                   1457
#define IncompatibleImportVersion                1458
#define IncompatibleImportVersion1               1459
#define DelegatedMustBeEnabled                   1460
#define InvalidLoginToken                        1461
#define ZparentDoesNotMatch                      1462
#define InstanceDoesNotMatch                     1463
#define NodeNameDoesNotMatch                     1464
#define UnableToDeleteLoginToken                 1465
#define DeleteTokensOnlyAtStartup                1466
#define EMSError                                 1500
#define EMSErrBadSSLCert                         1501
#define EMSErrAlreadyConfigured                  1502
#define EMSRestrictedOnClient                    1503
#define EMSNoSMP                                 1504
#define EMSAPIException                          1505
#define MGBLAlreadyExists                        1600
#define MGBLDoesNotExist                         1601
#define MGBLStillRunning                         1602
#define MGBLCannotModify                         1603
#define MGBLUserTerminated                       1604
#define MGBLCannotOpenJournal                    1605
#define MGBLUnableToFindJournal                  1606
#define MGBLSrcAndDstSame                        1607
#define MGBLCannotCopyECPDB                      1608
#define MGBLCannotUseSystemDB                    1609
#define MGBLJournalingDisabled                   1610
#define MGBLJournalingTroubled                   1611
#define MGBLDBNotMirrored                        1612
#define MGBLUnableToSetMirrorState               1613
#define MGBLGblAlreadyExists                     1614
#define MGBLGblDoesNotExist                      1615
#define MGBLAlreadyRun                           1616
#define MGBLCannotOperateNamespace               1617
#define MGBLRoutinesAlreadySplit                 1618
#define MGBLUnableToGetDirInfo                   1619
#define MGBLCollationsDontMatch                  1620
#define MGBLMoveGlobalsJobNotStarted             1621
#define MGBLMoveGlobalAlreadyRun                 1622
#define MGBLOperationTerminated                  1623
#define MGBLStartAndEndGlobalDiffer              1624
#define MGBLStateWrong                           1625
#define MGBLUnableToLock                         1626
#define MGBLUnableToFindSFN                      1627
#define MGBLCollationChanged                     1628
#define MGBLDidNotHandleKill                     1629
#define MGBLUnhandledJrnRecord                   1630
#define MGBLCantStartJournalMonitor              1631
#define MGBLCantCalcFreespaceDismounted          1632
#define MGBLIncreaseMaxSizeOfDB                  1633
#define MGBLMovesExceedsDiskSpace                1634
#define MGBLDstDBNotConfigured                   1635
#define MGBLNewDstDBAlreadyConfigured            1636
#define MGBLGblAlreadyExistInDstDB               1637
#define MGBLDataMoveIsRunning                    1638
#define MGBLCannotFindAndDeleteRange             1639
#define MGBLInvalidMethod                        1640
#define MGBLInvalidJobMethod                     1641
#define MGBLCannotJobMethod                      1642
#define MGBLAlreadyRunning                       1643
#define MGBLAlreadyCompleted                     1644
#define MGBLUnrecoverableRollBack                1645
#define MGBLCollationDifferent                   1646
#define MGBLUnableToQuiesce                      1647
#define MGBLUnableToSuspendCompleted             1648
#define MGBLUnableToSuspendNotStarted            1649
#define MGBLUnableToSuspendJournal               1650
#define MGBLUnableToSuspendStopped               1651
#define MGBLUnableToStopCompleted                1652
#define MGBLUnableToStopNotStarted               1653
#define MGBLUnableToStopJournal                  1654
#define MGBLInvalidName                          1655
#define JournalFileForDBMissingFromMirrorLog     2000
#define FailedToReadJournalHeader                2001
#define MirrorNameNotSpecified                   2002
#define MirrorJournalLogNotFound                 2003
#define MirrorJournalLogOpenError                2004
#define MirrorJournalLogReadError                2005
#define CantModifyMirrorSetName                  2006
#define CantModifyMirrorSetGUID                  2007
#define FailedToSendRecovParams                  2008
#define SectionNotLoadedMirrorSetGUIDNotDefined  2009
#define FailedToLoadMirrorConfiguration          2010
#define NoColonInMirrorName                      2011
#define MirrorNameTooLong                        2012
#define MirrorParametersAlreadyLoaded            2013
#define BothJoinMirrorAndAsyncMemberGUIDSetAbort 2014
#define BothJoinMirrorAndAsyncMemberGUIDSet      2015
#define MirrorMemberMissingSystemName            2016
#define MirrorMemberMissingMirrorName            2017
#define MirrorMemberMissingMirrorGUID            2018
#define MirrorMemberCheckSecurityMissingService  2019
#define MirrorNameNotDefined                     2020
#define BadMirrorName                            2021
#define CannotShutdownPrimary                    2022
#define NoColonInMirrorSystemName                2023
#define MirrorSystemNameTooLong                  2024
#define LoadAsyncMemberIDsMirrorNameNotConfig    2025
#define SSLCNAlreadyInUse                        2026
#define SSLCNCannotBeNull                        2027
#define MirrorConfigMissingRequiredParameter     2028
#define MirrorAsyncMemberNotConfigured           2029
#define MissingMirrorSetNameForUpdate            2030
#define QueryListMissingMirrorSetName            2031
#define MirrorSetNameNotFound                    2032
#define MirrorNameNotUnique                      2033
#define FailedToAllocateMirrorStructure          2034
#define DuplicateMirrorNameOrGUID                2035
#define FailedToLoadMirrorConfig                 2036
#define FailedToRetrieveMirrorConfig             2037
#define NoColonInMirrorMemberName                2038
#define MirrorMemberNameTooLong                  2039
#define MirrorSetNameNotDefined                  2040
#define LoadAllMirrorSetMembersAlreadyRun        2041
#define LocalSystemNotInMirrorConfig             2042
#define ConnectFailedToAddNewMirrorMember        2043
#define ArgumentIsNotAnObject                    2044
#define FailedToAddMirrorMember                  2045
#define MirrorMemberGUIDNotUnique                2046
#define BaseDirectoryMismatch                    2047
#define FailedToAddMirrorMemberIndex             2048
#define MirrorInsufficientPrivs                  2049
#define MirrorConfigNotLoaded                    2050
#define MirrorSetNameNotConfigured               2051
#define MirrorManagerDmnFailedToStart            2052
#define FailedToCreateMirrorJournalLog           2053
#define FailedToDeleteMirrorJournalLog           2054
#define MirrorPurgeStartFileNotFound             2055
#define MirrorVIPNotValid                        2056
#define MirrorVIPInterfaceNotExist               2057
#define MirrorDatabaseNameMissing                2058
#define MirrorDatabaseNameTooLong                2059
#define NoColonInMirrorDatabaseName              2060
#define MirrorDatabaseNameNotUnique              2061
#define FailedToCheckDupliateMirrorDatabaseName  2062
#define DatabaseAlreadyMirrored                  2063
#define RemoveDatabaseFailedDBNotMirrored        2064
#define CreateMirrorGenericError                 2065
#define MirrorServiceNotEnabled                  2066
#define SSLConfigRequiredButMissing              2067
#define SSLConfigExistsButNotEnabled             2068
#define SSLConfigurationServerClientNameMismatch 2069
#define MirrorVIPNotUnique                       2070
#define RetrieveMirrorConfigError                2071
#define CharacterSizeMismatch                    2072
#define MirroredDatabaseNotFoundOnSystem         2073
#define NotInMirror                              2074
#define OtherFailoverMemberNotDefinedOrFound     2075
#define RetrieveMirrorMemberError                2076
#define ForceBecomePrimaryFailed                 2077
#define MirroredDBAlreadyActivated               2078
#define ActivateMirroredDBFailed                 2079
#define RemoveMirroredDBFailed                   2080
#define NotFailoverMember                        2081
#define PrimaryNotConnected                      2082
#define InstanceLookupFail                       2083
#define JoinMirrorGenericError                   2084
#define VIPNoSubnetMask                          2085
#define AgentUnreachable                         2086
#define MirrorChannelUnreachable                 2087
#define ECPChannelUnreachable                    2088
#define BadVAI                                   2089
#define VirtualInterfaceIsNull                   2090
#define GetSSLDNFailed                           2091
#define EncrDBReqSSL                             2092
#define MirrorInsufficientShutdownPrivs          2093
#define MirrorConnDisconnectFailed               2094
#define MirrorSSLValidationTrouble               2095
#define MirrorVIPNotReachable                    2096
#define MirrorVIPSubnetMismatch                  2097
#define MirrorPurgeStartInvalid                  2098
#define MirrorLicenseInsufficient                2099
#define MirrorSetMemberOpenFailed                2100
#define MirrorSetNameNotUnique                   2101
#define NoMirrorDBInFailover                     2102
#define NoMirrorDBInPrimary                      2103
#define NewMirrorDBFailed                        2104
#define MirrorDBNotNew                           2105
#define MirrorAlreadyStarted                     2106
#define MirrorNotStarted                         2107
#define MirrorsOpenFailed                        2108
#define TooManyMirrorsOnFailoverMember           2109
#define AlphaNumericsOnlyInMirrorName            2110
#define FailedToReadMirrorMemberInfo             2111
#define DeleteOperationNotAllowed                2112
#define OperationOnPrimaryOnly                   2113
#define FailedToOpenMapMirrors                   2114
#define ClearFailoverDBFlagNotAllowed            2115
#define OperationNotAllowedInPrimary             2116
#define NotDRMember                              2117
#define LocalAgentNotUp                          2118
#define TooManyMirrorSet                         2119
#define RelayClientNotAllowed                    2120
#define FailoverNoAgent                          2121
#define FailToCreateMapMirrors                   2122
#define GUIDMismatch                             2123
#define SelectedNotFound                         2124
#define MismatchedPrimary                        2125
#define DefinedPrimaryFailed                     2126
#define TellPrimaryFailed                        2127
#define AgentUnreachableNoDetails                2128
#define JournalRequiredForMirroredDB             2129
#define RemoveDatabaseFailedDBNotMounted         2130
#define RelayServerNotAllowed                    2131
#define NeedVIPInterface                         2132
#define TooFewFailoverMember                     2133
#define OtherMirrorSetExisted                    2134
#define AgentGetVersionFailed                    2135
#define AgentVersionInvalid                      2136
#define TooManyFailoverMember                    2137
#define EMSManaged                               2138
#define RemoteEMSManaged                         2139
#define MismatchUNICODE                          2140
#define MismatchSystemName                       2141
#define BadAsyncMemberType                       2142
#define ClearFailoverDBFlagOnNonactvatedDB       2146
#define ClearFailoverDBFlagFailed                2147
#define DefaultMirrorSystemNameTooLong           2148
#define TooManyMirrorOnDR                        2149
#define RelayNotAllowedForDR                     2150
#define EncJrnNotAllowed                         2151
#define EncJrnNoUseSSL                           2152
#define NotAReportingMember                      2153
#define DejournalAlreadyRunning                  2154
#define DemoteNoPartnerWithPrimary               2155
#define DemoteFailedInPromote                    2156
#define PrimaryInTrouble                         2157
#define OnlyAllowedOnReportingMember             2158
#define NotTrackingAnyMirrors                    2159
#define NotTrackingMirror                        2160
#define MissingMirrorNameTrackingMultipleMirrors 2161
#define AgentPortUnavailable                     2162
#define AgentInterfaceUnavailable                2163
#define AgentStatusResponseInvalid               2164
#define NotAsyncMember                           2165
#define OnlyAllowedOnAsyncMember                 2166
#define MirrorDatabaseNameInvalid                2167
#define MirrorBackupNotExit                      2168
#define MirrorMasterNotExit                      2169
#define NoFilterCodes                            2170
#define MirrorNameContainsIllegalCharacter       2171
#define NonFailoverDBIsNotAllowed                2172
#define LocalValidationFailureBlocksMirrorEdit   2173
#define MirrorJoinFileExisted                    2174
#define DNIsTooLong                              2175
#define NoPromoteNoPartner                       2176
#define NoJoinNoPartner                          2177
#define BusyPromoteDemote                        2178
#define MirrorShutdownFailed                     2179
#define MissingPartner                           2180
#define InvalidIPAddress                         2181
#define InvalidHostName                          2182
#define InvalidArbiterAddr                       2183
#define ArbiterAddrTooLong                       2184
#define MissingMirrorDBNameInDB                  2185
#define MissingMirrorSetNameInDB                 2186
#define LocalMemberIsNotFailover                 2187
#define DemoteSelfNoPrimary                      2188
#define NoPendingDNMatched                       2189
#define AsyncIPUnReachable                       2190
#define MirrorInCrashStart                       2191
#define MirrorInCrashStop                        2192
#define NoCAConfigured                           2200
#define CSRNotFound                              2201
#define CertificateNotFound                      2202
#define PrivateKeyFileNotFound                   2203
#define CSRCreationFailed                        2204
#define CertificateCreationFailed                2205
#define SubjectDNRequired                        2206
#define PrivateKeyPasswordRequired               2207
#define PasswordNoQuotationMarks                 2208
#define PythonRuntimeNotFound                    2600
#define PythonImportFailed                       2601
#define PythonDispatchError                      2602
#define PythonGeneralError                       2603
#define PythonPipInstallFailed                   2604
#define MLGeneralError                           2800
#define MLNoMetadataAvailable                    2801
#define MLCannotCreateDataframe                  2802
#define MLMissingProvider                        2803
#define MLUnknownPrediction                      2804
#define MLNoSuchPredictedColumn                  2805
#define MLUnknownProvider                        2806
#define MLInvalidTrainKey                        2807
#define MLMissingTrainedModel                    2808
#define MLInvalidModelState                      2809
#define MLWithColumnsMismatch                    2810
#define MLModelNotTrained                        2811
#define MLTrainingFailed                         2812
#define MLTrainingIsComplete                     2813
#define MLUnexpectedParameter                    2814
#define MLInvalidUsingParameter                  2815
#define MLNoDataSupplied                         2816
#define MLNoPredictionResults                    2817
#define MLInternalError                          2818
#define MLInvalidSettingsClass                   2819
#define MLTrainingRunLock                        2820
#define MLValidationRunLock                      2821
#define MLProviderUnavailable                    2822
#define MLConfigurationNotFound                  2823
#define MLMissingParameter                       2824
#define MLCannotDeleteDefaultConfig              2825
#define MLNotLicensed                            2826
#define MLNoFeatures                             2850
#define MLNoIDColumn                             2851
#define MLNoProbInRegression                     2852
#define MLPosLabelNotFound                       2853
#define MLPosLabelNeeded                         2854
#define MLNoPosLabelInRegression                 2855
#define MLLabelNotFound                          2856
#define MLLabelOnlyOneValue                      2857
#define MLDRAPITokenNotSpecified                 2870
#define MLDRAPIInvalidEndpoint                   2871
#define MLDRCannotCreateCSV                      2872
#define MLDRInvalidProjectId                     2873
#define MLDRInvalidDeploymentId                  2874
#define MLDRDeploymentFailed                     2875
#define MLDRInvalidDeployment                    2876
#define MLDRPredictionFailed                     2877
#define MLDRAPIInvalidResult                     2878
#define GeneralError                             5001
#define ObjectScriptError                        5002
#define CacheError                               5002
#define NotImplemented                           5003
#define CanNotGenerateUUID                       5004
#define FileCanNotOpen                           5005
#define FileNameInvalid                          5006
#define DirectoryNameInvalid                     5007
#define FileNameRequired                         5008
#define DirectoryNameRequired                    5009
#define FileAlreadyOpen                          5010
#define FileNotOpen                              5011
#define FileDoesNotExist                         5012
#define CannotGenerateTypeLibrary                5013
#define FeatureNotSupported                      5014
#define NamespaceDoesNotExist                    5015
#define TooManyErrors                            5017
#define RoutineDoesNotExist                      5018
#define FileCanNotDelete                         5019
#define FileCanNotRename                         5020
#define DirectoryNotExist                        5021
#define DataMissing                              5022
#define RemoteGatewayError                       5023
#define FileCanNotCopy                           5024
#define InvalidConnectionName                    5025
#define InvalidECPCliAction                      5026
#define FileAlreadyExists                        5027
#define InvalidRoutineName                       5028
#define UnableToKill                             5029
#define ErrorCompilingClass                      5030
#define CannotJobRoutine                         5031
#define DirectoryCannotCreate                    5032
#define Interrupt                                5033
#define InvalidStatusCodeStruct                  5034
#define GeneralException                         5035
#define SMPQueryHistoryLockFailed                5036
#define DirectoryPermission                      5037
#define ErrorCompilingGenerator                  5038
#define ErrorCallingFunction                     5039
#define CannotCopyFileFromTo                     5040
#define UnableToExecuteJava                      5041
#define UnableToExecuteZF                        5042
#define JarFileDoesNotExist                      5043
#define JavaException                            5044
#define JavaUnknownError                         5045
#define ErrorExecutingJavaCommand                5046
#define BadParameterEncode                       5047
#define BadJavaVersion                           5048
#define UnsupportedJavaVersion                   5049
#define ConstraintNameInvalid                    5050
#define ClassAlreadyExist                        5051
#define DuplicatedName                           5052
#define ClassNameInvalid                         5053
#define MethodNameInvalid                        5054
#define ParameterNameInvalid                     5055
#define PropertyNameInvalid                      5056
#define StorageNameInvalid                       5057
#define TriggerNameInvalid                       5058
#define MethodNameConflict                       5059
#define ParameterNameConflict                    5060
#define PropertyNameConflict                     5061
#define StorageNameConflict                      5062
#define TriggerNameConflict                      5063
#define KeyNameInvalid                           5064
#define KeyNameConflict                          5065
#define IndexNameInvalid                         5066
#define IndexNameConflict                        5067
#define QueryNameInvalid                         5068
#define QueryNameConflict                        5069
#define ClassNameConflict                        5070
#define ConstraintNameConflict                   5071
#define ConstraintSQLNameConflict                5072
#define XMLNameConflict                          5073
#define XMLNameInvalid                           5074
#define ClassDictionaryVersionMismatch           5075
#define KeyNameTooLong                           5076
#define IndexNameTooLong                         5077
#define MethodNameTooLong                        5078
#define PropertyNameTooLong                      5079
#define ParameterNameTooLong                     5080
#define QueryNameTooLong                         5081
#define StorageNameTooLong                       5082
#define StoredProcedureNameConflict              5083
#define PackageNameInvalid                       5084
#define PackageNameTooLong                       5085
#define MethodTooLarge                           5086
#define ProjectionClassRequired                  5087
#define ProjectionClassDoesNotExist              5088
#define ProjectionClassNotSub                    5089
#define ProjectionCreateError                    5090
#define ProjectionRemoveError                    5091
#define ClassCaseConflict                        5092
#define PackageCaseConflict                      5093
#define MemberNameConflict                       5094
#define ClassDescriptorConflict                  5095
#define ClassNameToLong                          5096
#define PropertyCollationInvalid                 5097
#define ConstraintNameTooLong                    5098
#define ProjectCaseConflict                      5099
#define SQLNameConflict                          5100
#define ClassNameRequired                        5101
#define EnvironmentKeywordRequired               5102
#define MethodNameRequired                       5103
#define ParameterNameRequired                    5104
#define PropertyNameRequired                     5105
#define StorageKeywordRequired                   5106
#define StorageNameRequired                      5107
#define TriggerNameRequired                      5108
#define LibraryNameRequired                      5109
#define QueryNameRequired                        5110
#define KeyNameRequired                          5111
#define IndexNameRequired                        5112
#define XMLNameRequired                          5113
#define PackageNameRequired                      5114
#define ClassDictionaryVersionTooHigh            5115
#define OneClassDictionaryVersionMismatch        5116
#define ElementSameNameInCase                    5117
#define SchemaConflict                           5118
#define PackageConflictRS                        5119
#define ClassDescriptorBig                       5120
#define ParameterValueTooLong                    5121
#define IndexSqlNameNotUnique                    5122
#define MethodEntryNotFound                      5123
#define AliasPropertyConflict                    5124
#define InvalidExportVersion                     5125
#define ExportVersionNotSupported                5126
#define ExportKeywordNotPresent                  5127
#define ExportSqlInvalidCategory                 5128
#define ExportInvalidChar                        5129
#define InvalidCharInMember                      5130
#define QueryDependentChange                     5131
#define ParamNotConfig                           5132
#define ParamNotSetable                          5133
#define ExportIndexCollatedKey                   5134
#define MVPolymorphic                            5135
#define MVCollectionClassname                    5136
#define AliasAliasConflict                       5137
#define ErrorCompilingMAC                        5138
#define ErrorLoadingFile                         5139
#define DictionaryKeywordTypeInvalid             5149
#define DictionaryKeywordValueInvalid            5150
#define ClassAttributeKeywordInvalid             5151
#define EnvironmentKeywordInvalid                5152
#define MethodAttributeKeywordInvalid            5153
#define ParameterAttributeKeywordInvalid         5154
#define PropertyAttributeKeywordInvalid          5155
#define TriggerAttributeKeywordInvalid           5156
#define ClassKeywordTypeInvalid                  5157
#define MethodKeywordTypeInvalid                 5158
#define ParameterKeywordTypeInvalid              5159
#define PropertyKeywordTypeInvalid               5160
#define TriggerKeywordTypeInvalid                5161
#define MethodKeywordValueInvalid                5162
#define PropertyKeywordValueInvalid              5163
#define KeyAttributeKeywordInvalid               5164
#define KeyKeywordTypeInvalid                    5165
#define KeyKeywordValueInvalid                   5166
#define IndexAttributeKeywordInvalid             5167
#define IndexKeywordTypeInvalid                  5168
#define IndexKeywordValueInvalid                 5169
#define QueryAttributeKeywordInvalid             5170
#define QueryKeywordTypeInvalid                  5171
#define QueryKeywordValueInvalid                 5172
#define PropertyColumnNbrInvalid                 5173
#define XMLAttributeKeywordInvalid               5174
#define XMLKeywordTypeInvalid                    5175
#define ClassKeywordValueInvalid                 5176
#define IndexPropertyCollationInvalid            5177
#define IndexDataPropertyInvalid                 5178
#define PropertyColumnNbrNotUnique               5179
#define PropertyStreamInitialInvalid             5190
#define ParseTreeInvalid                         5201
#define NothingToCompile                         5202
#define ParserError                              5203
#define IndexTypeClassInvalid                    5250
#define MethodCanNotChangeFinal                  5251
#define ParameterCanNotChangeFinal               5252
#define PropertyCanNotChangeFinal                5253
#define SuperClassIsFinal                        5254
#define PropertyMethodCanNotOverrideFinal        5255
#define BehaviorCanNotReplaceFinal               5256
#define KeyCanNotOverride                        5257
#define IndexCanNotOverride                      5258
#define QueryTypeCanNotBeChanged                 5259
#define QueryCanNotChangeFinal                   5260
#define QueryMethodCanNotOverrideFinal           5261
#define QuerySQLViewParameterInvalid             5262
#define QuerySQLViewNotSQL                       5263
#define PropertySQLComputeOnChangeInvalid        5264
#define CanNotChangeFinalKeyword                 5265
#define PropertyMultipleDependentRelationships   5266
#define XMLCanNotChangeFinal                     5267
#define XMLMethodCanNotOverrideFinal             5268
#define MemberMethodCanNotOverrideFinal          5269
#define CompositeMethodNameConflict              5270
#define MemberCannotOverride                     5271
#define MemberCannotChangeFinal                  5272
#define AliasLoopDetected                        5273
#define AliasMethodNotFound                      5274
#define AliasSignatureMismatch                   5275
#define AliasClassNotSuperclass                  5276
#define RelationshipDependentNotRoot             5277
#define VersionPropertyNotDefined                5278
#define VersionPropertyRedefined                 5279
#define NoCalculaltedCollection                  5280
#define ClassMultipleIdentities                  5281
#define PropertyIdentityIsCollection             5282
#define PropertyIdentityNotInteger               5283
#define IndexIdNotBasedOnIdentity                5284
#define PropertySQLComputeCodeMissing            5285
#define ClassTypeCannotOverride                  5286
#define TooManyInstanceVariables                 5287
#define SkipQueued                               5288
#define DependentNotCompiled                     5289
#define MaxClassElement                          5290
#define MaxClassDepth                            5291
#define ClsAlreadyCompiled                       5292
#define DependentDeployedNotCompiled             5293
#define NotCompiledDeploy                        5294
#define MethodMissingCallTag                     5301
#define MethodMissingCode                        5302
#define MethodMissingExpression                  5303
#define MethodMissingGenerator                   5304
#define MethodMissingName                        5305
#define ParameterMissingName                     5306
#define PropertyMissingName                      5307
#define QueryMissingName                         5308
#define QueryMissingType                         5309
#define MethodSQLProcClassMethod                 5310
#define MethodSQLProcContextParameterInvalid     5311
#define ConstraintMissingName                    5312
#define ProjectionMissingType                    5313
#define MethodCodeMissing                        5314
#define MemberMethodCodeMissing                  5315
#define ClassDependencyUsesLoop                  5316
#define ClassDependencyParentSystem              5317
#define ClassDependencyDependOnLoop              5318
#define PropertyTypeRecursion                    5319
#define MultipleRowVersion                       5320
#define RelationshipOnDeleteInvalid              5330
#define PropertyOnDeleteInvalid                  5331
#define IndexMultipleShardKey                    5332
#define IndexShardKeyConditional                 5333
#define IndexShardHasData                        5334
#define IndexShardNotRootExtent                  5335
#define PropertyCollectionCounterInvalid         5349
#define ClassLockEscalate                        5350
#define ClassDoesNotExist                        5351
#define ClassNotUpToDate                         5352
#define ClassDependencyUnresolved                5353
#define CircularInheritanceDetected              5354
#define MethodGeneratorDependencyUnresolved      5355
#define CompiledStorageClassDoesNotExist         5356
#define ClassDependencyParentChildUnresolved     5357
#define MethodLanguageInvalidSQLProc             5358
#define InvalidGeneratorLang                     5359
#define ClassIsStub                              5360
#define MemberMethodDefined                      5361
#define NoMemberMethodDefined                    5362
#define MemberMethodOverridden                   5363
#define PredecessorClassUndef                    5364
#define CollectionTableNameNotUnique             5365
#define RoutinePlacementDependencyUnresolved     5367
#define ClassShutdown                            5368
#define ClassInCompile                           5369
#define MethodGeneratorDoesNotExist              5370
#define ClassSharedLockFailed                    5371
#define ClassExclusiveLockFailed                 5372
#define PredecessorClassDoesNotExist             5373
#define InvalidClassDescriptor                   5374
#define InstanceUseInClassMethod                 5375
#define NoSuchMethodorProp                       5376
#define CallInstanceMethodFromClassMethod        5377
#define ClassDeployed                            5378
#define CanNotCompileDeployedClass               5379
#define PredecessorClassDeployed                 5380
#define CanNotExportDeployedClass                5381
#define CanNotEditDeployedClass                  5382
#define SQLMapFinal                              5383
#define SQLMapKeywordFinal                       5384
#define SQLMapDataNodePieceUsed                  5385
#define InvalidSuper                             5386
#define InvalidSuperAbstract                     5387
#define ClassProtectLock                         5388
#define SuperNotIsA                              5389
#define ClassDependencyPredecessorUnresolved     5390
#define ClassDependencyNestedError               5391
#define NoSuchMethod                             5392
#define NoPropInClassMethod                      5393
#define ClassDependencySysLevel                  5394
#define InvalidRtnMethodCall                     5395
#define ClassDescriptorTooBig                    5396
#define CompileProtect                           5397
#define ClassLockTableFull                       5398
#define ClassCanNotCompileForNotUpToDate         5399
#define PropertyStoredMultiple                   5400
#define ActionTypeInvalid                        5401
#define CacheDirectMapInvalid                    5402
#define ClientDataTypeInvalid                    5403
#define CodeModeReturnedByGeneratorInvalid       5404
#define CollectionTypeInvalid                    5405
#define StorageEnvironmentDefaultInvalid         5406
#define IDCardinalityInvalid                     5407
#define IDCounterInvalid                         5408
#define IDDependencyInvalid                      5409
#define IDKeyInvalid                             5410
#define IDKeyColumnInvalid                       5411
#define IDKeyPropertyInvalid                     5412
#define IdentityTypeInvalid                      5413
#define IndexAttributeInvalid                    5414
#define KeyInvalid                               5415
#define KeyPropertyInvalid                       5416
#define MethodCodeModeInvalid                    5417
#define PropertyTypeInvalid                      5418
#define ReferenceTypeInvalid                     5419
#define StorageAliasInvalid                      5420
#define StorageDefinitionInvalid                 5421
#define NoContextUsageInvalid                    5422
#define StorageNoDataMapsDefined                 5423
#define StorageNameNotSpecified                  5424
#define PropertyParameterNotDeclared             5425
#define PropertyTypeCanNotBeChanged              5426
#define RoutineCompilationError                  5427
#define StorageClassNotSpecified                 5428
#define StorageNotDefined                        5429
#define TriggerNotDefined                        5430
#define QueryParameterNotDeclared                5431
#define QueryRowSpecTypeInvalid                  5432
#define ODBCTypeInvalid                          5433
#define SQLCategoryInvalid                       5434
#define StorageInvalidStructure                  5435
#define StorageInvalidDependency                 5436
#define StorageInvalidLiteral                    5437
#define StorageInvalidSymbol                     5438
#define StorageUndefinedSymbol                   5439
#define SerialInvalidDependency                  5440
#define StorageSymbolUndefined                   5441
#define StorageDataSubscriptConflict             5442
#define IndexMultipleIdKey                       5443
#define IndexMultiplePrimaryKey                  5444
#define IndexMultipleExtent                      5445
#define IndexIdKeyConditional                    5446
#define IndexPrimaryKeyConditional               5447
#define IndexExtentConditional                   5448
#define IndexIdKeyHasData                        5449
#define IndexExtentHasData                       5450
#define IndexExtentHasProperties                 5451
#define IndexExtentIsKey                         5452
#define DatatypeCanNotHaveProperties             5453
#define ExtentSpecAttributeInvalid               5454
#define TriggerEventInvalid                      5455
#define TriggerEventRequired                     5456
#define TriggerTimeInvalid                       5457
#define TriggerTimeRequired                      5458
#define TriggerOrderRequired                     5459
#define TriggerCodeRequired                      5460
#define InvalidStreamType                        5461
#define InvalidStreamStorageValue                5462
#define ForeignKeyAttributeInvalid               5463
#define ForeignKeyTargetClassInvalid             5464
#define ForeignKeyTargetKeyInvalid               5465
#define InvalidErrorCode                         5466
#define InvalidErrorName                         5467
#define IndexTypeInvalid                         5468
#define ViewCanNotHaveProperties                 5469
#define IndexUniqueCollationOverridden           5470
#define IndexBitMapUnique                        5471
#define IndexBitMapHasData                       5472
#define ConstraintParameterNotDeclared           5473
#define IDExternalCounterInvalid                 5474
#define RoutineCompilationErrorWithInfo          5475
#define CompilationSignatureMismatch             5476
#define KeywordSignatureError                    5477
#define KeywordTypeSignatureError                5478
#define IndexIdKeyRequired                       5479
#define MemberParameterNotDeclared               5480
#define InvalidClassStorageDefn                  5481
#define InvalidClassStorage                      5482
#define InvalidSubnodeCollection                 5483
#define NoBitmapForDependent                     5484
#define NoBitmapForIDAttribute                   5485
#define MethodLanguageInvalid                    5486
#define QueryRowspecFormatInvalid                5487
#define FormalSpecFormatInvalid                  5488
#define IndexIdkeyAbstract                       5489
#define ErrorRunningGenerator                    5490
#define RelationshipInvalidTypeCategory          5491
#define RelationshipCardinalityInvalid           5492
#define RelationshipCardinalityRequired          5493
#define RelationshipCardinalityMismatch          5494
#define RelationshipInverseRequired              5495
#define RelationshipInverseNotDefined            5496
#define RelationshipInverseMismatch              5497
#define RelationshipRelatedClassNotCompiled      5498
#define RelationshipError                        5499
#define FormalArgTypeInvalid                     5500
#define InvalidPropertySlot                      5501
#define SQLTableCompileError                     5502
#define FieldNameInvalid                         5503
#define ParentColumnInvalid                      5504
#define SQLTableParentInvalid                    5505
#define SQLCounterInvalid                        5506
#define SQLIdentityTableInvalid                  5507
#define SQLMapDataFieldInvalid                   5508
#define SQLMapRowIDFieldInvalid                  5509
#define SQLMapSubscriptInvalid                   5510
#define SQLMapTypeInvalid                        5511
#define SQLReferenceTargetInvalid                5512
#define MapExpressionMustBeField                 5513
#define MapExpressionUnknownField                5514
#define TableAlreadyExists                       5515
#define TableDoesNotExist                        5516
#define TableNotFound                            5517
#define TableIDDoesNotExist                      5518
#define SQLParentTableInvalid                    5519
#define TableReferenceInvalid                    5520
#define SQLError                                 5521
#define SQLParentTableNotExported                5522
#define TableNameInvalid                         5523
#define InvalidCurlyBraceField                   5524
#define ViewNotFound                             5525
#define BadReference                             5526
#define SQLPrivilege                             5527
#define SQLDelimitedIDOff                        5528
#define SQLIdentifierReserved                    5529
#define SQLBadLogin                              5530
#define SQLMGRMissingClass                       5531
#define GTWCConnectionError                      5532
#define GTWCAllocationError                      5533
#define GTWCColumnsError                         5534
#define GTWCTablesError                          5535
#define GTWCPrimaryKeysError                     5536
#define StreamMoveToError                        5537
#define SQLMapVarsMissingDataExpression          5538
#define SQLMapVarsMissingName                    5539
#define SQLCode                                  5540
#define MapExpressionUnknownFieldLoc0            5541
#define MapExpressionUnknownFieldLoc1            5542
#define MapExpressionUnknownFieldLoc2            5543
#define MapExpressionUnknownFieldLoc25           5544
#define MapExpressionUnknownFieldLoc3            5545
#define MapExpressionUnknownFieldLoc4            5546
#define MapExpressionUnknownFieldLoc5            5547
#define MapExpressionUnknownFieldLoc6            5548
#define MapExpressionUnknownFieldLoc7            5549
#define SQLInvalidLanguageDT                     5550
#define StorageDefaultDataNotList                5551
#define StorageInvalidParent                     5552
#define IDPropertyCollationInvalid               5553
#define DatatypeParameterIntegerNotPositive      5554
#define InorrectIntegerFormat                    5555
#define ForeignKeyCardinalityInvalid             5556
#define IndexBitSliceMultiple                    5557
#define IndexSubValueNoMethod                    5558
#define ClassDefinitionError                     5559
#define NoSaveReadOnlyMethod                     5560
#define IndexNoProperty                          5561
#define IndexSubValueUnique                      5562
#define DatatypeParameterScaleIncorrect          5563
#define StorageReferenceInUse                    5564
#define StorageReferenceRegistrationError        5565
#define LibReadOnly                              5566
#define ClassDatabaseReadOnly                    5567
#define DatatypeParameterCurrencyScale           5568
#define DatatypeParameterScaleNegative           5569
#define ExtentDatabaseReadOnly                   5570
#define NotInheritableProperty                   5571
#define SecondaryRelationship                    5572
#define RelationshipNCardinalityReq              5573
#define ErrorRunningParamGenerator               5574
#define IndexSerialPropertyPrivate               5575
#define MetaDataNotCreated                       5576
#define MetaDataCall                             5577
#define MetaDataNoMethod                         5578
#define MetaDataBadCodeMode                      5579
#define SQLPrivilege2                            5580
#define SQLBuildPurgeIndex                       5581
#define SQLGrantSamples                          5582
#define SQLMapDataNodeInvalid                    5583
#define SQLGrantDocbook                          5584
#define SQLRowIDSpecsNoCreate                    5585
#define SystemSQLInvalidArgumentValue            5586
#define SystemSQLInvalidArgumentValue2           5587
#define SystemSQLInvalidArgumentValue3           5588
#define SystemSQLInvalidArgumentValue4           5589
#define NumberOfTuplesLockFailed                 5590
#define SystemSQLInvalidArgumentValue5           5591
#define ParallelSplitError                       5592
#define ParallelSplitUnknownError                5593
#define SQLBuildPurgeIndexForRow                 5594
#define ShardTableFeatureNotSupported            5595
#define MapMissingGlobalName                     5596
#define ShardKeyIdKeyMismatch                    5597
#define StorageNotSupportedForSharding           5598
#define ShardClassMustBePersistent               5599
#define ShardClassUnsupportedFeature             5600
#define NoClassContext                           5601
#define SuperClassNotResolved                    5602
#define InstanceVariableDoesNotExist             5603
#define InstanceVariableDoesNotSupportArray      5604
#define ClassContextForInstanceVariableInvalid   5605
#define SuperUsageInvalid                        5606
#define ReferenceVariableDoesNotExist            5607
#define ReferenceVariableDoesNotSupportArray     5608
#define PrivateClassMethod                       5609
#define ReferenceMacroNotDefine                  5610
#define FunctionMacroMissingArg                  5611
#define MacroMissingRightParen                   5612
#define TooManyMacroArguments                    5613
#define NotEnoughMacroArguments                  5614
#define NoClosingParen                           5615
#define NoKeywordOpenParen                       5616
#define InvalidKeyword                           5617
#define NoKeywordCloseParen                      5618
#define InvalidKeywordArgument                   5619
#define KeywordFieldNameMissing                  5620
#define KeywordNoSuchTable                       5621
#define KeywordNoSuchField                       5622
#define KeywordUniqueInvalidArg                  5623
#define KeywordUniqueNoPrevious                  5624
#define DefineMissingMacroName                   5625
#define DefineNoClosingParen                     5626
#define DefineOneArgMultipleArg                  5627
#define DefineMacroArgNoPercent                  5628
#define DefineArgHasBadCharacter                 5629
#define ContinueWithNoMoreLines                  5630
#define NoPreceedingIf                           5631
#define IfOrElseIfMissingArg                     5632
#define IfInvalidArg                             5633
#define IfdefMissingMacroName                    5634
#define NoSuchIncludeFile                        5635
#define NoSuchLibraryFile                        5636
#define NoSuchLibraryVersion                     5637
#define SqlCompileBadMode                        5638
#define FunctionError                            5639
#define DuplicateRoutineSpec                     5640
#define RoutineSpecAfterSQL                      5641
#define RoutineSpecInvalid                       5642
#define RoutineRefNested                         5643
#define RoutineRefInvalid                        5644
#define NameConflict                             5645
#define ExpressionError                          5646
#define InvalidMacroName                         5647
#define InvalidUseOfFunction                     5648
#define TooManyMacroReferences                   5649
#define BadSQLSyntax                             5650
#define PropertyNotExecutable                    5651
#define MethodCannotSet                          5652
#define CompiledClassDoesNotExist                5653
#define MethodDoesNotExist                       5654
#define ParameterDoesNotExist                    5655
#define PropertyDoesNotExist                     5656
#define MethodHasNoReturnValue                   5657
#define ObjectInstanceRequired                   5658
#define PropertyRequired                         5659
#define QueryDoesNotExist                        5660
#define CollectionPropertyRequired               5661
#define RelationshipChildRequired                5662
#define NotSupportedInDeferredMode               5663
#define IvarInClassMethod                        5664
#define MPPFunctionError                         5665
#define NoSQLReverseMarker                       5666
#define MissingRequiredName                      5701
#define MissingLeftParen                         5702
#define MissingRightParen                        5703
#define NoEqualSignAfterSetLeft                  5704
#define UnbalancedQuotes                         5705
#define UnbalancedParentheses                    5706
#define UnbalancedBeginlitEndlit                 5707
#define UnexpectedElse                           5710
#define UnexpectedElseif                         5711
#define UnexpectedEndif                          5712
#define UnexpectedEndOfLine                      5720
#define UnexpectedEndOfFile                      5721
#define IncorrectDelimiter                       5730
#define InvalidExternalPackage                   5731
#define MacroNestingLimitExceeded                5732
#define NoPreviousNew                            5733
#define NoEmbeddedFile                           5734
#define Compiling                                5740
#define CompileComplete                          5741
#define IntFileFail                              5742
#define MacFileFail                              5743
#define ModuleSizeExceeded                       5744
#define CompileFailed                            5745
#define NoSplitCodeBlock                         5746
#define NoSplitLanguage                          5747
#define NoCurrentClassContext                    5748
#define PersistentProtect                        5750
#define MethodNotAccessible                      5751
#define ClassIsAbstract                          5752
#define AbstractClassNotInstantiable             5753
#define DatatypeClassNotInstantiable             5754
#define ObjectNotRegistered                      5755
#define ProcedureNameInvalid                     5756
#define ProcedureNotFound                        5757
#define MethodNotImplemented                     5758
#define PropertyReadOnly                         5759
#define FailedToOpenClass                        5760
#define FailedToNewClass                         5761
#define ClassIsReadOnly                          5762
#define FailedToCreateEmbeddedObject             5763
#define DeleteExtentObjectsRemain                5764
#define SyncDiffLocales                          5765
#define InvalidTableName                         5766
#define TableNameExists                          5767
#define ClassNameExists                          5768
#define LinkingError                             5769
#define KeyValueNotFoundOpen                     5770
#define KeyValueNotFoundDelete                   5771
#define ReadOnlyCollection                       5772
#define IdentityInsertOff                        5773
#define CounterPropertyReset                     5774
#define InheritLock                              5775
#define ConstructIndicesBAT                      5776
#define ClassIsSharded2                          5777
#define DatatypeValidationError                  5794
#define LockFailedForeignKey                     5795
#define LockFailedKey                            5796
#define KeyNotFound                              5797
#define LockFailedExtent                         5798
#define LockFailedExtentShared                   5799
#define ConcurrencyVersionMismatch               5800
#define CanNotSetSerial                          5801
#define DatatypeValidationFailed                 5802
#define LockFailedToAcquireExclusive             5803
#define LockFailedToAcquireRead                  5804
#define IDKeyNotUnique                           5805
#define LockTypeInvalid                          5806
#define OrefInvalid                              5807
#define KeyNotUnique                             5808
#define LoadObjectNotFound                       5809
#define DeleteObjectNotFound                     5810
#define LoadNoStateData                          5811
#define NullId                                   5812
#define NullOid                                  5813
#define OidPreviouslyAssigned                    5814
#define TooManyCallsToClose                      5815
#define TransactionRollBackFailed                5816
#define QueryNothingSelected                     5817
#define QueryNotClosed                           5818
#define TooManyArguments                         5819
#define CollectionKeyInvalid                     5820
#define QueryCannotInstantiate                   5821
#define QueryDynamicParameterInvalid             5822
#define RelationshipRestrictDelete               5823
#define ReferencedObjectDoesNotExist             5824
#define NotAnInstanceError                       5825
#define InterfaceNotSupported                    5826
#define SaveCyclicDependancy                     5827
#define ConcurrencyValueInvalid                  5828
#define FKEYConstraintFailed                     5829
#define FKEYReferentialActionFailed              5830
#define FKEYReferentialActionFailedNoAction      5831
#define NullIdComponent                          5832
#define PropertyValueInvalidType                 5833
#define IDKeyCounterNotValid                     5834
#define CollDisconnected                         5835
#define PropertyTypeClassIsAbstract              5836
#define NullGUID                                 5837
#define NoDevloperPriv                           5838
#define ProjectIncludesCSP                       5839
#define ImportUnknownType                        5840
#define ImportLineTooShort                       5841
#define ImportTooFewLines                        5842
#define ImportCanNotCreateDoc                    5843
#define ImportUserItemNotPresent                 5844
#define ItemNotEditable                          5845
#define SecurityNotDeveloper                     5846
#define CanNotImportDefaultProject               5847
#define CanNotExportDefaultProject               5848
#define RoutineLangInvalid                       5849
#define ProjectIncludesPackage                   5850
#define LibraryClassCanNotModify                 5851
#define LibraryClassCanNotSave                   5852
#define ElementTypeInvalid                       5853
#define GlobalReferenceInvalid                   5854
#define OidPrefixInvalid                         5855
#define SQLBindingDoesNotExist                   5856
#define StorageSQLMapDataNameRequired            5857
#define StorageSQLMapNameRequired                5858
#define StorageSQLMapRowIdSpecNameRequired       5859
#define StorageSQLMapSubscriptNameRequired       5860
#define PackageRoutinePrefixTooLong              5861
#define PackageGlobalPrefixTooLong               5862
#define CanNotLockRoutine                        5863
#define CanNotLockRoutineInfo                    5864
#define ItemNotCheckedOut                        5865
#define ProjectNoName                            5876
#define ProjectInvalidType                       5877
#define ProjectBlankName                         5878
#define ProjectNoStream                          5879
#define SourceControlClass                       5880
#define ProjectExist                             5881
#define UnableToCreateRoutine                    5882
#define RoutineProtect                           5883
#define CanNotLockCSP                            5885
#define CanNotSaveCompiledDictionaryClasses      5886
#define CanNotDeleteCompiledDictionaryClasses    5887
#define CanNotNewCompiledDictionaryClasses       5888
#define SourceControlNotLoggedIn                 5889
#define RoutineNameTooLong                       5890
#define UnableToCopyProject                      5891
#define RoutineAlreadyExists                     5892
#define InvalidRtnFile                           5893
#define TooManyItemsInImport                     5894
#define ItemProtect                              5895
#define BadTemplateMode                          5896
#define SourceControlLock                        5897
#define BadGlobalFormat                          5898
#define BadGlobalDecode                          5899
#define IncorrectPackageName                     5900
#define RuleFamilyDoesNotExist                   5901
#define RuleDoesNotExist                         5902
#define RuleNameRequired                         5903
#define AttributeRequired                        5904
#define AttributeValueInvalid                    5905
#define SessionIdMissing                         5906
#define SessionIdDoesNotExist                    5907
#define FailedToCreateClass                      5908
#define TagNotClosed                             5909
#define CSPReloginWith2Factor                    5910
#define CSPInvalidCharacterSet                   5911
#define CSPPageDoesNotExist                      5912
#define CSPInvalidContentType                    5913
#define CSPApplicationDoesNotExist               5914
#define CannotGrantLicense                       5915
#define CSPIllegalRequest                        5916
#define CSPMethodNotSupported                    5917
#define CSPSessionTimeout                        5918
#define InvalidDecrypt                           5919
#define CSPIncorrectNamespace                    5920
#define CSPAppNamespaceRequired                  5921
#define CSPTimeout                               5922
#define CSPRedirectLoop                          5923
#define CSPErrorWithErrorPage                    5924
#define ScriptCacheMissingAttribute              5925
#define CSPUnableToRedirect                      5926
#define CSPClassNameClash                        5927
#define CSPTagParsingError                       5928
#define CSPDirectiveParsingError                 5929
#define CSPIncludeFileError                      5930
#define CSPPageInProgress                        5931
#define CSPNotSupported                          5932
#define CSPServerError                           5933
#define CSPInvalidObjectClass                    5934
#define CSPFormNameLength                        5935
#define CSPFormObjectClass                       5936
#define CSPFormObject                            5937
#define CSPTagName                               5938
#define CSPSelectOref                            5939
#define CSPInvalidObjectName                     5940
#define CSPCheckboxNotList                       5941
#define CSPNoForm                                5942
#define CSPBadSQLTag                             5943
#define CSPSQLInvalidName                        5944
#define CSPSQLInvalidMode                        5945
#define CSPSQLDuplicate                          5946
#define CSPSQLNoCursor                           5947
#define CSPOBJECTDuplicate                       5948
#define CSPRuleDuplicate                         5949
#define CSPRuleClassDoesNotExist                 5950
#define CSPOnSelectError                         5951
#define CSPRuleVersion                           5952
#define CSPBrokerQuery                           5953
#define CSPPageLock                              5954
#define CSPAppFetch                              5955
#define CSPAppDirDoesNotExist                    5956
#define CSPLookupSearch                          5957
#define CSPLookupClassName                       5958
#define CSPLookupWhere                           5959
#define CSPLookupResultSet                       5960
#define CSPConvertCharacterSet                   5961
#define CSPSessionAllocate                       5962
#define CSPSysLogLevel                           5963
#define CSPLanguageChange                        5964
#define CSPInvalidLanguage                       5965
#define CSPInputCharset                          5966
#define CSPBadBrokerRequest                      5967
#define CSPBadRuleLanguage                       5968
#define CSPScriptLanguage                        5969
#define CSPBasicNoStaticSQL                      5970
#define CSPErrorTradeLicense                     5971
#define CSPSaveCallback                          5972
#define CSPPageTooBig                            5973
#define CSPPersistentEnd                         5974
#define CSPUnableToLock                          5975
#define CSPInvalidDirection                      5976
#define CSPInvalidSortDirection                  5977
#define CSPInvalidSaveEscape                     5978
#define CSPInvalidId                             5979
#define CSPPreserveInvalid                       5980
#define CSPIncludeNoArg                          5981
#define CSPSQLOnlySelect                         5982
#define CSPPageNotFound                          5983
#define CSPNeedAuthenticatedId                   5984
#define CSPInvalidSessionReuse                   5985
#define CSPUserCannotRunService                  5986
#define CSPMustBeClassmethod                     5987
#define CSPNoCookie                              5988
#define CSPRuleMixed                             5989
#define CSPSessionNotFound                       5990
#define CSPNoSoapService                         5991
#define CSPSecContextCaller                      5992
#define CSPUnknownError                          5993
#define CSPNamespaceDoesNotExist                 5994
#define CSPUnexpectedAttribute                   5995
#define CSPNoINI                                 5996
#define CSPNoUser                                5997
#define CSPNoUpdate                              5998
#define CSPPendingTwoFactorAuthentication        5999
#define CSPSecurityTokenMismatch                 6000
#define CanNotRestoreOBJ                         6001
#define NotROFile                                6002
#define CannotConvertClass                       6003
#define CannotExportClass                        6004
#define CannotImportClass                        6005
#define XMLFileFormatInvalid                     6006
#define HttpRequestContentLength                 6007
#define HttpRequestConnection                    6008
#define UnsupportedError                         6009
#define ConnectedError                           6010
#define NotConnectedError                        6011
#define POP3NoResponse                           6012
#define ConnectionFailed                         6013
#define ConnectionTerminated                     6014
#define POP3Error                                6015
#define POP3CommandError                         6016
#define POP3BlankLine                            6017
#define POP3TCPError                             6018
#define SAXLocation                              6019
#define SAXPop                                   6020
#define SAXPush                                  6021
#define GatewayFailed                            6022
#define QueryNotPrepared                         6023
#define Queryqacn                                6024
#define GatewayConnection                        6025
#define GatewayAllocate                          6026
#define NamespaceQueryError                      6027
#define PreprocessorError                        6028
#define SMTPTimeout                              6029
#define SMTPProperty                             6030
#define SMTPOpen                                 6031
#define SMTPFirst                                6032
#define SMTPResponse                             6033
#define SMTPConnectionFailed                     6034
#define SMTPUnicodeCharset                       6035
#define SMTPQuotedPrintable                      6036
#define XMLNothing                               6037
#define ActivateInit                             6038
#define ActivateNotHRESULT                       6039
#define ActivateNotNULL                          6040
#define RoutineNoClass                           6041
#define RoutineNoCode                            6042
#define DatabaseClassDefnError                   6043
#define MountDatabaseError                       6044
#define IllegalExportDir                         6045
#define DatabaseDoesNotExist                     6046
#define InvalidIdentifierFormat                  6047
#define InvalidStatementType                     6048
#define InvalidDynamicQueryParm                  6049
#define InvalidNumberParmValues                  6050
#define INTOClauseError                          6051
#define InvalidConversionDir                     6052
#define MalformedSerializedData                  6053
#define InvalidMsgDictSpec                       6054
#define LanguageNotSpecified                     6055
#define SMTPCharset                              6056
#define POP3UnexpectedError                      6057
#define POP3MessageNumber                        6058
#define HttpRequestConnect                       6059
#define MonitorInUse                             6060
#define MonitorNotRunning                        6061
#define MonitorAlreadyRunning                    6062
#define MonitorMemoryAlloc                       6063
#define MonitorStatsColl                         6064
#define MonitorNoCollection                      6065
#define InvalidCompileExtention                  6066
#define RebuildClsIdxErr                         6067
#define XMLNoCatalogFile                         6068
#define LoadGblError                             6069
#define SMTPNoSend                               6070
#define RequiredArgumentMissing                  6071
#define LicenseDataInvalid                       6072
#define LicenseFileOpenWrite                     6073
#define MimeContentTransferEncoding              6074
#define NotALegalBlockNumber                     6075
#define NotABitMapBlock                          6076
#define InvalidRtnCompare                        6077
#define StudioSourceActionInvalid                6078
#define InvalidStudioClass                       6079
#define InvalidROFormat                          6080
#define StudioAbstractDocXMLErr                  6081
#define LicenseUpgradeError                      6082
#define OperationNotLicensed                     6083
#define ErrorDetected                            6084
#define HttpRequestSSLError                      6085
#define SMTPRFC822                               6086
#define SMTPRFC822Encoding                       6087
#define HttpInvalidProxy                         6088
#define HttpConnectFail                          6089
#define MIMENoBoundary                           6090
#define MIMEBadBoundary                          6091
#define MIMEBadHeader                            6092
#define MIMEUnexpectedEnd                        6093
#define MIMENoSource                             6094
#define HTTPHeaderLong                           6095
#define InvalidGbl                               6096
#define TCPIPError                               6097
#define HTTPTempFile                             6098
#define STARTTLSConfigRequired                   6099
#define STARTTLSNotSupported                     6100
#define ComException                             6101
#define ComNoDefaultIntf                         6102
#define ComNoDispatch                            6103
#define SignatureSubParam                        6120
#define InconsistentStorage                      6121
#define SourceProtect                            6150
#define RoutineSourceRO                          6151
#define ProjectItemNotPresent                    6152
#define POP3NoFetch                              6153
#define HttpSocketClosed                         6154
#define HttpSSLNoCert                            6155
#define HttpSSLNoMatch                           6156
#define CSPNoSave                                6157
#define NoFullDeploy                             6158
#define HttpSSLNoConfig                          6159
#define HttpSSLRedirectNoConfig                  6160
#define HttpRedirectError                        6161
#define HttpAuthHeader                           6162
#define HttpAuthScheme                           6163
#define ExternalInterruptionFailure              6164
#define HTTPCookiePathTooLong                    6165
#define SMTPAUTHNotSupported                     6166
#define SMTPAUTHFailed                           6167
#define CannotCreateObject                       6201
#define NoMsgHandler                             6202
#define ElementMismatch                          6203
#define ProcessingInstruction                    6204
#define UnqualifiedElement                       6205
#define VersionError                             6206
#define SoapActionError                          6207
#define AttributeMismatch                        6208
#define AttributeCount                           6209
#define AttributeValue                           6210
#define AttributeMissing                         6211
#define AttributeNameSpace                       6212
#define AttributeNotInScope                      6213
#define AttributeNotQualified                    6214
#define AttributeValueNotQualified               6215
#define UnsupportedTransport                     6216
#define AddOperationFailed                       6217
#define DuplicateElement                         6218
#define UnknownError                             6219
#define InternalError                            6220
#define HeaderNotSupported                       6221
#define SoapBindingStyleError                    6222
#define SoapBodyUseError                         6223
#define XMLNoImport                              6224
#define XMLNoDTD                                 6225
#define SoapWebMethodArg                         6226
#define SOAPServerError                          6227
#define SOAPClientError                          6228
#define XMLInconsistentProjection                6229
#define XMLInvalidProjection                     6230
#define XMLInvalidFormat                         6231
#define XMLValidationFailed                      6232
#define XMLImportMalformed                       6233
#define XMLImportRequired                        6234
#define XMLImportNSErr                           6235
#define XMLImportId                              6236
#define XMLImportBadTag                          6237
#define XMLImportNoKey                           6238
#define XMLInvalidContentProjection              6239
#define SOAPNoServiceName                        6240
#define SOAPHttpOnly                             6241
#define SOAPUnexpectedStatus                     6242
#define SOAPUnexpectedType                       6243
#define SOAPNoLocation                           6244
#define SOAPClientNoPercent                      6245
#define SOAPNoResponseBody                       6246
#define SOAPNoEncodingMatch                      6247
#define SOAPFaultReceived                        6248
#define XMLReferenceNotEnabled                   6249
#define XMLNeedElementType                       6250
#define SOAPTSchemaCorrelationError              6251
#define XMLValidationNoValue                     6252
#define XMLValidationTagFound                    6253
#define XMLImportMalformedNoTag                  6254
#define XMLDataSetBadRecord                      6255
#define XMLInvalidSubstitutionGroup              6256
#define XMLInvalidChoiceType                     6257
#define XMLInvalidEncoding                       6258
#define XMLInvalidIDPROJECTION                   6259
#define XMLAttrValidationFailed                  6260
#define XMLInvalidIgnoreNULL                     6261
#define XMLInvalidXMLIO                          6262
#define XMLInvalidReference                      6263
#define XMLInvalidTypeConstraint                 6264
#define XMLInconsistentReference                 6265
#define XMLInconsistentIDReference               6266
#define XMLInvalidSummaryList                    6267
#define XMLInvalidDefaultReference               6268
#define XMLTypedDSIncomplete                     6269
#define SOAPDuplicateMethod                      6270
#define XMLTypedDSQueryClass                     6272
#define XMLDSQueryClass                          6273
#define XMLInDocument                            6275
#define XMLNotInRootElement                      6276
#define XMLImportBadType                         6277
#define XMLNoString                              6278
#define XMLMaxString                             6279
#define XMLDSNoExecute                           6280
#define XMLDerivedInconsistent                   6281
#define SOAPMalformed                            6282
#define SOAPBadSessionHeader                     6283
#define SOAPBadLogin                             6284
#define XMLNotInDocument                         6285
#define XMLOutsideRoot                           6286
#define XMLNotInTag                              6287
#define XMLDatasetSchema                         6288
#define XMLDSNoMatch                             6289
#define XMLDSNoSchema                            6290
#define XMLDSNoDataMatch                         6291
#define XMLDSColDuplicate                        6292
#define XMLTranslateTable                        6293
#define SOAPMessagePartError                     6294
#define XMLSchemaWizardError                     6295
#define XMLCycleCheck                            6296
#define XMLInvalidStreamMode                     6297
#define XMLNotAllowedStreamMode                  6298
#define XMLInvalidXMLNAME                        6299
#define XMLInvalidFormatParameter                6300
#define SAXError                                 6301
#define MsgFileFormatInvalid                     6302
#define InvalidContentHandler                    6303
#define ExportUnknownType                        6304
#define ExportUserType                           6305
#define ExportCSPNoApp                           6306
#define ExportCSPNoFile                          6307
#define ExportNoDef                              6308
#define ExportDeployed                           6309
#define MalformedURL                             6310
#define SchemaDefinitionDoesNotExist             6311
#define NoDefaultNamespaceForClass               6312
#define SchemaMonikerTypeInvalid                 6313
#define SAXWarning                               6314
#define ImportSubDoc                             6315
#define ImportNoDoc                              6316
#define XMLInvalidInheritance                    6317
#define XMLPropertyRequired                      6318
#define XMLfixedAttrError                        6320
#define RMCreateSequenceResponseRequired         6321
#define RMCreateSequenceResponseBehavior         6322
#define RMUnexpectedHeader                       6323
#define RMExpectedHeader                         6324
#define RMUnexpectedMessageNumber                6325
#define RMCloseSequenceResponseRequired          6326
#define RMTerminateSequenceResponseRequired      6327
#define RMCreateSequenceReuse                    6328
#define ServiceMessageName                       6350
#define ServiceAction                            6351
#define SOAPInvalidRequester                     6352
#define XMLUnexpectedAttribute                   6353
#define XMLInvalidNotStringContent               6354
#define SOAPNoBody                               6355
#define XMLInvalidNodeType                       6356
#define XMLParentSet                             6357
#define XMLWriteNoElement                        6358
#define SOAPNoBinary                             6359
#define SOAPBinaryMismatch                       6360
#define XMLNotEnabled                            6361
#define XMLSchemaDuplicate                       6362
#define XMLSchemaBadEncoded                      6363
#define XMLSchemaBadQualified                    6364
#define SOAPBinaryBadFormat                      6365
#define SOAPBinaryBadTopLevel                    6366
#define SOAPBinaryBadVersion                     6367
#define SOAPBinaryDupClass                       6368
#define SOAPBinaryUnknownClass                   6369
#define SOAPDupRemoteClass                       6370
#define SOAPBadRemoteClass                       6371
#define SOAPBadMultipart                         6372
#define SOAPUnsupportedVersion                   6373
#define SOAPBadVersion                           6374
#define SOAPBadEncodingStyle                     6375
#define SOAPMustUnderstandError                  6376
#define SOAPInvalidSECURITYIN                    6378
#define SOAPWSSECURITYRequired                   6379
#define WSSECURITYBadCertificate                 6380
#define WSSECURITYInvalidEncAlgo                 6381
#define WSSECURITYKeyEncFailed                   6382
#define WSSECURITYEncFailed                      6383
#define XMLInvalidMappingParameter               6384
#define XMLInconsistentMappingParameter          6385
#define XMLInconsistentGroup                     6386
#define SOAPUnsupportedArgumentStyle             6387
#define SOAPUnexpectedElement                    6388
#define SOAPBadSecurityElement                   6389
#define SOAPBadSignature                         6390
#define WSSCInvalidDerivedKey                    6391
#define WSTCollectionResponseRequired            6392
#define WSTCollectionEmptyResponse               6393
#define WSTUnexpectedResponse                    6394
#define WSTNotSupportedResponse                  6395
#define WSTNoToken                               6396
#define WSTInvalidResponseToken                  6397
#define WSSCNoKey                                6398
#define WSTCancelResponse                        6399
#define SOAPUnsupportedRequest                   6400
#define WSDLBadAttributeName                     6401
#define WSDLBadAttributeValue                    6402
#define WSDLBadAttributes                        6403
#define WSDLBadElementName                       6404
#define WSDLBadElementValue                      6405
#define WSDLBadNamespace                         6406
#define WSDLBadSchemaType                        6407
#define WSDLBadMessageType                       6408
#define WSDLBadEncoding                          6409
#define WSDLMissingAttribute                     6410
#define WSDLMissingElement                       6411
#define WSDLNoValue                              6412
#define WSDLNoCorrespondence                     6413
#define WSDLDuplicate                            6414
#define WSDLUnsupportedTransport                 6415
#define WSDLUnrecognizedElement                  6416
#define WSDLPartElement                          6417
#define WSDLLiteralEncodingParams                6418
#define WSDLInconsistentForOperation             6419
#define WSDLBindingNotSupported                  6420
#define WSDLParmCountMismatch                    6421
#define NoWSDLNamespace                          6422
#define NoSOAPNamespace                          6423
#define WSDLPartAttribute                        6424
#define WSDLMessageStyleNeeded                   6425
#define WSDLPackageNeeded                        6426
#define WSDLPolicyNoClient                       6427
#define WSDLPolicyMultiConfig                    6428
#define WSDLPolicyService                        6429
#define SOAPConfigBadRoot                        6440
#define SOAPConfigUnexpected                     6441
#define SOAPConfigDuplicate                      6442
#define SOAPConfigDuplicateClass                 6443
#define SOAPConfigNoClass                        6444
#define SOAPConfigNoMethodName                   6445
#define SOAPConfigDuplicateMethod                6446
#define SOAPPolicyUnexpected                     6447
#define SOAPConfigNameNoMatch                    6448
#define SOAPConfigInvalidName                    6449
#define SOAPConfigNotFound                       6450
#define SOAPConfigAssertionText                  6451
#define SOAPPolicyInternalError                  6452
#define SOAPPolicyUnsupportedNamespace           6453
#define SOAPPolicyNone                           6454
#define SOAPPolicyUnsupported                    6455
#define SOAPPolicyUnknown                        6456
#define SOAPPolicyNoPolicyAllowed                6457
#define SOAPPolicyUnsupportedParameter           6458
#define SOAPPolicyHeaderNamespace                6459
#define SOAPPolicyHeaderName                     6460
#define SOAPPolicyUnsupportedNested              6461
#define SOAPPolicyNestedRequired                 6462
#define SOAPPolicyNamespaceUnexpected            6463
#define SOAPPolicyOnlyOne                        6464
#define SOAPPolicyNoTokenParm                    6465
#define SOAPPolicyBadToken                       6466
#define SOAPPolicyAlgoSuite                      6467
#define SOAPPolicyTokenFormat                    6468
#define SOAPPolicyUnexpectedInclude              6469
#define SOAPPolicyTokenRequired                  6470
#define SOAPPolicySupportingTokenRequired        6471
#define SOAPConfigUnexpectedNamespace            6472
#define SOAPPolicyUnexpectedAttr                 6473
#define SOAPPolicyX509Find                       6474
#define SOAPPolicyX509FindField                  6475
#define SOAPPolicyRefNoId                        6476
#define SOAPPolicyRefNotFound                    6477
#define SOAPPolicySigningUsername                6478
#define SOAPPolicyWSDLElement                    6479
#define SOAPParamNoMethodName                    6480
#define SOAPParamNoMethod                        6481
#define SOAPParamHeaderAttrReq                   6482
#define SOAPDerivedKeyPolicy                     6483
#define SOAPParamNoActionText                    6484
#define SOAPPolicySCTToken                       6485
#define SOAPPolicySCTLifetime                    6486
#define SOAPPolicyAttrType                       6487
#define XSDXSDType                               6501
#define XSDCacheType                             6502
#define XMLProjectionLock                        6503
#define XMLNoStreamArray                         6504
#define SOAPBadNewSession                        6505
#define XSDNoSchema                              6506
#define XMLInvalidDefaultSkipNil                 6507
#define XMLNoDescendant                          6508
#define XMLTargetElement                         6509
#define QRCodeFileCanNotOpen                     6550
#define QRCodeExceptionFileCanNotOpen            6551
#define QRCodeFileNotCreated                     6552
#define QRCodeCorrectionLevel                    6553
#define QRCodeNotSupportedOnPlatform             6554
#define QRCodeInvalidDimension                   6555
#define QRCodeCorrectionLevelMaxLen              6556
#define QRCodeNotEscaped                         6557
#define QRCodeNullPtrs                           6558
#define QRCodeSanityCheckArgsNumeric             6559
#define QRCodeSanityCheckArgsAlphaNumeric        6560
#define QRCodeSanityCheckArgsByte                6561
#define QRCodeSanityCheckArgsKanji               6562
#define QRCodeSanityCheckArgsUnknownType         6563
#define QRCodeExceptionDuringFileCreation        6564
#define LGBeanNameIsRequired                     6601
#define LGRootDirReq                             6602
#define LGClassPathReq                           6603
#define LGAppServerHomeReq                       6604
#define LGJavaHomeReq                            6605
#define LGPathReq                                6606
#define LGServerTypeReq                          6607
#define LGOnlyQuick                              6608
#define LGOnlyPersistent                         6609
#define LGOnlyClassListNotEmpty                  6610
#define LGUnsupportedServer                      6611
#define LGCMPRequiresPrimaryKey                  6612
#define LGCMPCommonCPPOutputNotSet               6613
#define LGgetClassMethodsError                   6614
#define LGgetClassPropertiesError                6615
#define LGgetClassQueriesError                   6616
#define LGgetEJBCLassNameError                   6617
#define LGgetJobNumberError                      6618
#define LGCommonOutputNotSet                     6619
#define LGCommonLanguageGeneratorNotSet          6620
#define LGEJBEasyWindowsOnly                     6621
#define LGPersistenceTypeIsBMPorCMP              6622
#define LGCMPBadRequired                         6623
#define LGMustBeAtLeastOnePersistent             6624
#define LGWebLogicRequiresTestTable              6625
#define LGNotProjectible                         6626
#define LGTransactionionIsolation                6627
#define LGConflictingInheritance                 6628
#define LGConflictingPropertyDeclaration         6629
#define LGSuperMustBeRegistered                  6630
#define LGSuperMustBePersistent                  6631
#define LGClassMustBeUpToDate                    6632
#define LGInvalidChildTable                      6633
#define LGgetClientClassDefError                 6634
#define LGQueryGetInfo                           6635
#define LGDataType                               6636
#define LGBadFormatFlags                         6637
#define LGListTooBig                             6638
#define LGgetCountMethodsError                   6639
#define LGgetCountPropertiesError                6640
#define LGgetCountQueriesError                   6641
#define LGRequiredNoProject                      6642
#define ClassNotExportable                       6643
#define LGRoutineError                           6645
#define LGPackageNameConflict                    6646
#define LGNoCppServerSideUseClient               6647
#define LGDependsOnBad                           6648
#define LGDependsOnInvalid                       6649
#define LGDependsOnServerOnly                    6650
#define LGFailedDependency                       6651
#define LGEmptyJavaBlock                         6653
#define LGManyJavaBlocks                         6654
#define LGCannotExtendCollection                 6655
#define LGPOJODoesNotAllowByRef                  6656
#define LGNoAbstractStreams                      6657
#define LGStreamCannotBeLeftmostSuper            6658
#define LGCacheLockTimeOut                       6659
#define LGQueryGetParamInfo                      6660
#define DebugAttached                            6701
#define DebugMissingPID                          6702
#define DebugInvalidPID                          6703
#define DebugTargetExited                        6704
#define DebugBreakFailed                         6705
#define DebugNoCSPAttach                         6706
#define DebugNotAttached                         6707
#define DebugUnattach                            6708
#define DebugNotStopped                          6709
#define DebugAttachFailed                        6710
#define DebugInvalidTarget                       6711
#define DebugNoMapBreakpoint                     6712
#define DebugStartFailed                         6713
#define DebugError                               6714
#define DebugBadPID                              6715
#define DebugInDebugMode                         6716
#define DebugInSignonMode                        6717
#define DebugSourceNotCompiled                   6718
#define XSLTError                                6901
#define InvalidErrorHandler                      6902
#define InvalidOutputStream                      6903
#define InvalidResultHandler                     6904
#define InvalidInputStream                       6905
#define UseFactoryMethods                        6906
#define TSQLHardError                            7001
#define TSQLCompilationError                     7002
#define ISQLHardError                            7003
#define ISQLCompilationError                     7004
#define TSQLQueryBuilderExpected                 7005
#define TSQLCompileAssignQueryToVar              7006
#define TSQLCompileRequiresProcedureBlock        7011
#define XSQLCantOpenClassDefinition              7050
#define XSQLReadUnrecognizedInput                7051
#define XSQLReadMissingRightBracket              7052
#define XSQLReadMissingStringEndQuote            7053
#define XSQLReadSyntaxError                      7054
#define XSQLProcNotQuery                         7055
#define TSQLArgumentAlreadySet                   7056
#define ErrIOSeekPastEnd                         7101
#define ErrIOFileNoReadMode                      7102
#define ErrIOFileNoWriteMode                     7103
#define ErrIONoDelegatedStream                   7104
#define ErrIONoCharTable                         7105
#define ErrIOStreamNotCloseable                  7106
#define ErrIODelegatedNotSeekable                7107
#define ErrIONotStream                           7108
#define ErrIOOpenTimeout                         7109
#define ErrIOListenTimeout                       7110
#define ErrTelnetOptionNotSet                    7150
#define ErrTelnetBadState                        7151
#define ErrTelnetInitTimeout                     7152
#define DTFailure                                7200
#define DTMaxLen                                 7201
#define DTMinLen                                 7202
#define DTMaxVal                                 7203
#define DTMinVal                                 7204
#define DTValueList                              7205
#define DTNotBoolean                             7206
#define DTNotNum                                 7207
#define DTTimeStamp                              7208
#define DTPattern                                7209
#define DTInvalidChar                            7210
#define DTNotDuration                            7211
#define DTNotGUID                                7212
#define DTNotPosix                               7213
#define DTDateTime                               7214
#define BkpOpenLogFileOutErr                     7300
#define BkpExtFreezeCantRun                      7301
#define BkpClusterMemberTCPInfo                  7302
#define BkpClusterMemberJrnSwitch                7303
#define BkpCluJrnSwitchFail                      7304
#define BkpLocJrnSwitchFail                      7305
#define BkpFailedToQuiesce                       7306
#define BkpPlaceJrnMarker                        7307
#define BkpTaskNotExist                          7308
#define BkpIsRunning                             7309
#define BkpOpenTaskErr                           7310
#define BkpNotRecorded                           7311
#define BkpUnknownPlatform                       7312
#define BkpLogFileListErr                        7313
#define BkpTaskListErr                           7314
#define BkpLogDirErr                             7315
#define BkpCreateLogFileErr                      7316
#define BkpOutDirErr                             7317
#define BkpCreateOutFileErr                      7318
#define BkpDBListFail                            7319
#define BkpUnknownType                           7320
#define BkpDBNotExist                            7321
#define BkpNotTEMP                               7322
#define BkpDBListErr                             7323
#define BkpNotInList                             7324
#define BkpJobFailed                             7325
#define BkpIJCFailed                             7326
#define BkpErrDBACK                              7327
#define BkpNoModBuiltin                          7328
#define BkpInvalidType                           7329
#define BkpNoTaskName                            7330
#define BkpInvalidTaskName                       7331
#define BkpTaskExists                            7332
#define BkNoDevice                               7333
#define BkNoRead                                 7334
#define BkVolumeCanNotOpen                       7335
#define BkNotaVolume                             7336
#define BkpSuspendRequestCleared                 7337
#define TASKMGRRunning                           7400
#define TASKNotOpen                              7401
#define TASKUserNotEnabled                       7402
#define TASKNotScheduled                         7403
#define TASKInvalidIncrement                     7404
#define TASKUserNotAuthorized                    7405
#define TASKUserDoesNotExist                     7406
#define TASKDailyEndTimeInvalid                  7408
#define TASKEndDateInvalid                       7409
#define TASKTimePeriodDay                        7410
#define TASKOutputDirectoryError                 7411
#define TASKFilenameError                        7412
#define TASKClassIsRequired                      7413
#define TASKClassNotExist                        7414
#define TASKNoneToDelete                         7415
#define TASKSchedulingProblem                    7416
#define TASKFailToSuspend                        7418
#define TASKFailToResume                         7419
#define TASKInvalidSuspendFlag                   7420
#define TASKInvalidMailServer                    7421
#define TASKNoEmailAddresses                     7422
#define TASKFailedConfigUpdate                   7423
#define TASKUnableToSendMail                     7424
#define TASKClearRunAfter                        7425
#define TASKTimePeriodWeekly                     7426
#define TASKPositiveRepeatingOffset              7427
#define TASKInvalidDayMonth                      7428
#define TASKWeeklyOffset                         7429
#define TASKInvalidDailyFrequencyTime            7430
#define TASKInvalidRunAfterTask                  7431
#define TASKStartDateInvalid                     7432
#define TASKModifyNotAuthorized                  7433
#define TASKModifySettingNotAuthorized           7434
#define TASKJobRunning                           7450
#define TASKJobUntrappedError                    7451
#define TASKJobSetupError                        7452
#define TASKJobTimeout                           7453
#define TASKJobPostProcessError                  7454
#define MustEnterTapeDevice                      7460
#define TASKAuditKeepDaysInvalid                 7461
#define SSHGeneralError                          7500
#define SSHNotConnected                          7501
#define SSHHostKeyMismatch                       7502
#define SSHInvalidHostname                       7503
#define SSHTimeout                               7504
#define SSHConnected                             7505
#define SSHNoSession                             7506
#define SSHNoChannel                             7507
#define SSHNoSFTP                                7508
#define SSHSSHError                              7510
#define SSHSFTPError                             7511
#define DplyFormat                               7600
#define DplyFormatType                           7601
#define DplyVersion                              7602
#define DplyDelimId                              7603
#define DplyGblNode                              7604
#define DplyNoOBJ                                7605
#define DplyGblInUse                             7606
#define DplyGblData                              7607
#define DplyGblNodeDif                           7608
#define DplyBadFile                              7609
#define DplySigMismatch                          7610
#define InstallerInvalidManifestSpecification    7700
#define InstallerInvalidExpression               7701
#define InstallerInvalidSpecialVariable          7702
#define InstallerParserError                     7703
#define MultiNoJobs                              7800
#define MultiNoMod                               7801
#define MultiShutdown                            7802
#define MultiQueueClosed                         7803
#define MultiLockFull                            7804
#define MultiWorkRecurse                         7805
#define MultiSignalWorkers                       7806
#define MultiJobsNotStarted                      7807
#define MultiNoModLock                           7808
#define MultiWorkWorker                          7809
#define MultiInvalidQueue                        7810
#define MultiNoContext                           7811
#define MultiQueueDead                           7812
#define MultiInvalidMsg                          7813
#define MultiWorkStalled                         7814
#define MultiPreviousStop                        7815
#define MultiIPQWorker                           7816
#define MultiSemOpen                             7817
#define MultiNoZero                              7818
#define MultiQueueDeleted                        7819
#define MultiUserLogicErr                        7820
#define MultiIPQDied                             7821
#define MultiIPQNoEvent                          7822
#define MultiBadCategory                         7823
#define MultiResumeAfterFree                     7824
#define MultiStopping                            7825
#define MultiNewGroupFail                        7826
#define MultiGroupNotRead                        7827
#define MultiNoIPQ                               7828
#define MultiPrivAll                             7829
#define MultiNoPause                             7830
#define MultiNoFreeze                            7831
#define MultiNoWork                              7832
#define MultiTLevel                              7833
#define MultiInPast                              7834
#define MultiNoChange                            7835
#define MultiNoSYSQueue                          7836
#define MultiNoData                              7837
#define MultiNoSignal                            7838
#define MultiAddWorker                           7839
#define MultiSignalNoData                        7840
#define MultiDeleteInWait                        7841
#define MultiStartDaemon                         7842
#define MultiDetachShutdown                      7843
#define MultiDetachNoWorker                      7844
#define MultiDetachIPQ                           7845
#define MultiAttachToken                         7846
#define MultiAttachLock                          7847
#define MultiAttachData                          7848
#define MultiQueueShardArg                       7849
#define ClassTypeSysNoMember                     7850
#define ClassTypeSysSuper                        7851
#define ClassTypeInvalid                         7852
#define ClassTypeSysGen                          7853
#define CPPMethodAlias                           7854
#define CPPMethodReturn                          7855
#define CPPMethodArg                             7856
#define MultiHalt                                7870
#define MultiNoRemoteSem                         7871
#define MultiNoRepeatTag                         7872
#define MultiNoStartDaemon                       7873
#define MultiBroadcastSetNull                    7874
#define MultiNoBroadcastSet                      7875
#define MultiNoShardData                         7876
#define MultiShardDataMissing                    7877
#define ServiceNotEnabledForApplication          7900
#define CSPSecondFactorLoginFailed               7901
#define CSPOnApplicationAbortedLogin             7902
#define CSPSecondFactorCancelled                 7903
#define CSPMobileCall                            7904
#define CSPMobileMethod                          7905
#define CSPSessionEventClose                     7906
#define CSPClientProcessDropped                  7907
#define CSPClientWriteTimeout                    7908
#define CSPClientIntegrityFailure                7909
#define CSPClientIntegrityError                  7910
#define CSPIndexLinkInvalidIP                    7911
#define CSPIndexLinkInvalidPort                  7912
#define CSPClientRequestIncomplete               7913
#define CSPClientRequestNoID                     7914
#define CSPClientRequestInvalidID                7915
#define CSPInvalidSessionCookie                  7916
#define CSPInvalidResponseCookie                 7917
#define CSPNoPermissionForMethod                 7918
#define CSPInvalidFieldName                      7919
#define CSPWebSocketTimeout                      7950
#define CSPWebSocketClosed                       7951
#define CSPWebSocketInvalidID                    7952
#define CSPWebSocketNoData                       7953
#define CSPWebSocketNoClientProcess              7954
#define CSPWebSocketUnknownError                 7955
#define IKDomainExists                           8000
#define IKInvalidSortField                       8001
#define IKReservedGlobalName                     8002
#define IKFailedProcessSource                    8003
#define IKFailedLockDomain                       8004
#define IKExtIdNotFound                          8005
#define IKConfigurationNotFound                  8006
#define IKFailedInitDirectInput                  8007
#define IKFailedInitIndexer                      8008
#define IKFailedLoadKB                           8009
#define IKFailedLoadLB                           8010
#define IKKBNotFound                             8011
#define IKCaughtError                            8012
#define IKListerAliasInUse                       8013
#define IKFailedResetLocation                    8014
#define IKNothingToProcess                       8015
#define IKNoConfigWithId                         8016
#define IKDomainMismatch                         8017
#define IKDomainNotExists                        8018
#define IKDomainCorrupt                          8019
#define IKDomainNamespaceError                   8020
#define IKNoDomainWithId                         8021
#define IKInternalDatasourceError                8022
#define IKFailedDeleteSource                     8023
#define IKInvalidTypeKey                         8024
#define IKMissingSourceId                        8025
#define IKMissingSrcField                        8026
#define IKMissingContinuationKey                 8027
#define IKMissingCrcField                        8028
#define IKMissingSentField                       8029
#define IKMissingRelFreq                         8030
#define IKMissingAttribute                       8031
#define IKMinimumPartLength                      8032
#define IKNoSourceSpecified                      8033
#define IKSourceDoesNotExist                     8034
#define IKSourceDoesNotExistE                    8035
#define IKNoMDFieldSpecified                     8036
#define IKMDFieldDoesNotExist                    8037
#define IKMDFieldDoesNotExistE                   8038
#define IKMDValueNotInLOV                        8039
#define IKMDFieldExists                          8040
#define IKDictionaryDoesNotExist                 8041
#define IKDictItemDoesNotExist                   8042
#define IKDictTermDoesNotExist                   8043
#define IKDictElemDoesNotExist                   8044
#define IKDictItemURIExists                      8045
#define IKDFClassDoesNotExist                    8046
#define IKDictTermIndexError                     8047
#define IKMDOperatorNotSupported                 8048
#define IKMDLovDoesNotExist                      8049
#define IKFailedLowercase                        8050
#define IKNoSuchEncoding                         8051
#define IKFailedTranscode                        8052
#define IKInvalidIndexerId                       8053
#define IKUnknownLanguageId                      8054
#define IKInvalidObjectId                        8055
#define IKFileOpenFailed                         8056
#define IKNoKBLoaded                             8057
#define IKDataItemTooLarge                       8058
#define IKAddDataFailed                          8059
#define IKInvalidObject                          8060
#define IKConfigurationExists                    8061
#define IKLanguagesMustBeList                    8062
#define IKLanguageDoesNotExist                   8063
#define IKFailedLoadLibrary                      8064
#define IKUnableCreateEngine                     8065
#define IKFailedLockIndexer                      8066
#define IKUnableOpenListerId                     8067
#define IKNgramNotEnabled                        8068
#define IKMDCannotReplaceInBatch                 8069
#define IKMDValueCountMismatch                   8070
#define IKUnableOpenConverterId                  8071
#define IKUnableOpenProcessorId                  8072
#define IKLoaderIsNotClean                       8073
#define IKIndexerProcFailed                      8074
#define IKCannotCreateLoader                     8075
#define IKFailedSplitExtId                       8076
#define IKUnknownLister                          8077
#define IKBuildExtIdFromNameRoot                 8078
#define IKMatchIdDoesNotEXist                    8079
#define IKConfigMismatch                         8080
#define IKMissingBitString                       8081
#define IKBadListForBuildGlobals                 8082
#define IKFailedToBuildGlobals                   8083
#define IKFailedJobStart                         8084
#define IKOnlyOneVSrcSupported                   8085
#define IKVirtualSourceNotFound                  8086
#define IKDictElementTooLong                     8087
#define IKGroupDoesNotExist                      8088
#define IKDuplicateExternalId                    8089
#define IKStringTooLong                          8090
#define IKSkipListExists                         8091
#define IKDictExists                             8092
#define IKSkipListDoesNotExist                   8093
#define IKInsufficientGMHeap                     8094
#define IKIllegalDomainParameter                 8095
#define IKDomainNonEmptyForParam                 8096
#define IKLicenseError                           8097
#define IKIllegalResultParam                     8098
#define IKStoreErrorInResult                     8099
#define GatewayRequestFailed                     8100
#define GatewayRequestException                  8101
#define GatewayRequestNoData                     8102
#define GatewayRequestTimeout                    8103
#define GatewayException                         8104
#define IKIllegalMaxConLength                    8200
#define IKSecurityError                          8201
#define IKMissingListerParam                     8202
#define IKListerParamError                       8203
#define IKNoListerRegistered                     8204
#define IKNoUserDictWithName                     8205
#define IKNoUserDictWithId                       8206
#define IKUserDictWithNameExists                 8207
#define IKInvalidFilter                          8208
#define IKMissingRelDom                          8209
#define IKMissingProxField                       8210
#define IKInvalidConverter                       8211
#define IKInvalidProcessor                       8212
#define IKMissingConDom                          8213
#define IKMissingField                           8214
#define IKMatProfileModified                     8215
#define IKMatProfileDoesNotExist                 8216
#define IKCannotLoadInDSDomain                   8217
#define IKMatProfileExists                       8218
#define IKIllegalMatProfileName                  8219
#define IKFeatureRequiresVersion                 8220
#define IKSysParameterSet                        8221
#define IKFailedToAcquireLock                    8222
#define IKObjectModified                         8223
#define IKEmptyDomainParamForSys                 8224
#define IKIllegalDomainParamVal                  8225
#define IKMetricIDDoesNotExist                   8226
#define IKMetricDoesNotExist                     8227
#define IKMetricTargetDoesNotExist               8228
#define IKMetricTargetNotSupported               8229
#define IKDomainIsManaged                        8230
#define IKObjectIsManaged                        8231
#define IKInternalEngineFault                    8232
#define IKGlobalsNotBuilt                        8233
#define IKModelError                             8234
#define IKSysDomVirtualOnly                      8235
#define IKSysDomNotSupported                     8236
#define IKEngineOutOfMemory                      8237
#define IKStemmingNotEnabled                     8238
#define IFSyntaxBrackets                         8239
#define RegexNoPattern                           8300
#define RegexICU                                 8301
#define URegexInternalError                      8310
#define URegexRuleSyntax                         8311
#define URegexInvalidState                       8312
#define URegexBadEscapeSequence                  8313
#define URegexPropertySyntax                     8314
#define URegexUnimplemented                      8315
#define URegexMismatchedParen                    8316
#define URegexNumberTooBig                       8317
#define URegexBadInterval                        8318
#define URegexMaxLtMin                           8319
#define URegexInvalidBackRef                     8320
#define URegexInvalidFlag                        8321
#define URegexLookBehindLimit                    8322
#define URegexSetContainsString                  8323
#define URegexOctalTooBig                        8324
#define URegexMissingCloseBracket                8325
#define URegexInvalidRange                       8326
#define URegexStackOverflow                      8327
#define URegexTimeOut                            8328
#define URegexStoppedByCaller                    8329
#define URegexIndexOutOfBounds                   8351
#define UregexIllegalArgument                    8352
#define JrnRestGUIDNotFound                      8400
#define JrnRestNameNotFound                      8401
#define JrnRestBareNotFound                      8402
#define JrnRestNameAmbiguous                     8403
#define JrnRestBareAmbiguous                     8404
#define JrnRestPriorNotFound                     8405
#define JrnRestPrefixNotFound                    8406
#define JrnRestSharedTarget                      8407
#define ClassSaveError                           8500
#define ClassLoadError                           8501
#define LicAppRetSessionOutOfScope               8600
#define LicInvalidAppname                        8601
#define LicCannotOpenLicenseFile                 8602
#define LicNotValidLicenseFile                   8603
#define LicKeyHasExpired                         8604
#define LicKeyIsInvalid                          8605
#define LicKeyInvalidForVersion                  8606
#define LicEnsembleCores                         8607
#define LicIRISCores                             8608
#define LicKeyInvalidPlatform                    8609
#define LicKeyInvalidSU                          8610
#define LicKeyAppKWNotNumeric                    8611
#define LicKeyAppKWInvalid                       8612
#define AppLicenseUserCountOverflow              8613
#define XDataBlockMissing                        8700
#define InvalidDispatchMap                       8701
#define RESTSpecMissing                          8710
#define RESTSpecNoParameter                      8711
#define RESTNoParameter                          8712
#define RESTBadType                              8713
#define RESTBadIn                                8714
#define RESTInvalidProperty                      8715
#define RESTBodyAndForm                          8716
#define RESTBody2                                8717
#define RESTDuplicateParam                       8718
#define RESTBadReference                         8719
#define RESTNoReferenceFound                     8720
#define RESTParameterDefsRef                     8721
#define RESTSpecExtraParameter                   8722
#define RESTUrlSlash                             8723
#define RESTDuplicateClass                       8724
#define RESTFileContentType                      8725
#define RESTContentType                          8726
#define RESTRequired                             8727
#define RESTInvalid                              8728
#define RESTDuplicate                            8729
#define RESTResource                             8730
#define RESTBadItemsType                         8731
#define RESTInvalidRef                           8732
#define RESTBadMethodName                        8733
#define RESTNoOverwrite                          8734
#define RESTClassExists                          8735
#define RESTOpenAPINotJSON                       8736
#define RESTOpenAPIRequired                      8737
#define RESTOpenAPIVersion                       8738
#define RESTOpenAPITypeMismatch                  8739
#define RESTOpenAPIExtraField                    8740
#define RESTOpenAPILocalRef                      8741
#define RESTOpenAPIBadRef                        8742
#define RESTOpenAPINoRef                         8744
#define RESTOpenAPIMultiRef                      8745
#define RESTOpenAPIBadType                       8746
#define RESTOpenAPIPathTemplating                8748
#define RESTNoRESTSpec                           8749
#define RESTNoWebApp                             8750
#define RESTNoRef                                8751
#define RESTBadParameterName                     8752
#define RESTNoApplication                        8753
#define RESTBadNamespace                         8754
#define RESTDevResource                          8755
#define RESTNotDynObj                            8756
#define RESTBadAccepts                           8757
#define RESTBadName                              8758
#define RESTNoWebClass                           8759
#define RESTErrorProcessingXData                 8760
#define InvalidNotification                      8800
#define NotificationProtocolNotSupported         8801
#define InvalidDeviceToken                       8802
#define APNSConnectionTimedOut                   8803
#define APNSPushNotificationFailed               8804
#define APNSPushNotificationFailedWithReason     8805
#define APNSInvalidResponse                      8806
#define APNSConnectionFailed                     8807
#define APNSConnectionTerminated                 8808
#define GCMConnectionFailed                      8809
#define GCMHTTPStatus                            8810
#define GCMPushNotificationFailed                8812
#define GCMPushNotificationFailedWithReason      8813
#define RequiredClientProperties                 8850
#define OAuth2InvalidTokenType                   8851
#define OAuth2InvalidBearerHeader                8852
#define OAuth2DuplicateToken                     8853
#define OAuth2NotSSL                             8854
#define OAuth2NoSSLConfig                        8855
#define OAuth2ResponseContentType                8856
#define OAuth2ResponseBody                       8857
#define OAuth2ResponseError                      8858
#define OAuth2ResponseUnsupported                8859
#define OAuth2ResponseInvalidExpires             8860
#define OAuth2RedirectInvalid                    8861
#define OAuth2RedirectURI                        8862
#define OAuth2GrantTypes                         8863
#define OAuth2NoConfiguration                    8864
#define OAuth2GenerateError                      8865
#define OAuth2RedirectURINeeded                  8866
#define OAuth2Multiple                           8867
#define OAuth2RequestArgument                    8868
#define OAuth2IDTokenNotValid                    8869
#define OAuth2NoAccessToken                      8871
#define OAuth2ISCOnly                            8872
#define OAuth2JWTNotValid                        8873
#define OAuth2UserinfoNotValid                   8874
#define RequiredServerDefinitionProperties       8875
#define OAuth2NoEndpoint                         8876
#define OAuth2AuthURI                            8877
#define OAuth2AuthClientSecret                   8878
#define OAuth2AuthPrivateKey                     8879
#define OAuth2DiscoveryNotValid                  8880
#define OAuth2NoRegistrationEndpoint             8881
#define OAuth2RegistrationNotValid               8882
#define OAuth2NoAuthSigning                      8883
#define OAuth2InvalidGrantType                   8884
#define OAuth2NoPrivateKey                       8885
#define OAuth2NoCredentials                      8886
#define OAuth2RSAParsingError                    8887
#define OAuth2InvalidRSAType                     8888
#define OAuth2InvalidRSAParameters               8889
#define OAuth2RSAConstructionError               8890
#define OAuth2InvalidAlg                         8891
#define OAuth2RSAKeyGenError                     8892
#define OAuth2ClientSecretTooShort               8893
#define OAuth2InvalidAlgCombination              8894
#define OAuth2InvalidSigalg                      8895
#define OAuth2NoPrivateKey1                      8896
#define OAuth2NoPublicKey                        8897
#define OAuth2NoSharedKey                        8898
#define OAuth2RSASignatureError                  8899
#define OAuth2RSAVerificationError               8900
#define OAuth2RSAEncryptionError                 8901
#define OAuth2RSADecryptionError                 8902
#define OAuth2InvalidJOSE                        8903
#define OAuth2InvalidJWT                         8904
#define OAuth2HMACVerificationError              8905
#define OAuth2AESKWError                         8906
#define OAuth2BadAuthMethods                     8907
#define OAuth2NoLocalJWKS                        8908
#define OAuth2NoRemoteJWKS                       8909
#define OAuth2ClientSecretInvalidLength          8910
#define PKCEInvalidChallengeMethod               8911
#define OAuth2ClientAlreadyRegistered            8912
#define OAuth2ECSignatureError                   8913
#define OAuth2ECVerificationError                8914
#define OAuth2InvalidECType                      8915
#define OAuth2InvalidECParameters                8916
#define OAuth2ECConstructionError                8917
#define OAuth2ECKeyGenError                      8918
#define OAuth2ECParsingError                     8919
#define MFTErrorResponse                         8921
#define MFTUnexpectedResponse                    8922
#define MFTRootDelete                            8923
#define MFTNoFolder                              8924
#define MFTNotSharedFolder                       8925
#define MFTFolderExpected                        8926
#define MFTFileExists                            8927
#define MFTNoURL                                 8928
#define MFTNoFile                                8929
#define MFTBadAccessLevel                        8930
#define MFTNoUser                                8931
#define MFTUnshareOwner                          8932
#define MFTNotShared                             8933
#define MFTFileNeeded                            8934
#define MFTBadConnection                         8935
#define MFTNotAuthorized                         8936
#define MFTAddUserError                          8937
#define StudioRefNotUpToDate                     9000
#define StudioRefNameExists                      9001
#define StudioRefGenerated                       9002
#define StudioRefNotOpen                         9003
#define StudioRefParse                           9004
#define StudioRefDeployed                        9005
#define InvalidExtentSize                        9100
#define ClassGlobalNameTooLong                   9101
#define HGRemoteError                            9200
#define HGInvalidOption                          9201
#define HGInvalidImportTableExistsOptionValue    9202
#define HGUnsupportedImportDatatype              9203
#define HGImportTableExists                      9204
#define HGCannotAcquireImportTableLock           9205
#define HGImportSyntaxError                      9206
#define HGSyntaxErrorAsSQLType                   9207
#define HGUnsupportedDatatypeParameter           9208
#define HGParameterUnsupportedForDatatype        9209
#define HGCardinalityNotSupported                9210
#define HGUnsupportedTimeFormat                  9211
#define HGInverseConflicts                       9212
#define HGMustSpecifyInverse                     9213
#define HGInvalidConnectionOption                9214
#define HGMustConnectToCreateMapReduceResult     9215
#define HGMustConnectToExecuteCommand            9216
#define HGMustConnectToSynchronize               9217
#define HGCannotAcquireLockToSync                9218
#define HGCannotAcquireLockToRollback            9219
#define HGNoSuchSyncJob                          9220
#define SHMShardError                            9300
#define SHMShardErrors                           9301
#define SHMTxExists                              9302
#define SHMTxInvalidStateTransition              9303
#define SHMTxAlreadyInTransaction                9304
#define SHMCannotConnectECP                      9305
#define SHMCannotDisconnectECP                   9306
#define SHMCannotCreateSemaphore                 9307
#define SHMCannotConnectTCP                      9308
#define SHMCannotDeleteSemaphore                 9309
#define SHMStorageModelNotSupported              9310
#define SHMLoadAlreadyInProgress                 9311
#define SHMNotShardedTable                       9312
#define SHMNoCompiledClass                       9313
#define SHMMultipleStorageDefs                   9314
#define SHMRemoteShardDirectory                  9315
#define SHMCannotLogin                           9316
#define SHMMapLockTimeout                        9317
#define SHMConnReset                             9318
#define SHMNotShardedNamespace                   9319
#define SHMNamespaceNotAShard                    9320
#define SHMNotPrimary                            9321
#define SHMNoSuchShard                           9322
#define SHMNotAShardAppServer                    9323
#define SHMInvalidSQLStatement                   9324
#define SHMIdRangeAlloc                          9325
#define SHMTablesWithShardKeyExist               9326
#define SHMShardActivateError                    9327
#define SHMMasterNotLocal                        9328
#define SHMCannotCreateDatabase                  9329
#define SHMDatabaseFileExists                    9330
#define SHMShardRtnNsExists                      9331
#define SHMShardRtnDbExists                      9332
#define SHMNoShardRtnDbPath                      9333
#define SHMNoShardRtnNs                          9334
#define SHMNoShardRtnDb                          9335
#define SHMSomeRowsNotDeleted                    9336
#define SHMAuthenticationError                   9337
#define SHMServiceNotEnabledOnShard              9338
#define SHMIncomingIPNotAllowed                  9339
#define SHMNoIPForHostname                       9340
#define SHMMessageSequenceError                  9341
#define SHMIPMismatch                            9342
#define SHMNoIPAvailable                         9343
#define SHMMasterNsNotMirrored                   9344
#define SHMQueryShardCannotBeMirrored            9345
#define SHMCannotDeassignShardTablesExist        9346
#define SHMNoSuchShardAddress                    9347
#define SHMEntityShardCountTooHigh               9348
#define SHMShardCleanupFailed                    9349
#define SHMShardAlreadyAssigned                  9350
#define SHMShardAssignedToAnotherMaster          9351
#define SHMNoSuchQueryShard                      9352
#define SHMNoShards                              9353
#define SHMShardVerificationError                9354
#define SHMShardVerificationErrors               9355
#define SHMQueryShardVerificationError           9356
#define SHMQueryShardVerificationErrors          9357
#define SHMUnrecognizedMsgCode                   9358
#define SHMInsufficientMaxServers                9359
#define SHMInsufficientMaxServerConn             9360
#define SHMInsufficientMaxServersMaxServerConn   9361
#define SHMQueryShardWrongDirectory              9362
#define SHMQueryShardWrongInstance               9363
#define SHMShardNotMirrored                      9364
#define SHMWrongBackupAddress                    9365
#define SHMInvalidOptionName                     9366
#define SHMInvalidOptionValue                    9367
#define SHMMasterCannotBeShard                   9368
#define SHMMirroredShardDatabaseNotMirrored      9369
#define SHMShardDbNotDismounted                  9370
#define SHMShardingNotEnabled                    9371
#define SHMQuiesceTimeout                        9372
#define SHMNotQuiesced                           9373
#define SHMReplyTimeout                          9374
#define SHMConnectBadPort                        9375
#define SHMShardingServiceNotEnabledOnShard      9376
#define SHMECPServiceNotEnabled                  9377
#define SHMRestartRequired                       9378
#define SHMClusterVersionMismatch                9379
#define SHMShardVersionMismatch                  9380
#define SHMUpgradeNeeded                         9381
#define SHMLicenseInsufficient                   9382
#define SHMShardOnMirrorDatabaseNotMirrored      9383
#define SHMShardNotPrimary                       9384
#define SHMCantConnectToEitherFailover           9385
#define SHMFailoverMemberError                   9386
#define SHMIdNotMappedToShard                    9387
#define SHMNoShardMapRanges                      9388
#define SHMUnrecognizedShardKeyType              9389
#define SHMCannotRebalanceNoShardKey             9390
#define SHMInvalidShardMap                       9391
#define SHMRebalancingNotSetupForExtent          9392
#define SHMNoShardedTables                       9393
#define SHMCannotAcquireRebalancingLock          9394
#define SHMRebalancingInProgress                 9395
#define SHMInconsistentTempDatabase              9396
#define SHMJobNotResponding                      9397
#define SHMNodeAlreadyInitialized                9398
#define SHMNodeAlreadyAttached                   9399
#define JSONInvalidDefaultParameter              9400
#define JSONInvalidPropertyParameter             9401
#define JSONNoStreamArray                        9402
#define JSONMaxString                            9403
#define JSONImportBadField                       9404
#define JSONImportRequired                       9405
#define JSONImportError                          9406
#define JSONUnexpectedNamespace                  9407
#define JSONExtraMapping                         9408
#define JSONNoPropertyName                       9409
#define JSONUnexpectedPropertyName               9410
#define JSONRefNotEnabled                        9411
#define BGTaskNoMem                              9500
#define BGTaskMemoryInUse                        9501
#define BGTaskRequestNotAllowed                  9502
#define BGTaskRequestNotAllowedState             9503
#define BGTaskNotRunning                         9505
#define BGTaskNotRunnable                        9506
#define BGTaskNotRunningInJob                    9507
#define BGTaskStartTimeout                       9508
#define BGTaskJobSignalFailed                    9509
#define BGTaskJobStartFailed                     9510
#define SHMNotSimpleCluster                      9600
#define SHMInvalidClusterURL                     9601
#define SHMNoClusterNamespace                    9602
#define SHMNotClusterNode                        9603
#define SHMConnectReadError                      9604
#define SHMNamespaceNotMirrored                  9605
#define SHMDatabaseNotMirrored                   9606
#define SHMInstanceCannotBeMirrored              9607
#define SHMInstanceNotMirrored                   9608
#define SHMClusterIsMirrored                     9609
#define SHMClusterIsNotMirrored                  9610
#define SHMMirrorHasTwoFailoverMembers           9611
#define SHMNoDirectory                           9612
#define SHMCannotAttachToSelf                    9613
#define SHMNotBackup                             9614
#define SHMCannotDeassignSelf                    9615
#define SHMDatabaseNotMirrorMatched              9616
#define SHMSameMasterAndClusterNamespace         9617
#define SHMSameMasterAndClusterDatabase          9618
#define SHMWrongMirror                           9619
#define SHMMissingParameter                      9620
#define SHMDuplicateMirrorName                   9621
#define SHMIncompleteArbiterAddress              9622
#define SHMAttemptedShardedIUDInTransaction      9623
#define SHMUpgradeNeededForSQM                   9624
#define SHMECPConnectionLockTimeout              9625
#define SHMNodeNotInitialized                    9626
#define SHMCantCatchupDb                         9627
#define SHMMustBeInMasterNS                      9628
#define SHMAlreadyMirrored                       9629
#define SHMMemberOfAnotherMirror                 9630
#define SHMNotDRAsync                            9631
#define SHMWrongMirrorForAsync                   9632
#define SHMMemberNotAuthorized                   9633
#define SHMCannotCreateEvent                     9634
#define SHMRebalanceLockTimeout                  9635
#define SHMRebalanceCantStartDequeueJob          9636
#define SHMRebalanceCantStartDaemon              9637
#define SHMMappingsExisted                       9638
#define SHMMissingTempAndLocalDataDirs           9639
#define SHMMissingCliECPServerName               9640
#define SHMNotClusterNamespace                   9645
#define IndexKeyPropertyInvalid                  15414
#define RequiresNeedObjectScript                 15415
#define RequiresNotSystemMethod                  15416
#define RequiresInvalidType                      15417
#define RequiresSigInvalid                       15418
#define RequiresNeedProcBlock                    15419
#define SQLMapConditionNull                      15511
#define IncorrectStringFormat                    15555
#define ExtentIndexReadOnly                      15570
#define ExtentIndexLockFailed                    15798
#define ExtentIndexClassLockFailed               15803
#define SourceErrorLocation                      16000
#define UnableToOpenDocument                     16001
#define InvalidJSONContent                       16002
#define PostedDataNoContent                      16003
#define UnknownRequestType                       16004
#define DocumentDoesNotExist                     16005
#define DocumentNameInvalid                      16006
#define XDebugCmdInvalid                         16007
#define UDLLoadErr                               16008
#define DocumentDatabaseAlreadyExists            25051
#define DocumentDatabaseNameInvalid              25053
#define DocumentDatabaseNameConflict             25070
#define DocumentDatabaseDoesNotExist             25351
#define DocumentDatabaseKeyNotExist              25465
#define DocumentDatabaseFindOperatorNotValid     25540
#define DocumentDatabasePropertyNotValid         25541
#define DocumentKeyNotFound                      25797
#define DocDBInvalidContentType                  25913
#define IAMKeyDoesNotExist                       26000
#define SAMHttpRequestFailed                     26100
#define SAMAlertRulesExprInvalid                 26101
#define SAMAlertRulesMissingKey                  26102
#define SAMAlertRulesValueWrongType              26103
#define SAMAlertRulesMissingSubkey               26104
#define SAMAlertRulesSubvalueWrongType           26105
#define SAMAlertRulesBadExprMissingCluster       26106
#define SAMAlertRulesBadExprBadCluster           26107
#define SAMAlertRulesBadSeverity                 26108
#define SAMObjectMissingKey                      26109
#define SAMObjectValueWrongType                  26110
#define SAMObjectTooManyKeys                     26111
#define SAMClusterAlreadyExists                  26112
#define SAMObjectDoesNotExist                    26113
#define SAMAddInstanceNoCluster                  26114
#define SAMRequestBodyNotJSON                    26115
#define SAMLocked                                26116
#define SAMTooManyQueryParameters                26117
#define SAMClusterNameNotValid                   26118
#define SAMInstanceAlreadyInCluster              26119
#define SAMSourceArgumentInvalid                 26120
#define SAMObjectIdInvalidInput                  26121
#define SAMGolangBridgeError                     26122
#define SAMArrayElementWrongType                 26123
#define SAMKeepDaysInvalidInput                  26124
#define MQTTCLIENT                               27000
#define MQTTParameterMustBe                      27001
#define MQTTParameterMaxLength                   27002
#define MQTTParameterIllegalValue                27003
#define MQTTNoCAConfigured                       27004
#define MQTTIllegalQOS                           27005
#define MQTTSendTimedOut                         27006
#define NetWebSocketErrConnectionClosed          28000
#define NetWebSocketErrPingTimeout               28001
#define NetWebSocketErrPongInvalid               28002
#define NetWebSocketErrUpgradeFailed             28003
#define NetWebSocketErrURLRequired               28004
]]></Routine>


<Routine name="%occFile" type="INC"><![CDATA[
#define FileExists(%file)	($zu(140,4,%file)=0)
#define FileExistsRet(%file) $zu(140,4,%file)
#define FileReadOnly(%file)	($zu(140,12,%file,2)'=0)
#define FileWritable(%file)	($zu(140,12,%file,2)=0)
#define FileCreateDirectory(%file)	('$zu(140,9,%file))
#define FileCreateDirectoryRet(%file) $zu(140,9,%file)
#define FileCreateDirectoryChain(%file)	 ('$zu(140,9,%file,1))
#define FileCreateDirectoryChainRet(%file) $zu(140,9,%file,1)
#define FileDirectoryExists(%file)	($zu(12,%file,2)'="")
#define FileNormalizeFilename(%file)	$zu(12,%file,0,1)
#define FileNormalizeDirectory(%file)	$zu(12,%file,1,1)
#define FileDelete(%file)	('$zu(140,5,$select($$$isVMS&&(%file'[";"):%file_";*",1:%file)))
#define FileDeleteRet(%file)	$zu(140,5,$select($$$isVMS&&(%file'[";"):%file_";*",1:%file))
#define FileRemoveDirectory(%file)	('$zu(140,10,%file))
#define FileRemoveDirectoryRet(%file)	$zu(140,10,%file)
#define FileRename(%old,%new)	('$zu(140,6,%old,%new))
#define FileRenameRet(%old,%new)	$zu(140,6,%old,%new)
#define FileCopy(%from,%to)	('$zu(140,11,%from,%to))
#define FileCopyRet(%from,%to)	$zu(140,11,%from,%to)
#define FileCurrentDir	$zu(168)
#define FileSetCurrentDir(%dir)	$zu(168,%dir)
#define FileMgrDir	$zu(12)
#define FileSize(%file)	$zu(140,1,%file)
#def1arg FileDateCreated(%arg)	$zu(140,3,%arg)
#def1arg FileDateModified(%arg)	$zu(140,2,%arg)
#define FileAttributes(%file)	$zu(140,7,%file)
#define FileSetAttributes(%file,%attr)	($zu(140,8,%file,%attr)=1)
#define FileSetAttributesRet(%file,%attr)	$zu(140,8,%file,%attr)
#define FileVMSRecordFormat(%file)	$zu(140,7,%file,1)
#define	FileSetGroupName(%file,%group)	$zu(140,15,%file,%group)
#define FileTempDir ##class(%SYS.System).TempDirectory()
]]></Routine>


<Routine name="%occInclude" type="INC"><![CDATA[
#include %occOptions
#include %occConstant
#include %occKeyword
#include %occProcedure
#include %occLocation
#include %occReference
#include %occCompiler
#include %occReference2
#include %occReferenceStorage
#include %occXXX
#include %occObject
#include %occOID
#include %occFlag
#include %occQualifier
#include %occEnvironment
#include %occMessages
#include %occStatus
#include %occDiagnostics
#include %occName
#include %occClassname
#include %occFunctions
#include %occVersion
#include %occRoutine
#include %occJavaMetaDictionary
#include %occDepend
#include %occFile
#include %sySecurity
#include %syAudit
#include %xmlDOM
#INCLUDE %occErrors
]]></Routine>


<Routine name="%occStatus" type="INC"><![CDATA[
/// Create a success %Status code
#define OK                     1
 
#define  ERRORCODE(%ErrorArgList)      ##safeexpression($$macroERRORCODE^%occMsgXML(%literalargs))
 
/// Create an error %Status code
/// %arg1 - Error code, total list of codes in %occErrors.inc
/// %arg2 - Optional additional information
#def1arg ERROR(%ErrorArgList)          ##safeexpression($$macroERROR^%occMsgXML(%literalargs))
 
#define  ERR(%ErrorArgList)            ##safeexpression($$macroERROR^%occMsgXML(%literalargs))
#def1arg ERRORSTATUS(%ErrorArgList)    ##safeexpression($$macroERRORSTATUS^%occMsgXML(%literalargs))
#def1arg EMBEDERROR(%ErrorArgList)     ##safeexpression($$macroEMBEDERROR^%occMsgXML(%literalargs))
 
/// Return true if the %Status code is success, and false otherwise
/// %sc - %Status code
#define ISOK(%sc)              (''%sc)
 
/// Return true if the %Status code if an error, and false otherwise
/// %sc - %Status code
#define ISERR(%sc)             ('%sc)
#define LISTINTERRUPTERRORS    "|INTERRUPT|FILEFULL|DISKHARD|DATABASE|SYSTEM|STORE|EXTERNAL INTERRUPT|ALARM|DSKFUL|"
#define ISINTERRUPT(%sc)       ($$$ISERR(%sc)&&$case($lg($lg($e(%sc,3,*))),$$$ERRORCODE($$$MultiShutdown):1,$$$ERRORCODE($$$MultiQueueDead):1,$$$ERRORCODE($$$CacheError):$$$LISTINTERRUPTERRORS[("|"_$p($p($lg($lg($e(%sc,3,*),1),2),">"),"<",2)_"|"),:0))
#define ZERRORTOSTATUS(%sc)    If $piece($piece($zerror,">"),"<",2)="THROW",$isobject($throwobj) { Set %sc=$throwobj.AsStatus() } Else { Set %sc=$$$ERROR($$$CacheError,$zerror) }
#define ISINTERRUPTTHROW(%sc)  If $$$ISINTERRUPT(%sc) { $$$DecErrorNum Throw ##class(%Exception.StatusException).ThrowIfInterrupt(%sc) }
#define ISEXCEPTIONINTERRUPTTHROW(%ex) If $classname(%ex)="%Exception.SystemException",(%ex.Code=$$$ERRORCODE($$$CacheError)&&($$$LISTINTERRUPTERRORS[("|"_$piece($piece(%ex.Name,">"),"<",2)_"|")))||(%ex.Code=$$$ERRORCODE($$$MultiShutdown))||(%ex.Code=$$$ERRORCODE($$$MultiQueueDead)) { ZTrap $zerror }
 
/// Return the error code from a %Status value
/// %sc - %Status code
#define GETERRORCODE(%sc)      $listget($listget($extract(%sc,3,*)),1,0)
 
/// Append a %Status code to an existing %Status value
/// %sc1 - Existing %Status value
/// %sc2 - %Status value to append
#define ADDSC(%sc1,%sc2)       $select(+%sc1:%sc2,1:$$AppendStatus^%occSystem(%sc1,%sc2))
 
/// Embed additional information about %Status code
/// %sc1 - Existing %Status code
/// %sc2 - %Status value to embed in %sc1
#define EMBEDSC(%sc1,%sc2)     $$EmbedStatus^%apiOBJ(%sc1,%sc2)
 
#define GETERRORCOUNT(%sc)     $listlength($extract(%sc,3,*))
#;
#define QuitOnError(%expr)     Set sc=%expr Quit:$$$ISERR(sc) sc
#define QUITONERROR(%sc,%expr) Set %sc=%expr Quit:$$$ISERR(%sc) %sc
#define ThrowOnError(%expr)    Set sc=%expr Throw:$$$ISERR(sc) ##class(%Exception.StatusException).ThrowIfInterrupt(sc)
 
/// If the expression returns an error %Status code then throw this as an exception
/// %sc - Local variable to return %Status code into
/// %expr - Expression to evaluate that returns a %Status code
#define THROWONERROR(%sc,%expr) Set %sc=%expr Throw:$$$ISERR(%sc) ##class(%Exception.StatusException).ThrowIfInterrupt(%sc)
 
#define TOE(%sc,%expr)         $$$THROWONERROR(%sc,%expr)
 
/// Throw a %Status code as an exception
/// %sc - %Status code to throw
#define ThrowStatus(%sc)       Throw ##class(%Exception.StatusException).ThrowIfInterrupt(%sc)
 
#define YES 1
#define NO  0

#; Throw a swizzle failure error
#define THROWSWIZZLEERR        Do:$get(^%SYS("ThrowSwizzleError"),0) $zutil(96,3,19,1)

#def1arg AutoLock(%LockrefTypeTimeout) ##safeexpression($$macroLock^%occMsgXML(%literalargs))
#define BitMerge(%dest,%source) ##safeexpression($$bitmerge^%occMsgXML(%literalargs))

#define ThrowSQLIfError(%sqlcode,%message) Throw:%sqlcode<0 ##class(%Exception.SQL).CreateFromSQLCODE(%sqlcode,%message)

]]></Routine>


<Routine name="%zrcc" type="MAC" languagemode="0"><![CDATA[
%zrcc ; install ZPM
	zn "%SYS"
	set $namespace="%SYS", name="DefaultSSL" 
	do:'##class(Security.SSLConfigs).Exists(name) ##class(Security.SSLConfigs).Create(name) 
	set url="https://pm.community.intersystems.com/packages/zpm/latest/installer" 
	Do ##class(%Net.URLParser).Parse(url,.comp) 
	set ht = ##class(%Net.HttpRequest).%New()
	s ht.Server = comp("host"), ht.Port = 443, ht.Https=1
	s ht.SSLConfiguration=name, st=ht.Get(comp("path")) 
	if 'st do $System.Status.GetErrorText(st) b   quit
	set xml=##class(%File).TempFilename("xml")
	s tFile = ##class(%Stream.FileBinary).%New()
	s tFile.Filename = xml 
	do tFile.CopyFromAndSave(ht.HttpResponse.Data) 
	do ht.%Close()
	set $ZT="done"
	do xml(xml)
	do $system.OBJ.Load(xml,"ck") 
done
	if %objlasterror,6301-$system.Status.GetErrorCodes(%objlasterror) {
		do $system.OBJ.DisplayError() }
	else {
		write !,"IGNORE previous Error Messages",
			!,"caused by a bad module.xml file in ZPM repo",
			!!,"All done, ready for use",!
			}		
	do ##class(%File).Delete(xml)
	quit
	
xml(path) ; fix xml version
	set iris="<Export generator=""IRIS"""
	set cache="<Export generator=""Cache"" version=""25"">"
	set save=path_".tmp"
	set from=##class(%File).%New(path)
	do from.Rename(path,save)
	set from.Name=save
	set to=##class(%File).%New(path)
	do from.Open("R"),to.Open("WNS")	
	for i=1:1 {
		set lin=from.Read()
		if lin[iris set lin=cache
		do to.WriteLine(lin)
		quit:from.AtEnd	
		}
	do from.Close(),to.Close()
	quit
	
prepare(xml)
	zn "%SYS"
	set syslib=$system.Util.ManagerDirectory()_"cachelib"
	set db=##class(SYS.Database).%OpenId(sys)
	set db.ReadOnly=0
	set sc=db.%Save()
	if 'sc do $system.OBJ.DispalyError() quit
	do $system.OBJ.Load(xml,"ck")
	set db.ReadOnly=1
	set sc=db.%Save()
	if 'sc do $system.OBJ.DispalyError() quit
	write !,"Ready for ZPM installation",!
	quit
		
]]></Routine>


<Project name="ZPMcache" LastModified="2022-11-27 22:50:21.295681">
  <Items>
    <ProjectItem name="%Dictionary.Classname" type="CLS"></ProjectItem>
    <ProjectItem name="%Dictionary.Identifier" type="CLS"></ProjectItem>
    <ProjectItem name="%JSON.Adaptor" type="CLS"></ProjectItem>
    <ProjectItem name="%JSON.Generator" type="CLS"></ProjectItem>
    <ProjectItem name="%JSON.Mapping" type="CLS"></ProjectItem>
    <ProjectItem name="%JSON.MappingProperty" type="CLS"></ProjectItem>
    <ProjectItem name="%JSON.PropertyParameters" type="CLS"></ProjectItem>
    <ProjectItem name="%Library.RawString" type="CLS"></ProjectItem>
    <ProjectItem name="%PVA.INC" type="MAC"></ProjectItem>
    <ProjectItem name="%Storage.Persistent" type="CLS"></ProjectItem>
    <ProjectItem name="%Storage.Serial" type="CLS"></ProjectItem>
    <ProjectItem name="%jsonMap.INC" type="MAC"></ProjectItem>
    <ProjectItem name="%occErrors.INC" type="MAC"></ProjectItem>
    <ProjectItem name="%occFile.INC" type="MAC"></ProjectItem>
    <ProjectItem name="%occInclude.INC" type="MAC"></ProjectItem>
    <ProjectItem name="%occStatus.INC" type="MAC"></ProjectItem>
    <ProjectItem name="%zrcc.MAC" type="MAC"></ProjectItem>
  </Items>
</Project>
</Export>
